/////////////////////////////
/// Window APIs
/////////////////////////////

interface AddEventListenerOptions extends EventListenerOptions {
    /** Type: boolean */
    once?: boolean;
    /** Type: boolean */
    passive?: boolean;
    /** Type: AbortSignal */
    signal?: AbortSignal;
}

interface AddressErrors {
    /** Type: DOMString */
    addressLine?: string;
    /** Type: DOMString */
    city?: string;
    /** Type: DOMString */
    country?: string;
    /** Type: DOMString */
    dependentLocality?: string;
    /** Type: DOMString */
    organization?: string;
    /** Type: DOMString */
    phone?: string;
    /** Type: DOMString */
    postalCode?: string;
    /** Type: DOMString */
    recipient?: string;
    /** Type: DOMString */
    region?: string;
    /** Type: DOMString */
    sortingCode?: string;
}

interface AesCbcParams extends Algorithm {
    /** Type: BufferSource */
    iv: BufferSource;
}

interface AesCtrParams extends Algorithm {
    /** Type: BufferSource */
    counter: BufferSource;
    /** Type: octet */
    length: number;
}

interface AesDerivedKeyParams extends Algorithm {
    /** Type: unsigned short */
    length: number;
}

interface AesGcmParams extends Algorithm {
    /** Type: BufferSource */
    additionalData?: BufferSource;
    /** Type: BufferSource */
    iv: BufferSource;
    /** Type: octet */
    tagLength?: number;
}

interface AesKeyAlgorithm extends KeyAlgorithm {
    /** Type: unsigned short */
    length: number;
}

interface AesKeyGenParams extends Algorithm {
    /** Type: unsigned short */
    length: number;
}

interface Algorithm {
    /** Type: DOMString */
    name: string;
}

interface AnalyserOptions extends AudioNodeOptions {
    /** Type: unsigned long */
    fftSize?: number;
    /** Type: double */
    maxDecibels?: number;
    /** Type: double */
    minDecibels?: number;
    /** Type: double */
    smoothingTimeConstant?: number;
}

interface AnimationEventInit extends EventInit {
    /** Type: CSSOMString */
    animationName?: string;
    /** Type: double */
    elapsedTime?: number;
    /** Type: CSSOMString */
    pseudoElement?: string;
}

interface AnimationPlaybackEventInit extends EventInit {
    /** Type: CSSNumberish */
    currentTime?: CSSNumberish | null;
    /** Type: CSSNumberish */
    timelineTime?: CSSNumberish | null;
}

interface AssignedNodesOptions {
    /** Type: boolean */
    flatten?: boolean;
}

interface AudioBufferOptions {
    /** Type: unsigned long */
    length: number;
    /** Type: unsigned long */
    numberOfChannels?: number;
    /** Type: float */
    sampleRate: number;
}

interface AudioBufferSourceOptions {
    /** Type: AudioBuffer */
    buffer?: AudioBuffer | null;
    /** Type: float */
    detune?: number;
    /** Type: boolean */
    loop?: boolean;
    /** Type: double */
    loopEnd?: number;
    /** Type: double */
    loopStart?: number;
    /** Type: float */
    playbackRate?: number;
}

interface AudioConfiguration {
    /** Type: unsigned long long */
    bitrate?: number;
    /** Type: DOMString */
    channels?: string;
    /** Type: DOMString */
    contentType: string;
    /** Type: unsigned long */
    samplerate?: number;
    /** Type: boolean */
    spatialRendering?: boolean;
}

interface AudioContextOptions {
    /** Type: [object Object],[object Object] */
    latencyHint?: AudioContextLatencyCategory | number;
    /** Type: float */
    sampleRate?: number;
}

interface AudioDataCopyToOptions {
    /** Type: AudioSampleFormat */
    format?: AudioSampleFormat;
    /** Type: unsigned long */
    frameCount?: number;
    /** Type: unsigned long */
    frameOffset?: number;
    /** Type: unsigned long */
    planeIndex: number;
}

interface AudioDataInit {
    /** Type: BufferSource */
    data: BufferSource;
    /** Type: AudioSampleFormat */
    format: AudioSampleFormat;
    /** Type: unsigned long */
    numberOfChannels: number;
    /** Type: unsigned long */
    numberOfFrames: number;
    /** Type: float */
    sampleRate: number;
    /** Type: long long */
    timestamp: number;
    /** Type: [object Object] */
    transfer?: ArrayBuffer[];
}

interface AudioDecoderConfig {
    /** Type: DOMString */
    codec: string;
    /** Type: BufferSource */
    description?: BufferSource;
    /** Type: unsigned long */
    numberOfChannels: number;
    /** Type: unsigned long */
    sampleRate: number;
}

interface AudioDecoderInit {
    /** Type: WebCodecsErrorCallback */
    error: WebCodecsErrorCallback;
    /** Type: AudioDataOutputCallback */
    output: AudioDataOutputCallback;
}

interface AudioDecoderSupport {
    /** Type: AudioDecoderConfig */
    config?: AudioDecoderConfig;
    /** Type: boolean */
    supported?: boolean;
}

interface AudioEncoderConfig {
    /** Type: unsigned long long */
    bitrate?: number;
    /** Type: BitrateMode */
    bitrateMode?: BitrateMode;
    /** Type: DOMString */
    codec: string;
    /** Type: unsigned long */
    numberOfChannels: number;
    /** Type: OpusEncoderConfig */
    opus?: OpusEncoderConfig;
    /** Type: unsigned long */
    sampleRate: number;
}

interface AudioEncoderInit {
    /** Type: WebCodecsErrorCallback */
    error: WebCodecsErrorCallback;
    /** Type: EncodedAudioChunkOutputCallback */
    output: EncodedAudioChunkOutputCallback;
}

interface AudioEncoderSupport {
    /** Type: AudioEncoderConfig */
    config?: AudioEncoderConfig;
    /** Type: boolean */
    supported?: boolean;
}

interface AudioNodeOptions {
    /** Type: unsigned long */
    channelCount?: number;
    /** Type: ChannelCountMode */
    channelCountMode?: ChannelCountMode;
    /** Type: ChannelInterpretation */
    channelInterpretation?: ChannelInterpretation;
}

interface AudioProcessingEventInit extends EventInit {
    /** Type: AudioBuffer */
    inputBuffer: AudioBuffer;
    /** Type: AudioBuffer */
    outputBuffer: AudioBuffer;
    /** Type: double */
    playbackTime: number;
}

interface AudioTimestamp {
    /** Type: double */
    contextTime?: number;
    /** Type: DOMHighResTimeStamp */
    performanceTime?: DOMHighResTimeStamp;
}

interface AudioWorkletNodeOptions extends AudioNodeOptions {
    /** Type: unsigned long */
    numberOfInputs?: number;
    /** Type: unsigned long */
    numberOfOutputs?: number;
    /** Type: [object Object] */
    outputChannelCount?: number[];
    /** Type: [object Object],[object Object] */
    parameterData?: Record<string, number>;
    /** Type: object */
    processorOptions?: any;
}

interface AuthenticationExtensionsClientInputs {
    /** Type: DOMString */
    appid?: string;
    /** Type: boolean */
    credProps?: boolean;
    /** Type: boolean */
    hmacCreateSecret?: boolean;
    /** Type: boolean */
    minPinLength?: boolean;
    /** Type: AuthenticationExtensionsPRFInputs */
    prf?: AuthenticationExtensionsPRFInputs;
}

interface AuthenticationExtensionsClientInputsJSON {
}

interface AuthenticationExtensionsClientOutputs {
    /** Type: boolean */
    appid?: boolean;
    /** Type: CredentialPropertiesOutput */
    credProps?: CredentialPropertiesOutput;
    /** Type: boolean */
    hmacCreateSecret?: boolean;
    /** Type: AuthenticationExtensionsPRFOutputs */
    prf?: AuthenticationExtensionsPRFOutputs;
}

interface AuthenticationExtensionsPRFInputs {
    /** Type: AuthenticationExtensionsPRFValues */
    eval?: AuthenticationExtensionsPRFValues;
    /** Type: [object Object],[object Object] */
    evalByCredential?: Record<string, AuthenticationExtensionsPRFValues>;
}

interface AuthenticationExtensionsPRFOutputs {
    /** Type: boolean */
    enabled?: boolean;
    /** Type: AuthenticationExtensionsPRFValues */
    results?: AuthenticationExtensionsPRFValues;
}

interface AuthenticationExtensionsPRFValues {
    /** Type: BufferSource */
    first: BufferSource;
    /** Type: BufferSource */
    second?: BufferSource;
}

interface AuthenticatorSelectionCriteria {
    /** Type: DOMString */
    authenticatorAttachment?: AuthenticatorAttachment;
    /** Type: boolean */
    requireResidentKey?: boolean;
    /** Type: DOMString */
    residentKey?: ResidentKeyRequirement;
    /** Type: DOMString */
    userVerification?: UserVerificationRequirement;
}

interface AvcEncoderConfig {
    /** Type: AvcBitstreamFormat */
    format?: AvcBitstreamFormat;
}

interface BiquadFilterOptions extends AudioNodeOptions {
    /** Type: float */
    Q?: number;
    /** Type: float */
    detune?: number;
    /** Type: float */
    frequency?: number;
    /** Type: float */
    gain?: number;
    /** Type: BiquadFilterType */
    type?: BiquadFilterType;
}

interface BlobEventInit {
    /** Type: Blob */
    data: Blob;
    /** Type: DOMHighResTimeStamp */
    timecode?: DOMHighResTimeStamp;
}

interface BlobPropertyBag {
    /** Type: EndingType */
    endings?: EndingType;
    /** Type: DOMString */
    type?: string;
}

interface CSSMatrixComponentOptions {
    /** Type: boolean */
    is2D?: boolean;
}

interface CSSNumericType {
    /** Type: long */
    angle?: number;
    /** Type: long */
    flex?: number;
    /** Type: long */
    frequency?: number;
    /** Type: long */
    length?: number;
    /** Type: long */
    percent?: number;
    /** Type: CSSNumericBaseType */
    percentHint?: CSSNumericBaseType;
    /** Type: long */
    resolution?: number;
    /** Type: long */
    time?: number;
}

interface CSSStyleSheetInit {
    /** Type: DOMString */
    baseURL?: string;
    /** Type: boolean */
    disabled?: boolean;
    /** Type: [object Object],[object Object] */
    media?: MediaList | string;
}

interface CacheQueryOptions {
    /** Type: boolean */
    ignoreMethod?: boolean;
    /** Type: boolean */
    ignoreSearch?: boolean;
    /** Type: boolean */
    ignoreVary?: boolean;
}

interface CanvasRenderingContext2DSettings {
    /** Type: boolean */
    alpha?: boolean;
    /** Type: PredefinedColorSpace */
    colorSpace?: PredefinedColorSpace;
    /** Type: boolean */
    desynchronized?: boolean;
    /** Type: boolean */
    willReadFrequently?: boolean;
}

interface CaretPositionFromPointOptions {
    /** Type: [object Object] */
    shadowRoots?: ShadowRoot[];
}

interface ChannelMergerOptions extends AudioNodeOptions {
    /** Type: unsigned long */
    numberOfInputs?: number;
}

interface ChannelSplitterOptions extends AudioNodeOptions {
    /** Type: unsigned long */
    numberOfOutputs?: number;
}

interface CheckVisibilityOptions {
    /** Type: boolean */
    checkOpacity?: boolean;
    /** Type: boolean */
    checkVisibilityCSS?: boolean;
    /** Type: boolean */
    contentVisibilityAuto?: boolean;
    /** Type: boolean */
    opacityProperty?: boolean;
    /** Type: boolean */
    visibilityProperty?: boolean;
}

interface ClientQueryOptions {
    /** Type: boolean */
    includeUncontrolled?: boolean;
    /** Type: ClientType */
    type?: ClientTypes;
}

interface ClipboardEventInit extends EventInit {
    /** Type: DataTransfer */
    clipboardData?: DataTransfer | null;
}

interface ClipboardItemOptions {
    /** Type: PresentationStyle */
    presentationStyle?: PresentationStyle;
}

interface CloseEventInit extends EventInit {
    /** Type: unsigned short */
    code?: number;
    /** Type: USVString */
    reason?: string;
    /** Type: boolean */
    wasClean?: boolean;
}

interface CompositionEventInit extends UIEventInit {
    /** Type: DOMString */
    data?: string;
}

interface ComputedEffectTiming extends EffectTiming {
    /** Type: CSSNumberish */
    activeDuration?: CSSNumberish;
    /** Type: unrestricted double */
    currentIteration?: number | null;
    /** Type: CSSNumberish */
    endTime?: CSSNumberish;
    /** Type: CSSNumberish */
    localTime?: CSSNumberish | null;
    /** Type: double */
    progress?: number | null;
    /** Type: CSSNumberish */
    startTime?: CSSNumberish;
}

interface ComputedKeyframe {
    /** Type: CompositeOperationOrAuto */
    composite: CompositeOperationOrAuto;
    /** Type: double */
    computedOffset: number;
    /** Type: DOMString */
    easing: string;
    /** Type: double */
    offset: number | null;
    [property: string]: string | number | null | undefined;
}

interface ConstantSourceOptions {
    /** Type: float */
    offset?: number;
}

interface ConstrainBooleanParameters {
    /** Type: boolean */
    exact?: boolean;
    /** Type: boolean */
    ideal?: boolean;
}

interface ConstrainDOMStringParameters {
    /** Type: [object Object],[object Object] */
    exact?: string | string[];
    /** Type: [object Object],[object Object] */
    ideal?: string | string[];
}

interface ConstrainDoubleRange extends DoubleRange {
    /** Type: double */
    exact?: number;
    /** Type: double */
    ideal?: number;
}

interface ConstrainULongRange extends ULongRange {
    /** Type: unsigned long */
    exact?: number;
    /** Type: unsigned long */
    ideal?: number;
}

interface ContentVisibilityAutoStateChangeEventInit extends EventInit {
    /** Type: boolean */
    skipped?: boolean;
}

interface ConvolverOptions extends AudioNodeOptions {
    /** Type: AudioBuffer */
    buffer?: AudioBuffer | null;
    /** Type: boolean */
    disableNormalization?: boolean;
}

interface CookieChangeEventInit extends EventInit {
    /** Type: CookieList */
    changed?: CookieList;
    /** Type: CookieList */
    deleted?: CookieList;
}

interface CookieInit {
    /** Type: USVString */
    domain?: string | null;
    /** Type: DOMHighResTimeStamp */
    expires?: DOMHighResTimeStamp | null;
    /** Type: USVString */
    name: string;
    /** Type: boolean */
    partitioned?: boolean;
    /** Type: USVString */
    path?: string;
    /** Type: CookieSameSite */
    sameSite?: CookieSameSite;
    /** Type: USVString */
    value: string;
}

interface CookieListItem {
    /** Type: USVString */
    name?: string;
    /** Type: USVString */
    value?: string;
}

interface CookieStoreDeleteOptions {
    /** Type: USVString */
    domain?: string | null;
    /** Type: USVString */
    name: string;
    /** Type: boolean */
    partitioned?: boolean;
    /** Type: USVString */
    path?: string;
}

interface CookieStoreGetOptions {
    /** Type: USVString */
    name?: string;
    /** Type: USVString */
    url?: string;
}

interface CredentialCreationOptions {
    /** Type: PublicKeyCredentialCreationOptions */
    publicKey?: PublicKeyCredentialCreationOptions;
    /** Type: AbortSignal */
    signal?: AbortSignal;
}

interface CredentialPropertiesOutput {
    /** Type: boolean */
    rk?: boolean;
}

interface CredentialRequestOptions {
    /** Type: CredentialMediationRequirement */
    mediation?: CredentialMediationRequirement;
    /** Type: PublicKeyCredentialRequestOptions */
    publicKey?: PublicKeyCredentialRequestOptions;
    /** Type: AbortSignal */
    signal?: AbortSignal;
}

interface CryptoKeyPair {
    /** Type: CryptoKey */
    privateKey: CryptoKey;
    /** Type: CryptoKey */
    publicKey: CryptoKey;
}

interface CustomEventInit<T = any> extends EventInit {
    /** Type: any */
    detail?: T;
}

interface DOMMatrix2DInit {
    /** Type: unrestricted double */
    a?: number;
    /** Type: unrestricted double */
    b?: number;
    /** Type: unrestricted double */
    c?: number;
    /** Type: unrestricted double */
    d?: number;
    /** Type: unrestricted double */
    e?: number;
    /** Type: unrestricted double */
    f?: number;
    /** Type: unrestricted double */
    m11?: number;
    /** Type: unrestricted double */
    m12?: number;
    /** Type: unrestricted double */
    m21?: number;
    /** Type: unrestricted double */
    m22?: number;
    /** Type: unrestricted double */
    m41?: number;
    /** Type: unrestricted double */
    m42?: number;
}

interface DOMMatrixInit extends DOMMatrix2DInit {
    /** Type: boolean */
    is2D?: boolean;
    /** Type: unrestricted double */
    m13?: number;
    /** Type: unrestricted double */
    m14?: number;
    /** Type: unrestricted double */
    m23?: number;
    /** Type: unrestricted double */
    m24?: number;
    /** Type: unrestricted double */
    m31?: number;
    /** Type: unrestricted double */
    m32?: number;
    /** Type: unrestricted double */
    m33?: number;
    /** Type: unrestricted double */
    m34?: number;
    /** Type: unrestricted double */
    m43?: number;
    /** Type: unrestricted double */
    m44?: number;
}

interface DOMPointInit {
    /** Type: unrestricted double */
    w?: number;
    /** Type: unrestricted double */
    x?: number;
    /** Type: unrestricted double */
    y?: number;
    /** Type: unrestricted double */
    z?: number;
}

interface DOMQuadInit {
    /** Type: DOMPointInit */
    p1?: DOMPointInit;
    /** Type: DOMPointInit */
    p2?: DOMPointInit;
    /** Type: DOMPointInit */
    p3?: DOMPointInit;
    /** Type: DOMPointInit */
    p4?: DOMPointInit;
}

interface DOMRectInit {
    /** Type: unrestricted double */
    height?: number;
    /** Type: unrestricted double */
    width?: number;
    /** Type: unrestricted double */
    x?: number;
    /** Type: unrestricted double */
    y?: number;
}

interface DelayOptions extends AudioNodeOptions {
    /** Type: double */
    delayTime?: number;
    /** Type: double */
    maxDelayTime?: number;
}

interface DeviceMotionEventAccelerationInit {
    /** Type: double */
    x?: number | null;
    /** Type: double */
    y?: number | null;
    /** Type: double */
    z?: number | null;
}

interface DeviceMotionEventInit extends EventInit {
    /** Type: DeviceMotionEventAccelerationInit */
    acceleration?: DeviceMotionEventAccelerationInit;
    /** Type: DeviceMotionEventAccelerationInit */
    accelerationIncludingGravity?: DeviceMotionEventAccelerationInit;
    /** Type: double */
    interval?: number;
    /** Type: DeviceMotionEventRotationRateInit */
    rotationRate?: DeviceMotionEventRotationRateInit;
}

interface DeviceMotionEventRotationRateInit {
    /** Type: double */
    alpha?: number | null;
    /** Type: double */
    beta?: number | null;
    /** Type: double */
    gamma?: number | null;
}

interface DeviceOrientationEventInit extends EventInit {
    /** Type: boolean */
    absolute?: boolean;
    /** Type: double */
    alpha?: number | null;
    /** Type: double */
    beta?: number | null;
    /** Type: double */
    gamma?: number | null;
}

interface DisplayMediaStreamOptions {
    /** Type: [object Object],[object Object] */
    audio?: boolean | MediaTrackConstraints;
    /** Type: [object Object],[object Object] */
    video?: boolean | MediaTrackConstraints;
}

interface DocumentTimelineOptions {
    /** Type: DOMHighResTimeStamp */
    originTime?: DOMHighResTimeStamp;
}

interface DoubleRange {
    /** Type: double */
    max?: number;
    /** Type: double */
    min?: number;
}

interface DragEventInit extends MouseEventInit {
    /** Type: DataTransfer */
    dataTransfer?: DataTransfer | null;
}

interface DynamicsCompressorOptions extends AudioNodeOptions {
    /** Type: float */
    attack?: number;
    /** Type: float */
    knee?: number;
    /** Type: float */
    ratio?: number;
    /** Type: float */
    release?: number;
    /** Type: float */
    threshold?: number;
}

interface EcKeyAlgorithm extends KeyAlgorithm {
    /** Type: NamedCurve */
    namedCurve: NamedCurve;
}

interface EcKeyGenParams extends Algorithm {
    /** Type: NamedCurve */
    namedCurve: NamedCurve;
}

interface EcKeyImportParams extends Algorithm {
    /** Type: NamedCurve */
    namedCurve: NamedCurve;
}

interface EcdhKeyDeriveParams extends Algorithm {
    /** Type: CryptoKey */
    public: CryptoKey;
}

interface EcdsaParams extends Algorithm {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
}

interface EffectTiming {
    /** Type: double */
    delay?: number;
    /** Type: PlaybackDirection */
    direction?: PlaybackDirection;
    /** Type: [object Object],[object Object],[object Object] */
    duration?: number | CSSNumericValue | string;
    /** Type: DOMString */
    easing?: string;
    /** Type: double */
    endDelay?: number;
    /** Type: FillMode */
    fill?: FillMode;
    /** Type: double */
    iterationStart?: number;
    /** Type: unrestricted double */
    iterations?: number;
    /** Type: double */
    playbackRate?: number;
}

interface ElementCreationOptions {
    /** Type: CustomElementRegistry */
    customElementRegistry?: CustomElementRegistry;
    /** Type: DOMString */
    is?: string;
}

interface ElementDefinitionOptions {
    /** Type: DOMString */
    extends?: string;
}

interface EncodedAudioChunkInit {
    /** Type: AllowSharedBufferSource */
    data: AllowSharedBufferSource;
    /** Type: unsigned long long */
    duration?: number;
    /** Type: long long */
    timestamp: number;
    /** Type: [object Object] */
    transfer?: ArrayBuffer[];
    /** Type: EncodedAudioChunkType */
    type: EncodedAudioChunkType;
}

interface EncodedAudioChunkMetadata {
    /** Type: AudioDecoderConfig */
    decoderConfig?: AudioDecoderConfig;
}

interface EncodedVideoChunkInit {
    /** Type: AllowSharedBufferSource */
    data: AllowSharedBufferSource;
    /** Type: unsigned long long */
    duration?: number;
    /** Type: long long */
    timestamp: number;
    /** Type: EncodedVideoChunkType */
    type: EncodedVideoChunkType;
}

interface EncodedVideoChunkMetadata {
    /** Type: VideoDecoderConfig */
    decoderConfig?: VideoDecoderConfig;
}

interface ErrorEventInit extends EventInit {
    /** Type: unsigned long */
    colno?: number;
    /** Type: any */
    error?: any;
    /** Type: USVString */
    filename?: string;
    /** Type: unsigned long */
    lineno?: number;
    /** Type: DOMString */
    message?: string;
}

interface EventInit {
    /** Type: boolean */
    bubbles?: boolean;
    /** Type: boolean */
    cancelable?: boolean;
    /** Type: boolean */
    composed?: boolean;
}

interface EventListenerOptions {
    /** Type: boolean */
    capture?: boolean;
}

interface EventModifierInit extends UIEventInit {
    /** Type: boolean */
    altKey?: boolean;
    /** Type: boolean */
    ctrlKey?: boolean;
    /** Type: boolean */
    metaKey?: boolean;
    /** Type: boolean */
    modifierAltGraph?: boolean;
    /** Type: boolean */
    modifierCapsLock?: boolean;
    /** Type: boolean */
    modifierFn?: boolean;
    /** Type: boolean */
    modifierFnLock?: boolean;
    /** Type: boolean */
    modifierHyper?: boolean;
    /** Type: boolean */
    modifierNumLock?: boolean;
    /** Type: boolean */
    modifierScrollLock?: boolean;
    /** Type: boolean */
    modifierSuper?: boolean;
    /** Type: boolean */
    modifierSymbol?: boolean;
    /** Type: boolean */
    modifierSymbolLock?: boolean;
    /** Type: boolean */
    shiftKey?: boolean;
}

interface EventSourceInit {
    /** Type: boolean */
    withCredentials?: boolean;
}

interface FilePropertyBag extends BlobPropertyBag {
    /** Type: long long */
    lastModified?: number;
}

interface FileSystemCreateWritableOptions {
    /** Type: boolean */
    keepExistingData?: boolean;
}

interface FileSystemFlags {
    /** Type: boolean */
    create?: boolean;
    /** Type: boolean */
    exclusive?: boolean;
}

interface FileSystemGetDirectoryOptions {
    /** Type: boolean */
    create?: boolean;
}

interface FileSystemGetFileOptions {
    /** Type: boolean */
    create?: boolean;
}

interface FileSystemRemoveOptions {
    /** Type: boolean */
    recursive?: boolean;
}

interface FocusEventInit extends UIEventInit {
    /** Type: EventTarget */
    relatedTarget?: EventTarget | null;
}

interface FocusOptions {
    /** Type: boolean */
    preventScroll?: boolean;
}

interface FontFaceDescriptors {
    /** Type: CSSOMString */
    ascentOverride?: string;
    /** Type: CSSOMString */
    descentOverride?: string;
    /** Type: CSSOMString */
    display?: FontDisplay;
    /** Type: CSSOMString */
    featureSettings?: string;
    /** Type: CSSOMString */
    lineGapOverride?: string;
    /** Type: CSSOMString */
    stretch?: string;
    /** Type: CSSOMString */
    style?: string;
    /** Type: CSSOMString */
    unicodeRange?: string;
    /** Type: CSSOMString */
    weight?: string;
}

interface FontFaceSetLoadEventInit extends EventInit {
    /** Type: [object Object] */
    fontfaces?: FontFace[];
}

interface FormDataEventInit extends EventInit {
    /** Type: FormData */
    formData: FormData;
}

interface FullscreenOptions {
    /** Type: FullscreenNavigationUI */
    navigationUI?: FullscreenNavigationUI;
}

interface GainOptions extends AudioNodeOptions {
    /** Type: float */
    gain?: number;
}

interface GamepadEffectParameters {
    /** Type: unsigned long long */
    duration?: number;
    /** Type: double */
    leftTrigger?: number;
    /** Type: double */
    rightTrigger?: number;
    /** Type: unsigned long long */
    startDelay?: number;
    /** Type: double */
    strongMagnitude?: number;
    /** Type: double */
    weakMagnitude?: number;
}

interface GamepadEventInit extends EventInit {
    /** Type: Gamepad */
    gamepad: Gamepad;
}

interface GetAnimationsOptions {
    /** Type: boolean */
    subtree?: boolean;
}

interface GetHTMLOptions {
    /** Type: boolean */
    serializableShadowRoots?: boolean;
    /** Type: [object Object] */
    shadowRoots?: ShadowRoot[];
}

interface GetNotificationOptions {
    /** Type: DOMString */
    tag?: string;
}

interface GetRootNodeOptions {
    /** Type: boolean */
    composed?: boolean;
}

interface HashChangeEventInit extends EventInit {
    /** Type: USVString */
    newURL?: string;
    /** Type: USVString */
    oldURL?: string;
}

interface HkdfParams extends Algorithm {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
    /** Type: BufferSource */
    info: BufferSource;
    /** Type: BufferSource */
    salt: BufferSource;
}

interface HmacImportParams extends Algorithm {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
    /** Type: unsigned long */
    length?: number;
}

interface HmacKeyAlgorithm extends KeyAlgorithm {
    /** Type: KeyAlgorithm */
    hash: KeyAlgorithm;
    /** Type: unsigned long */
    length: number;
}

interface HmacKeyGenParams extends Algorithm {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
    /** Type: unsigned long */
    length?: number;
}

interface IDBDatabaseInfo {
    /** Type: DOMString */
    name?: string;
    /** Type: unsigned long long */
    version?: number;
}

interface IDBIndexParameters {
    /** Type: boolean */
    multiEntry?: boolean;
    /** Type: boolean */
    unique?: boolean;
}

interface IDBObjectStoreParameters {
    /** Type: boolean */
    autoIncrement?: boolean;
    /** Type: [object Object],[object Object] */
    keyPath?: string | string[] | null;
}

interface IDBTransactionOptions {
    /** Type: IDBTransactionDurability */
    durability?: IDBTransactionDurability;
}

interface IDBVersionChangeEventInit extends EventInit {
    /** Type: unsigned long long */
    newVersion?: number | null;
    /** Type: unsigned long long */
    oldVersion?: number;
}

interface IIRFilterOptions extends AudioNodeOptions {
    /** Type: [object Object] */
    feedback: number[];
    /** Type: [object Object] */
    feedforward: number[];
}

interface IdleRequestOptions {
    /** Type: unsigned long */
    timeout?: number;
}

interface ImageBitmapOptions {
    /** Type: ColorSpaceConversion */
    colorSpaceConversion?: ColorSpaceConversion;
    /** Type: ImageOrientation */
    imageOrientation?: ImageOrientation;
    /** Type: PremultiplyAlpha */
    premultiplyAlpha?: PremultiplyAlpha;
    /** Type: unsigned long */
    resizeHeight?: number;
    /** Type: ResizeQuality */
    resizeQuality?: ResizeQuality;
    /** Type: unsigned long */
    resizeWidth?: number;
}

interface ImageBitmapRenderingContextSettings {
    /** Type: boolean */
    alpha?: boolean;
}

interface ImageDataSettings {
    /** Type: PredefinedColorSpace */
    colorSpace?: PredefinedColorSpace;
}

interface ImageDecodeOptions {
    /** Type: boolean */
    completeFramesOnly?: boolean;
    /** Type: unsigned long */
    frameIndex?: number;
}

interface ImageDecodeResult {
    /** Type: boolean */
    complete: boolean;
    /** Type: VideoFrame */
    image: VideoFrame;
}

interface ImageDecoderInit {
    /** Type: ColorSpaceConversion */
    colorSpaceConversion?: ColorSpaceConversion;
    /** Type: ImageBufferSource */
    data: ImageBufferSource;
    /** Type: unsigned long */
    desiredHeight?: number;
    /** Type: unsigned long */
    desiredWidth?: number;
    /** Type: boolean */
    preferAnimation?: boolean;
    /** Type: [object Object] */
    transfer?: ArrayBuffer[];
    /** Type: DOMString */
    type: string;
}

interface ImageEncodeOptions {
    /** Type: unrestricted double */
    quality?: number;
    /** Type: DOMString */
    type?: string;
}

interface ImportNodeOptions {
    /** Type: CustomElementRegistry */
    customElementRegistry?: CustomElementRegistry;
    /** Type: boolean */
    selfOnly?: boolean;
}

interface InputEventInit extends UIEventInit {
    /** Type: DOMString */
    data?: string | null;
    /** Type: DataTransfer */
    dataTransfer?: DataTransfer | null;
    /** Type: DOMString */
    inputType?: string;
    /** Type: boolean */
    isComposing?: boolean;
    /** Type: [object Object] */
    targetRanges?: StaticRange[];
}

interface IntersectionObserverInit {
    /** Type: [object Object],[object Object] */
    root?: Element | Document | null;
    /** Type: DOMString */
    rootMargin?: string;
    /** Type: [object Object],[object Object] */
    threshold?: number | number[];
}

interface JsonWebKey {
    /** Type: DOMString */
    alg?: string;
    /** Type: DOMString */
    crv?: string;
    /** Type: DOMString */
    d?: string;
    /** Type: DOMString */
    dp?: string;
    /** Type: DOMString */
    dq?: string;
    /** Type: DOMString */
    e?: string;
    /** Type: boolean */
    ext?: boolean;
    /** Type: DOMString */
    k?: string;
    /** Type: [object Object] */
    key_ops?: string[];
    /** Type: DOMString */
    kty?: string;
    /** Type: DOMString */
    n?: string;
    /** Type: [object Object] */
    oth?: RsaOtherPrimesInfo[];
    /** Type: DOMString */
    p?: string;
    /** Type: DOMString */
    q?: string;
    /** Type: DOMString */
    qi?: string;
    /** Type: DOMString */
    use?: string;
    /** Type: DOMString */
    x?: string;
    /** Type: DOMString */
    y?: string;
}

interface KeyAlgorithm {
    /** Type: DOMString */
    name: string;
}

interface KeyboardEventInit extends EventModifierInit {
    /**
     * Type: unsigned long
     * @deprecated
     */
    charCode?: number;
    /** Type: DOMString */
    code?: string;
    /** Type: boolean */
    isComposing?: boolean;
    /** Type: DOMString */
    key?: string;
    /**
     * Type: unsigned long
     * @deprecated
     */
    keyCode?: number;
    /** Type: unsigned long */
    location?: number;
    /** Type: boolean */
    repeat?: boolean;
}

interface Keyframe {
    /** Type: CompositeOperationOrAuto */
    composite?: CompositeOperationOrAuto;
    /** Type: DOMString */
    easing?: string;
    /** Type: double */
    offset?: number | null;
    [property: string]: string | number | null | undefined;
}

interface KeyframeAnimationOptions extends KeyframeEffectOptions {
    /** Type: DOMString */
    id?: string;
    /** Type: AnimationTimeline */
    timeline?: AnimationTimeline | null;
}

interface KeyframeEffectOptions extends EffectTiming {
    /** Type: CompositeOperation */
    composite?: CompositeOperation;
    /** Type: IterationCompositeOperation */
    iterationComposite?: IterationCompositeOperation;
    /** Type: CSSOMString */
    pseudoElement?: string | null;
}

interface LockInfo {
    /** Type: DOMString */
    clientId?: string;
    /** Type: LockMode */
    mode?: LockMode;
    /** Type: DOMString */
    name?: string;
}

interface LockManagerSnapshot {
    /** Type: [object Object] */
    held?: LockInfo[];
    /** Type: [object Object] */
    pending?: LockInfo[];
}

interface LockOptions {
    /** Type: boolean */
    ifAvailable?: boolean;
    /** Type: LockMode */
    mode?: LockMode;
    /** Type: AbortSignal */
    signal?: AbortSignal;
    /** Type: boolean */
    steal?: boolean;
}

interface MIDIConnectionEventInit extends EventInit {
    /** Type: MIDIPort */
    port?: MIDIPort;
}

interface MIDIMessageEventInit extends EventInit {
    /** Type: Uint8Array */
    data?: Uint8Array<ArrayBuffer>;
}

interface MIDIOptions {
    /** Type: boolean */
    software?: boolean;
    /** Type: boolean */
    sysex?: boolean;
}

interface MediaCapabilitiesDecodingInfo extends MediaCapabilitiesInfo {
    /** Type: MediaDecodingConfiguration */
    configuration?: MediaDecodingConfiguration;
}

interface MediaCapabilitiesEncodingInfo extends MediaCapabilitiesInfo {
    /** Type: MediaEncodingConfiguration */
    configuration?: MediaEncodingConfiguration;
}

interface MediaCapabilitiesInfo {
    /** Type: boolean */
    powerEfficient: boolean;
    /** Type: boolean */
    smooth: boolean;
    /** Type: boolean */
    supported: boolean;
}

interface MediaConfiguration {
    /** Type: AudioConfiguration */
    audio?: AudioConfiguration;
    /** Type: VideoConfiguration */
    video?: VideoConfiguration;
}

interface MediaDecodingConfiguration extends MediaConfiguration {
    /** Type: MediaDecodingType */
    type: MediaDecodingType;
}

interface MediaElementAudioSourceOptions {
    /** Type: HTMLMediaElement */
    mediaElement: HTMLMediaElement;
}

interface MediaEncodingConfiguration extends MediaConfiguration {
    /** Type: MediaEncodingType */
    type: MediaEncodingType;
}

interface MediaEncryptedEventInit extends EventInit {
    /** Type: ArrayBuffer */
    initData?: ArrayBuffer | null;
    /** Type: DOMString */
    initDataType?: string;
}

interface MediaImage {
    /** Type: DOMString */
    sizes?: string;
    /** Type: USVString */
    src: string;
    /** Type: DOMString */
    type?: string;
}

interface MediaKeyMessageEventInit extends EventInit {
    /** Type: ArrayBuffer */
    message: ArrayBuffer;
    /** Type: MediaKeyMessageType */
    messageType: MediaKeyMessageType;
}

interface MediaKeySystemConfiguration {
    /** Type: [object Object] */
    audioCapabilities?: MediaKeySystemMediaCapability[];
    /** Type: MediaKeysRequirement */
    distinctiveIdentifier?: MediaKeysRequirement;
    /** Type: [object Object] */
    initDataTypes?: string[];
    /** Type: DOMString */
    label?: string;
    /** Type: MediaKeysRequirement */
    persistentState?: MediaKeysRequirement;
    /** Type: [object Object] */
    sessionTypes?: string[];
    /** Type: [object Object] */
    videoCapabilities?: MediaKeySystemMediaCapability[];
}

interface MediaKeySystemMediaCapability {
    /** Type: DOMString */
    contentType?: string;
    /** Type: DOMString */
    encryptionScheme?: string | null;
    /** Type: DOMString */
    robustness?: string;
}

interface MediaKeysPolicy {
    /** Type: DOMString */
    minHdcpVersion?: string;
}

interface MediaMetadataInit {
    /** Type: DOMString */
    album?: string;
    /** Type: DOMString */
    artist?: string;
    /** Type: [object Object] */
    artwork?: MediaImage[];
    /** Type: DOMString */
    title?: string;
}

interface MediaPositionState {
    /** Type: unrestricted double */
    duration?: number;
    /** Type: double */
    playbackRate?: number;
    /** Type: double */
    position?: number;
}

interface MediaQueryListEventInit extends EventInit {
    /** Type: boolean */
    matches?: boolean;
    /** Type: CSSOMString */
    media?: string;
}

interface MediaRecorderOptions {
    /** Type: unsigned long */
    audioBitsPerSecond?: number;
    /** Type: unsigned long */
    bitsPerSecond?: number;
    /** Type: DOMString */
    mimeType?: string;
    /** Type: unsigned long */
    videoBitsPerSecond?: number;
}

interface MediaSessionActionDetails {
    /** Type: MediaSessionAction */
    action: MediaSessionAction;
    /** Type: boolean */
    fastSeek?: boolean;
    /** Type: double */
    seekOffset?: number;
    /** Type: double */
    seekTime?: number;
}

interface MediaSettingsRange {
    /** Type: double */
    max?: number;
    /** Type: double */
    min?: number;
    /** Type: double */
    step?: number;
}

interface MediaStreamAudioSourceOptions {
    /** Type: MediaStream */
    mediaStream: MediaStream;
}

interface MediaStreamConstraints {
    /** Type: [object Object],[object Object] */
    audio?: boolean | MediaTrackConstraints;
    /** Type: DOMString */
    peerIdentity?: string;
    /** Type: boolean */
    preferCurrentTab?: boolean;
    /** Type: [object Object],[object Object] */
    video?: boolean | MediaTrackConstraints;
}

interface MediaStreamTrackEventInit extends EventInit {
    /** Type: MediaStreamTrack */
    track: MediaStreamTrack;
}

interface MediaTrackCapabilities {
    /** Type: DoubleRange */
    aspectRatio?: DoubleRange;
    /** Type: [object Object] */
    autoGainControl?: boolean[];
    /** Type: [object Object] */
    backgroundBlur?: boolean[];
    /** Type: ULongRange */
    channelCount?: ULongRange;
    /** Type: DOMString */
    deviceId?: string;
    /** Type: DOMString */
    displaySurface?: string;
    /** Type: [object Object] */
    echoCancellation?: boolean[];
    /** Type: [object Object] */
    facingMode?: string[];
    /** Type: DoubleRange */
    frameRate?: DoubleRange;
    /** Type: DOMString */
    groupId?: string;
    /** Type: ULongRange */
    height?: ULongRange;
    /** Type: [object Object] */
    noiseSuppression?: boolean[];
    /** Type: ULongRange */
    sampleRate?: ULongRange;
    /** Type: ULongRange */
    sampleSize?: ULongRange;
    /** Type: ULongRange */
    width?: ULongRange;
}

interface MediaTrackConstraintSet {
    /** Type: ConstrainDouble */
    aspectRatio?: ConstrainDouble;
    /** Type: ConstrainBoolean */
    autoGainControl?: ConstrainBoolean;
    /** Type: ConstrainBoolean */
    backgroundBlur?: ConstrainBoolean;
    /** Type: ConstrainULong */
    channelCount?: ConstrainULong;
    /** Type: ConstrainDOMString */
    deviceId?: ConstrainDOMString;
    /** Type: ConstrainDOMString */
    displaySurface?: ConstrainDOMString;
    /** Type: ConstrainBoolean */
    echoCancellation?: ConstrainBoolean;
    /** Type: ConstrainDOMString */
    facingMode?: ConstrainDOMString;
    /** Type: ConstrainDouble */
    frameRate?: ConstrainDouble;
    /** Type: ConstrainDOMString */
    groupId?: ConstrainDOMString;
    /** Type: ConstrainULong */
    height?: ConstrainULong;
    /** Type: ConstrainBoolean */
    noiseSuppression?: ConstrainBoolean;
    /** Type: ConstrainULong */
    sampleRate?: ConstrainULong;
    /** Type: ConstrainULong */
    sampleSize?: ConstrainULong;
    /** Type: ConstrainULong */
    width?: ConstrainULong;
}

interface MediaTrackConstraints extends MediaTrackConstraintSet {
    /** Type: [object Object] */
    advanced?: MediaTrackConstraintSet[];
}

interface MediaTrackSettings {
    /** Type: double */
    aspectRatio?: number;
    /** Type: boolean */
    autoGainControl?: boolean;
    /** Type: boolean */
    backgroundBlur?: boolean;
    /** Type: unsigned long */
    channelCount?: number;
    /** Type: DOMString */
    deviceId?: string;
    /** Type: DOMString */
    displaySurface?: string;
    /** Type: boolean */
    echoCancellation?: boolean;
    /** Type: DOMString */
    facingMode?: string;
    /** Type: double */
    frameRate?: number;
    /** Type: DOMString */
    groupId?: string;
    /** Type: unsigned long */
    height?: number;
    /** Type: boolean */
    noiseSuppression?: boolean;
    /** Type: unsigned long */
    sampleRate?: number;
    /** Type: unsigned long */
    sampleSize?: number;
    /** Type: boolean */
    torch?: boolean;
    /** Type: DOMString */
    whiteBalanceMode?: string;
    /** Type: unsigned long */
    width?: number;
    /** Type: double */
    zoom?: number;
}

interface MediaTrackSupportedConstraints {
    /** Type: boolean */
    aspectRatio?: boolean;
    /** Type: boolean */
    autoGainControl?: boolean;
    /** Type: boolean */
    backgroundBlur?: boolean;
    /** Type: boolean */
    channelCount?: boolean;
    /** Type: boolean */
    deviceId?: boolean;
    /** Type: boolean */
    displaySurface?: boolean;
    /** Type: boolean */
    echoCancellation?: boolean;
    /** Type: boolean */
    facingMode?: boolean;
    /** Type: boolean */
    frameRate?: boolean;
    /** Type: boolean */
    groupId?: boolean;
    /** Type: boolean */
    height?: boolean;
    /** Type: boolean */
    noiseSuppression?: boolean;
    /** Type: boolean */
    sampleRate?: boolean;
    /** Type: boolean */
    sampleSize?: boolean;
    /** Type: boolean */
    width?: boolean;
}

interface MessageEventInit<T = any> extends EventInit {
    /** Type: any */
    data?: T;
    /** Type: DOMString */
    lastEventId?: string;
    /** Type: USVString */
    origin?: string;
    /** Type: [object Object] */
    ports?: MessagePort[];
    /** Type: MessageEventSource */
    source?: MessageEventSource | null;
}

interface MouseEventInit extends EventModifierInit {
    /** Type: short */
    button?: number;
    /** Type: unsigned short */
    buttons?: number;
    /** Type: long */
    clientX?: number;
    /** Type: long */
    clientY?: number;
    /** Type: double */
    movementX?: number;
    /** Type: double */
    movementY?: number;
    /** Type: EventTarget */
    relatedTarget?: EventTarget | null;
    /** Type: long */
    screenX?: number;
    /** Type: long */
    screenY?: number;
}

interface MultiCacheQueryOptions extends CacheQueryOptions {
    /** Type: DOMString */
    cacheName?: string;
}

interface MutationObserverInit {
    /** Type: [object Object] */
    attributeFilter?: string[];
    /** Type: boolean */
    attributeOldValue?: boolean;
    /** Type: boolean */
    attributes?: boolean;
    /** Type: boolean */
    characterData?: boolean;
    /** Type: boolean */
    characterDataOldValue?: boolean;
    /** Type: boolean */
    childList?: boolean;
    /** Type: boolean */
    subtree?: boolean;
}

interface NavigationPreloadState {
    /** Type: boolean */
    enabled?: boolean;
    /** Type: ByteString */
    headerValue?: string;
}

interface NotificationOptions {
    /** Type: USVString */
    badge?: string;
    /** Type: DOMString */
    body?: string;
    /** Type: any */
    data?: any;
    /** Type: NotificationDirection */
    dir?: NotificationDirection;
    /** Type: USVString */
    icon?: string;
    /** Type: DOMString */
    lang?: string;
    /** Type: boolean */
    requireInteraction?: boolean;
    /** Type: boolean */
    silent?: boolean | null;
    /** Type: DOMString */
    tag?: string;
}

interface OfflineAudioCompletionEventInit extends EventInit {
    /** Type: AudioBuffer */
    renderedBuffer: AudioBuffer;
}

interface OfflineAudioContextOptions {
    /** Type: unsigned long */
    length: number;
    /** Type: unsigned long */
    numberOfChannels?: number;
    /** Type: float */
    sampleRate: number;
}

interface OptionalEffectTiming {
    /** Type: double */
    delay?: number;
    /** Type: PlaybackDirection */
    direction?: PlaybackDirection;
    /** Type: [object Object],[object Object] */
    duration?: number | string;
    /** Type: DOMString */
    easing?: string;
    /** Type: double */
    endDelay?: number;
    /** Type: FillMode */
    fill?: FillMode;
    /** Type: double */
    iterationStart?: number;
    /** Type: unrestricted double */
    iterations?: number;
    /** Type: double */
    playbackRate?: number;
}

interface OpusEncoderConfig {
    /** Type: unsigned long */
    complexity?: number;
    /** Type: OpusBitstreamFormat */
    format?: OpusBitstreamFormat;
    /** Type: unsigned long long */
    frameDuration?: number;
    /** Type: unsigned long */
    packetlossperc?: number;
    /** Type: boolean */
    usedtx?: boolean;
    /** Type: boolean */
    useinbandfec?: boolean;
}

interface OscillatorOptions extends AudioNodeOptions {
    /** Type: float */
    detune?: number;
    /** Type: float */
    frequency?: number;
    /** Type: PeriodicWave */
    periodicWave?: PeriodicWave;
    /** Type: OscillatorType */
    type?: OscillatorType;
}

interface PageRevealEventInit extends EventInit {
    /** Type: ViewTransition */
    viewTransition?: ViewTransition | null;
}

interface PageSwapEventInit extends EventInit {
    /** Type: NavigationActivation */
    activation?: NavigationActivation | null;
    /** Type: ViewTransition */
    viewTransition?: ViewTransition | null;
}

interface PageTransitionEventInit extends EventInit {
    /** Type: boolean */
    persisted?: boolean;
}

interface PannerOptions extends AudioNodeOptions {
    /** Type: double */
    coneInnerAngle?: number;
    /** Type: double */
    coneOuterAngle?: number;
    /** Type: double */
    coneOuterGain?: number;
    /** Type: DistanceModelType */
    distanceModel?: DistanceModelType;
    /** Type: double */
    maxDistance?: number;
    /** Type: float */
    orientationX?: number;
    /** Type: float */
    orientationY?: number;
    /** Type: float */
    orientationZ?: number;
    /** Type: PanningModelType */
    panningModel?: PanningModelType;
    /** Type: float */
    positionX?: number;
    /** Type: float */
    positionY?: number;
    /** Type: float */
    positionZ?: number;
    /** Type: double */
    refDistance?: number;
    /** Type: double */
    rolloffFactor?: number;
}

interface PayerErrors {
    /** Type: DOMString */
    email?: string;
    /** Type: DOMString */
    name?: string;
    /** Type: DOMString */
    phone?: string;
}

interface PaymentCurrencyAmount {
    /** Type: DOMString */
    currency: string;
    /** Type: DOMString */
    value: string;
}

interface PaymentDetailsBase {
    /** Type: [object Object] */
    displayItems?: PaymentItem[];
    /** Type: [object Object] */
    modifiers?: PaymentDetailsModifier[];
    /** Type: [object Object] */
    shippingOptions?: PaymentShippingOption[];
}

interface PaymentDetailsInit extends PaymentDetailsBase {
    /** Type: DOMString */
    id?: string;
    /** Type: PaymentItem */
    total: PaymentItem;
}

interface PaymentDetailsModifier {
    /** Type: [object Object] */
    additionalDisplayItems?: PaymentItem[];
    /** Type: object */
    data?: any;
    /** Type: DOMString */
    supportedMethods: string;
    /** Type: PaymentItem */
    total?: PaymentItem;
}

interface PaymentDetailsUpdate extends PaymentDetailsBase {
    /** Type: DOMString */
    error?: string;
    /** Type: object */
    paymentMethodErrors?: any;
    /** Type: AddressErrors */
    shippingAddressErrors?: AddressErrors;
    /** Type: PaymentItem */
    total?: PaymentItem;
}

interface PaymentItem {
    /** Type: PaymentCurrencyAmount */
    amount: PaymentCurrencyAmount;
    /** Type: DOMString */
    label: string;
    /** Type: boolean */
    pending?: boolean;
}

interface PaymentMethodChangeEventInit extends PaymentRequestUpdateEventInit {
    /** Type: object */
    methodDetails?: any;
    /** Type: DOMString */
    methodName?: string;
}

interface PaymentMethodData {
    /** Type: object */
    data?: any;
    /** Type: DOMString */
    supportedMethods: string;
}

interface PaymentOptions {
    /** Type: boolean */
    requestPayerEmail?: boolean;
    /** Type: boolean */
    requestPayerName?: boolean;
    /** Type: boolean */
    requestPayerPhone?: boolean;
    /** Type: boolean */
    requestShipping?: boolean;
    /** Type: PaymentShippingType */
    shippingType?: PaymentShippingType;
}

interface PaymentRequestUpdateEventInit extends EventInit {
}

interface PaymentShippingOption {
    /** Type: PaymentCurrencyAmount */
    amount: PaymentCurrencyAmount;
    /** Type: DOMString */
    id: string;
    /** Type: DOMString */
    label: string;
    /** Type: boolean */
    selected?: boolean;
}

interface PaymentValidationErrors {
    /** Type: DOMString */
    error?: string;
    /** Type: PayerErrors */
    payer?: PayerErrors;
    /** Type: AddressErrors */
    shippingAddress?: AddressErrors;
}

interface Pbkdf2Params extends Algorithm {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
    /** Type: unsigned long */
    iterations: number;
    /** Type: BufferSource */
    salt: BufferSource;
}

interface PerformanceMarkOptions {
    /** Type: any */
    detail?: any;
    /** Type: DOMHighResTimeStamp */
    startTime?: DOMHighResTimeStamp;
}

interface PerformanceMeasureOptions {
    /** Type: any */
    detail?: any;
    /** Type: DOMHighResTimeStamp */
    duration?: DOMHighResTimeStamp;
    /** Type: [object Object],[object Object] */
    end?: string | DOMHighResTimeStamp;
    /** Type: [object Object],[object Object] */
    start?: string | DOMHighResTimeStamp;
}

interface PerformanceObserverInit {
    /** Type: boolean */
    buffered?: boolean;
    /** Type: [object Object] */
    entryTypes?: string[];
    /** Type: DOMString */
    type?: string;
}

interface PeriodicWaveConstraints {
    /** Type: boolean */
    disableNormalization?: boolean;
}

interface PeriodicWaveOptions extends PeriodicWaveConstraints {
    /** Type: [object Object] */
    imag?: number[] | Float32Array;
    /** Type: [object Object] */
    real?: number[] | Float32Array;
}

interface PermissionDescriptor {
    /** Type: DOMString */
    name: PermissionName;
}

interface PhotoCapabilities {
    /** Type: [object Object] */
    fillLightMode?: FillLightMode[];
    /** Type: MediaSettingsRange */
    imageHeight?: MediaSettingsRange;
    /** Type: MediaSettingsRange */
    imageWidth?: MediaSettingsRange;
    /** Type: RedEyeReduction */
    redEyeReduction?: RedEyeReduction;
}

interface PhotoSettings {
    /** Type: FillLightMode */
    fillLightMode?: FillLightMode;
    /** Type: double */
    imageHeight?: number;
    /** Type: double */
    imageWidth?: number;
    /** Type: boolean */
    redEyeReduction?: boolean;
}

interface PictureInPictureEventInit extends EventInit {
    /** Type: PictureInPictureWindow */
    pictureInPictureWindow: PictureInPictureWindow;
}

interface PlaneLayout {
    /** Type: unsigned long */
    offset: number;
    /** Type: unsigned long */
    stride: number;
}

interface PointerEventInit extends MouseEventInit {
    /** Type: double */
    altitudeAngle?: number;
    /** Type: double */
    azimuthAngle?: number;
    /** Type: [object Object] */
    coalescedEvents?: PointerEvent[];
    /** Type: double */
    height?: number;
    /** Type: boolean */
    isPrimary?: boolean;
    /** Type: long */
    pointerId?: number;
    /** Type: DOMString */
    pointerType?: string;
    /** Type: [object Object] */
    predictedEvents?: PointerEvent[];
    /** Type: float */
    pressure?: number;
    /** Type: float */
    tangentialPressure?: number;
    /** Type: long */
    tiltX?: number;
    /** Type: long */
    tiltY?: number;
    /** Type: long */
    twist?: number;
    /** Type: double */
    width?: number;
}

interface PointerLockOptions {
    /** Type: boolean */
    unadjustedMovement?: boolean;
}

interface PopStateEventInit extends EventInit {
    /** Type: any */
    state?: any;
}

interface PositionOptions {
    /** Type: boolean */
    enableHighAccuracy?: boolean;
    /** Type: unsigned long */
    maximumAge?: number;
    /** Type: unsigned long */
    timeout?: number;
}

interface ProgressEventInit extends EventInit {
    /** Type: boolean */
    lengthComputable?: boolean;
    /** Type: double */
    loaded?: number;
    /** Type: double */
    total?: number;
}

interface PromiseRejectionEventInit extends EventInit {
    /** Type: object */
    promise: Promise<any>;
    /** Type: any */
    reason?: any;
}

interface PropertyDefinition {
    /** Type: boolean */
    inherits: boolean;
    /** Type: DOMString */
    initialValue?: string;
    /** Type: DOMString */
    name: string;
    /** Type: DOMString */
    syntax?: string;
}

interface PropertyIndexedKeyframes {
    /** Type: [object Object],[object Object] */
    composite?: CompositeOperationOrAuto | CompositeOperationOrAuto[];
    /** Type: [object Object],[object Object] */
    easing?: string | string[];
    /** Type: [object Object],[object Object] */
    offset?: number | (number | null)[];
    [property: string]: string | string[] | number | null | (number | null)[] | undefined;
}

interface PublicKeyCredentialCreationOptions {
    /** Type: DOMString */
    attestation?: AttestationConveyancePreference;
    /** Type: AuthenticatorSelectionCriteria */
    authenticatorSelection?: AuthenticatorSelectionCriteria;
    /** Type: BufferSource */
    challenge: BufferSource;
    /** Type: [object Object] */
    excludeCredentials?: PublicKeyCredentialDescriptor[];
    /** Type: AuthenticationExtensionsClientInputs */
    extensions?: AuthenticationExtensionsClientInputs;
    /** Type: [object Object] */
    pubKeyCredParams: PublicKeyCredentialParameters[];
    /** Type: PublicKeyCredentialRpEntity */
    rp: PublicKeyCredentialRpEntity;
    /** Type: unsigned long */
    timeout?: number;
    /** Type: PublicKeyCredentialUserEntity */
    user: PublicKeyCredentialUserEntity;
}

interface PublicKeyCredentialCreationOptionsJSON {
    /** Type: DOMString */
    attestation?: string;
    /** Type: AuthenticatorSelectionCriteria */
    authenticatorSelection?: AuthenticatorSelectionCriteria;
    /** Type: Base64URLString */
    challenge: Base64URLString;
    /** Type: [object Object] */
    excludeCredentials?: PublicKeyCredentialDescriptorJSON[];
    /** Type: AuthenticationExtensionsClientInputsJSON */
    extensions?: AuthenticationExtensionsClientInputsJSON;
    /** Type: [object Object] */
    hints?: string[];
    /** Type: [object Object] */
    pubKeyCredParams: PublicKeyCredentialParameters[];
    /** Type: PublicKeyCredentialRpEntity */
    rp: PublicKeyCredentialRpEntity;
    /** Type: unsigned long */
    timeout?: number;
    /** Type: PublicKeyCredentialUserEntityJSON */
    user: PublicKeyCredentialUserEntityJSON;
}

interface PublicKeyCredentialDescriptor {
    /** Type: BufferSource */
    id: BufferSource;
    /** Type: [object Object] */
    transports?: AuthenticatorTransport[];
    /** Type: DOMString */
    type: PublicKeyCredentialType;
}

interface PublicKeyCredentialDescriptorJSON {
    /** Type: Base64URLString */
    id: Base64URLString;
    /** Type: [object Object] */
    transports?: string[];
    /** Type: DOMString */
    type: string;
}

interface PublicKeyCredentialEntity {
    /** Type: DOMString */
    name: string;
}

interface PublicKeyCredentialParameters {
    /** Type: COSEAlgorithmIdentifier */
    alg: COSEAlgorithmIdentifier;
    /** Type: DOMString */
    type: PublicKeyCredentialType;
}

interface PublicKeyCredentialRequestOptions {
    /** Type: [object Object] */
    allowCredentials?: PublicKeyCredentialDescriptor[];
    /** Type: BufferSource */
    challenge: BufferSource;
    /** Type: AuthenticationExtensionsClientInputs */
    extensions?: AuthenticationExtensionsClientInputs;
    /** Type: DOMString */
    rpId?: string;
    /** Type: unsigned long */
    timeout?: number;
    /** Type: DOMString */
    userVerification?: UserVerificationRequirement;
}

interface PublicKeyCredentialRequestOptionsJSON {
    /** Type: [object Object] */
    allowCredentials?: PublicKeyCredentialDescriptorJSON[];
    /** Type: Base64URLString */
    challenge: Base64URLString;
    /** Type: AuthenticationExtensionsClientInputsJSON */
    extensions?: AuthenticationExtensionsClientInputsJSON;
    /** Type: [object Object] */
    hints?: string[];
    /** Type: DOMString */
    rpId?: string;
    /** Type: unsigned long */
    timeout?: number;
    /** Type: DOMString */
    userVerification?: string;
}

interface PublicKeyCredentialRpEntity extends PublicKeyCredentialEntity {
    /** Type: DOMString */
    id?: string;
}

interface PublicKeyCredentialUserEntity extends PublicKeyCredentialEntity {
    /** Type: DOMString */
    displayName: string;
    /** Type: BufferSource */
    id: BufferSource;
}

interface PublicKeyCredentialUserEntityJSON {
    /** Type: DOMString */
    displayName: string;
    /** Type: Base64URLString */
    id: Base64URLString;
    /** Type: DOMString */
    name: string;
}

interface PushSubscriptionJSON {
    /** Type: USVString */
    endpoint?: string;
    /** Type: EpochTimeStamp */
    expirationTime?: EpochTimeStamp | null;
    /** Type: [object Object],[object Object] */
    keys?: Record<string, string>;
}

interface PushSubscriptionOptionsInit {
    /** Type: [object Object],[object Object] */
    applicationServerKey?: BufferSource | string | null;
    /** Type: boolean */
    userVisibleOnly?: boolean;
}

interface QueuingStrategy<T = any> {
    /** Type: unrestricted double */
    highWaterMark?: number;
    /** Type: QueuingStrategySize */
    size?: QueuingStrategySize<T>;
}

interface QueuingStrategyInit {
    /** Type: unrestricted double */
    highWaterMark: number;
}

interface RTCAnswerOptions extends RTCOfferAnswerOptions {
}

interface RTCCertificateExpiration {
    /** Type: unsigned long long */
    expires?: number;
}

interface RTCConfiguration {
    /** Type: RTCBundlePolicy */
    bundlePolicy?: RTCBundlePolicy;
    /** Type: [object Object] */
    certificates?: RTCCertificate[];
    /** Type: octet */
    iceCandidatePoolSize?: number;
    /** Type: [object Object] */
    iceServers?: RTCIceServer[];
    /** Type: RTCIceTransportPolicy */
    iceTransportPolicy?: RTCIceTransportPolicy;
    /** Type: RTCRtcpMuxPolicy */
    rtcpMuxPolicy?: RTCRtcpMuxPolicy;
}

interface RTCDTMFToneChangeEventInit extends EventInit {
    /** Type: DOMString */
    tone?: string;
}

interface RTCDataChannelEventInit extends EventInit {
    /** Type: RTCDataChannel */
    channel: RTCDataChannel;
}

interface RTCDataChannelInit {
    /** Type: unsigned short */
    id?: number;
    /** Type: unsigned short */
    maxPacketLifeTime?: number;
    /** Type: unsigned short */
    maxRetransmits?: number;
    /** Type: boolean */
    negotiated?: boolean;
    /** Type: boolean */
    ordered?: boolean;
    /** Type: USVString */
    protocol?: string;
}

interface RTCDtlsFingerprint {
    /** Type: DOMString */
    algorithm?: string;
    /** Type: DOMString */
    value?: string;
}

interface RTCEncodedAudioFrameMetadata {
    /** Type: [object Object] */
    contributingSources?: number[];
    /** Type: octet */
    payloadType?: number;
    /** Type: short */
    sequenceNumber?: number;
    /** Type: unsigned long */
    synchronizationSource?: number;
}

interface RTCEncodedVideoFrameMetadata {
    /** Type: [object Object] */
    contributingSources?: number[];
    /** Type: [object Object] */
    dependencies?: number[];
    /** Type: unsigned long long */
    frameId?: number;
    /** Type: unsigned short */
    height?: number;
    /** Type: octet */
    payloadType?: number;
    /** Type: unsigned long */
    spatialIndex?: number;
    /** Type: unsigned long */
    synchronizationSource?: number;
    /** Type: unsigned long */
    temporalIndex?: number;
    /** Type: long long */
    timestamp?: number;
    /** Type: unsigned short */
    width?: number;
}

interface RTCErrorEventInit extends EventInit {
    /** Type: RTCError */
    error: RTCError;
}

interface RTCErrorInit {
    /** Type: RTCErrorDetailType */
    errorDetail: RTCErrorDetailType;
    /** Type: long */
    httpRequestStatusCode?: number;
    /** Type: unsigned long */
    receivedAlert?: number;
    /** Type: long */
    sctpCauseCode?: number;
    /** Type: long */
    sdpLineNumber?: number;
    /** Type: unsigned long */
    sentAlert?: number;
}

interface RTCIceCandidateInit {
    /** Type: DOMString */
    candidate?: string;
    /** Type: unsigned short */
    sdpMLineIndex?: number | null;
    /** Type: DOMString */
    sdpMid?: string | null;
    /** Type: DOMString */
    usernameFragment?: string | null;
}

interface RTCIceCandidatePairStats extends RTCStats {
    /** Type: double */
    availableIncomingBitrate?: number;
    /** Type: double */
    availableOutgoingBitrate?: number;
    /** Type: unsigned long long */
    bytesDiscardedOnSend?: number;
    /** Type: unsigned long long */
    bytesReceived?: number;
    /** Type: unsigned long long */
    bytesSent?: number;
    /** Type: unsigned long long */
    consentRequestsSent?: number;
    /** Type: double */
    currentRoundTripTime?: number;
    /** Type: DOMHighResTimeStamp */
    lastPacketReceivedTimestamp?: DOMHighResTimeStamp;
    /** Type: DOMHighResTimeStamp */
    lastPacketSentTimestamp?: DOMHighResTimeStamp;
    /** Type: DOMString */
    localCandidateId: string;
    /** Type: boolean */
    nominated?: boolean;
    /** Type: unsigned long */
    packetsDiscardedOnSend?: number;
    /** Type: unsigned long long */
    packetsReceived?: number;
    /** Type: unsigned long long */
    packetsSent?: number;
    /** Type: DOMString */
    remoteCandidateId: string;
    /** Type: unsigned long long */
    requestsReceived?: number;
    /** Type: unsigned long long */
    requestsSent?: number;
    /** Type: unsigned long long */
    responsesReceived?: number;
    /** Type: unsigned long long */
    responsesSent?: number;
    /** Type: RTCStatsIceCandidatePairState */
    state: RTCStatsIceCandidatePairState;
    /** Type: double */
    totalRoundTripTime?: number;
    /** Type: DOMString */
    transportId: string;
}

interface RTCIceServer {
    /** Type: DOMString */
    credential?: string;
    /** Type: [object Object],[object Object] */
    urls: string | string[];
    /** Type: DOMString */
    username?: string;
}

interface RTCInboundRtpStreamStats extends RTCReceivedRtpStreamStats {
    /** Type: double */
    audioLevel?: number;
    /** Type: unsigned long long */
    bytesReceived?: number;
    /** Type: unsigned long long */
    concealedSamples?: number;
    /** Type: unsigned long long */
    concealmentEvents?: number;
    /** Type: DOMString */
    decoderImplementation?: string;
    /** Type: DOMHighResTimeStamp */
    estimatedPlayoutTimestamp?: DOMHighResTimeStamp;
    /** Type: unsigned long long */
    fecBytesReceived?: number;
    /** Type: unsigned long long */
    fecPacketsDiscarded?: number;
    /** Type: unsigned long long */
    fecPacketsReceived?: number;
    /** Type: unsigned long */
    fecSsrc?: number;
    /** Type: unsigned long */
    firCount?: number;
    /** Type: unsigned long */
    frameHeight?: number;
    /** Type: unsigned long */
    frameWidth?: number;
    /** Type: unsigned long */
    framesAssembledFromMultiplePackets?: number;
    /** Type: unsigned long */
    framesDecoded?: number;
    /** Type: unsigned long */
    framesDropped?: number;
    /** Type: double */
    framesPerSecond?: number;
    /** Type: unsigned long */
    framesReceived?: number;
    /** Type: unsigned long */
    framesRendered?: number;
    /** Type: unsigned long */
    freezeCount?: number;
    /** Type: unsigned long long */
    headerBytesReceived?: number;
    /** Type: unsigned long long */
    insertedSamplesForDeceleration?: number;
    /** Type: double */
    jitterBufferDelay?: number;
    /** Type: unsigned long long */
    jitterBufferEmittedCount?: number;
    /** Type: double */
    jitterBufferMinimumDelay?: number;
    /** Type: double */
    jitterBufferTargetDelay?: number;
    /** Type: unsigned long */
    keyFramesDecoded?: number;
    /** Type: DOMHighResTimeStamp */
    lastPacketReceivedTimestamp?: DOMHighResTimeStamp;
    /** Type: DOMString */
    mid?: string;
    /** Type: unsigned long */
    nackCount?: number;
    /** Type: unsigned long long */
    packetsDiscarded?: number;
    /** Type: unsigned long */
    pauseCount?: number;
    /** Type: DOMString */
    playoutId?: string;
    /** Type: unsigned long */
    pliCount?: number;
    /** Type: unsigned long long */
    qpSum?: number;
    /** Type: DOMString */
    remoteId?: string;
    /** Type: unsigned long long */
    removedSamplesForAcceleration?: number;
    /** Type: unsigned long long */
    retransmittedBytesReceived?: number;
    /** Type: unsigned long long */
    retransmittedPacketsReceived?: number;
    /** Type: unsigned long */
    rtxSsrc?: number;
    /** Type: unsigned long long */
    silentConcealedSamples?: number;
    /** Type: double */
    totalAssemblyTime?: number;
    /** Type: double */
    totalAudioEnergy?: number;
    /** Type: double */
    totalDecodeTime?: number;
    /** Type: double */
    totalFreezesDuration?: number;
    /** Type: double */
    totalInterFrameDelay?: number;
    /** Type: double */
    totalPausesDuration?: number;
    /** Type: double */
    totalProcessingDelay?: number;
    /** Type: double */
    totalSamplesDuration?: number;
    /** Type: unsigned long long */
    totalSamplesReceived?: number;
    /** Type: double */
    totalSquaredInterFrameDelay?: number;
    /** Type: DOMString */
    trackIdentifier: string;
}

interface RTCLocalIceCandidateInit extends RTCIceCandidateInit {
}

interface RTCLocalSessionDescriptionInit {
    /** Type: DOMString */
    sdp?: string;
    /** Type: RTCSdpType */
    type?: RTCSdpType;
}

interface RTCOfferAnswerOptions {
}

interface RTCOfferOptions extends RTCOfferAnswerOptions {
    /** Type: boolean */
    iceRestart?: boolean;
    /** Type: boolean */
    offerToReceiveAudio?: boolean;
    /** Type: boolean */
    offerToReceiveVideo?: boolean;
}

interface RTCOutboundRtpStreamStats extends RTCSentRtpStreamStats {
    /** Type: boolean */
    active?: boolean;
    /** Type: unsigned long */
    firCount?: number;
    /** Type: unsigned long */
    frameHeight?: number;
    /** Type: unsigned long */
    frameWidth?: number;
    /** Type: unsigned long */
    framesEncoded?: number;
    /** Type: double */
    framesPerSecond?: number;
    /** Type: unsigned long */
    framesSent?: number;
    /** Type: unsigned long long */
    headerBytesSent?: number;
    /** Type: unsigned long */
    hugeFramesSent?: number;
    /** Type: unsigned long */
    keyFramesEncoded?: number;
    /** Type: DOMString */
    mediaSourceId?: string;
    /** Type: DOMString */
    mid?: string;
    /** Type: unsigned long */
    nackCount?: number;
    /** Type: unsigned long */
    pliCount?: number;
    /** Type: unsigned long long */
    qpSum?: number;
    /** Type: [object Object],[object Object] */
    qualityLimitationDurations?: Record<string, number>;
    /** Type: RTCQualityLimitationReason */
    qualityLimitationReason?: RTCQualityLimitationReason;
    /** Type: unsigned long */
    qualityLimitationResolutionChanges?: number;
    /** Type: DOMString */
    remoteId?: string;
    /** Type: unsigned long long */
    retransmittedBytesSent?: number;
    /** Type: unsigned long long */
    retransmittedPacketsSent?: number;
    /** Type: DOMString */
    rid?: string;
    /** Type: unsigned long */
    rtxSsrc?: number;
    /** Type: DOMString */
    scalabilityMode?: string;
    /** Type: double */
    targetBitrate?: number;
    /** Type: double */
    totalEncodeTime?: number;
    /** Type: unsigned long long */
    totalEncodedBytesTarget?: number;
    /** Type: double */
    totalPacketSendDelay?: number;
}

interface RTCPeerConnectionIceErrorEventInit extends EventInit {
    /** Type: DOMString */
    address?: string | null;
    /** Type: unsigned short */
    errorCode: number;
    /** Type: USVString */
    errorText?: string;
    /** Type: unsigned short */
    port?: number | null;
    /** Type: USVString */
    url?: string;
}

interface RTCPeerConnectionIceEventInit extends EventInit {
    /** Type: RTCIceCandidate */
    candidate?: RTCIceCandidate | null;
}

interface RTCReceivedRtpStreamStats extends RTCRtpStreamStats {
    /** Type: double */
    jitter?: number;
    /** Type: long long */
    packetsLost?: number;
    /** Type: unsigned long long */
    packetsReceived?: number;
}

interface RTCRtcpParameters {
    /** Type: DOMString */
    cname?: string;
    /** Type: boolean */
    reducedSize?: boolean;
}

interface RTCRtpCapabilities {
    /** Type: [object Object] */
    codecs: RTCRtpCodec[];
    /** Type: [object Object] */
    headerExtensions: RTCRtpHeaderExtensionCapability[];
}

interface RTCRtpCodec {
    /** Type: unsigned short */
    channels?: number;
    /** Type: unsigned long */
    clockRate: number;
    /** Type: DOMString */
    mimeType: string;
    /** Type: DOMString */
    sdpFmtpLine?: string;
}

interface RTCRtpCodecParameters extends RTCRtpCodec {
    /** Type: octet */
    payloadType: number;
}

interface RTCRtpCodingParameters {
    /** Type: DOMString */
    rid?: string;
}

interface RTCRtpContributingSource {
    /** Type: double */
    audioLevel?: number;
    /** Type: unsigned long */
    rtpTimestamp: number;
    /** Type: unsigned long */
    source: number;
    /** Type: DOMHighResTimeStamp */
    timestamp: DOMHighResTimeStamp;
}

interface RTCRtpEncodingParameters extends RTCRtpCodingParameters {
    /** Type: boolean */
    active?: boolean;
    /** Type: unsigned long */
    maxBitrate?: number;
    /** Type: double */
    maxFramerate?: number;
    /** Type: RTCPriorityType */
    networkPriority?: RTCPriorityType;
    /** Type: RTCPriorityType */
    priority?: RTCPriorityType;
    /** Type: double */
    scaleResolutionDownBy?: number;
}

interface RTCRtpHeaderExtensionCapability {
    /** Type: DOMString */
    uri: string;
}

interface RTCRtpHeaderExtensionParameters {
    /** Type: boolean */
    encrypted?: boolean;
    /** Type: unsigned short */
    id: number;
    /** Type: DOMString */
    uri: string;
}

interface RTCRtpParameters {
    /** Type: [object Object] */
    codecs: RTCRtpCodecParameters[];
    /** Type: [object Object] */
    headerExtensions: RTCRtpHeaderExtensionParameters[];
    /** Type: RTCRtcpParameters */
    rtcp: RTCRtcpParameters;
}

interface RTCRtpReceiveParameters extends RTCRtpParameters {
}

interface RTCRtpSendParameters extends RTCRtpParameters {
    /** Type: RTCDegradationPreference */
    degradationPreference?: RTCDegradationPreference;
    /** Type: [object Object] */
    encodings: RTCRtpEncodingParameters[];
    /** Type: DOMString */
    transactionId: string;
}

interface RTCRtpStreamStats extends RTCStats {
    /** Type: DOMString */
    codecId?: string;
    /** Type: DOMString */
    kind: string;
    /** Type: unsigned long */
    ssrc: number;
    /** Type: DOMString */
    transportId?: string;
}

interface RTCRtpSynchronizationSource extends RTCRtpContributingSource {
}

interface RTCRtpTransceiverInit {
    /** Type: RTCRtpTransceiverDirection */
    direction?: RTCRtpTransceiverDirection;
    /** Type: [object Object] */
    sendEncodings?: RTCRtpEncodingParameters[];
    /** Type: [object Object] */
    streams?: MediaStream[];
}

interface RTCSentRtpStreamStats extends RTCRtpStreamStats {
    /** Type: unsigned long long */
    bytesSent?: number;
    /** Type: unsigned long long */
    packetsSent?: number;
}

interface RTCSessionDescriptionInit {
    /** Type: DOMString */
    sdp?: string;
    /** Type: RTCSdpType */
    type: RTCSdpType;
}

interface RTCSetParameterOptions {
}

interface RTCStats {
    /** Type: DOMString */
    id: string;
    /** Type: DOMHighResTimeStamp */
    timestamp: DOMHighResTimeStamp;
    /** Type: RTCStatsType */
    type: RTCStatsType;
}

interface RTCTrackEventInit extends EventInit {
    /** Type: RTCRtpReceiver */
    receiver: RTCRtpReceiver;
    /** Type: [object Object] */
    streams?: MediaStream[];
    /** Type: MediaStreamTrack */
    track: MediaStreamTrack;
    /** Type: RTCRtpTransceiver */
    transceiver: RTCRtpTransceiver;
}

interface RTCTransportStats extends RTCStats {
    /** Type: unsigned long long */
    bytesReceived?: number;
    /** Type: unsigned long long */
    bytesSent?: number;
    /** Type: DOMString */
    dtlsCipher?: string;
    /** Type: RTCDtlsRole */
    dtlsRole?: RTCDtlsRole;
    /** Type: RTCDtlsTransportState */
    dtlsState: RTCDtlsTransportState;
    /** Type: DOMString */
    iceLocalUsernameFragment?: string;
    /** Type: RTCIceRole */
    iceRole?: RTCIceRole;
    /** Type: RTCIceTransportState */
    iceState?: RTCIceTransportState;
    /** Type: DOMString */
    localCertificateId?: string;
    /** Type: unsigned long long */
    packetsReceived?: number;
    /** Type: unsigned long long */
    packetsSent?: number;
    /** Type: DOMString */
    remoteCertificateId?: string;
    /** Type: unsigned long */
    selectedCandidatePairChanges?: number;
    /** Type: DOMString */
    selectedCandidatePairId?: string;
    /** Type: DOMString */
    srtpCipher?: string;
    /** Type: DOMString */
    tlsVersion?: string;
}

interface ReadableStreamGetReaderOptions {
    /** Type: ReadableStreamReaderMode */
    mode?: ReadableStreamReaderMode;
}

interface ReadableStreamIteratorOptions {
    /** Type: boolean */
    preventCancel?: boolean;
}

interface ReadableStreamReadDoneResult<T> {
    done: true;
    value: T | undefined;
}

interface ReadableStreamReadValueResult<T> {
    done: false;
    value: T;
}

interface ReadableWritablePair<R = any, W = any> {
    /** Type: ReadableStream */
    readable: ReadableStream<R>;
    /** Type: WritableStream */
    writable: WritableStream<W>;
}

interface RegistrationOptions {
    /** Type: USVString */
    scope?: string;
    /** Type: WorkerType */
    type?: WorkerType;
    /** Type: ServiceWorkerUpdateViaCache */
    updateViaCache?: ServiceWorkerUpdateViaCache;
}

interface ReportingObserverOptions {
    /** Type: boolean */
    buffered?: boolean;
    /** Type: [object Object] */
    types?: string[];
}

interface RequestInit {
    /** Type: BodyInit */
    body?: BodyInit | null;
    /** Type: RequestCache */
    cache?: RequestCache;
    /** Type: RequestCredentials */
    credentials?: RequestCredentials;
    /** Type: HeadersInit */
    headers?: HeadersInit;
    /** Type: DOMString */
    integrity?: string;
    /** Type: boolean */
    keepalive?: boolean;
    /** Type: ByteString */
    method?: string;
    /** Type: RequestMode */
    mode?: RequestMode;
    /** Type: RequestPriority */
    priority?: RequestPriority;
    /** Type: RequestRedirect */
    redirect?: RequestRedirect;
    /** Type: USVString */
    referrer?: string;
    /** Type: ReferrerPolicy */
    referrerPolicy?: ReferrerPolicy;
    /** Type: AbortSignal */
    signal?: AbortSignal | null;
    /** Type: any */
    window?: null;
}

interface ResizeObserverOptions {
    /** Type: ResizeObserverBoxOptions */
    box?: ResizeObserverBoxOptions;
}

interface ResponseInit {
    /** Type: HeadersInit */
    headers?: HeadersInit;
    /** Type: unsigned short */
    status?: number;
    /** Type: ByteString */
    statusText?: string;
}

interface RsaHashedImportParams extends Algorithm {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
}

interface RsaHashedKeyAlgorithm extends RsaKeyAlgorithm {
    /** Type: KeyAlgorithm */
    hash: KeyAlgorithm;
}

interface RsaHashedKeyGenParams extends RsaKeyGenParams {
    /** Type: HashAlgorithmIdentifier */
    hash: HashAlgorithmIdentifier;
}

interface RsaKeyAlgorithm extends KeyAlgorithm {
    /** Type: unsigned long */
    modulusLength: number;
    /** Type: BigInteger */
    publicExponent: BigInteger;
}

interface RsaKeyGenParams extends Algorithm {
    /** Type: unsigned long */
    modulusLength: number;
    /** Type: BigInteger */
    publicExponent: BigInteger;
}

interface RsaOaepParams extends Algorithm {
    /** Type: BufferSource */
    label?: BufferSource;
}

interface RsaOtherPrimesInfo {
    /** Type: DOMString */
    d?: string;
    /** Type: DOMString */
    r?: string;
    /** Type: DOMString */
    t?: string;
}

interface RsaPssParams extends Algorithm {
    /** Type: unsigned long */
    saltLength: number;
}

interface SVGBoundingBoxOptions {
    /** Type: boolean */
    clipped?: boolean;
    /** Type: boolean */
    fill?: boolean;
    /** Type: boolean */
    markers?: boolean;
    /** Type: boolean */
    stroke?: boolean;
}

interface ScrollIntoViewOptions extends ScrollOptions {
    /** Type: ScrollLogicalPosition */
    block?: ScrollLogicalPosition;
    /** Type: ScrollLogicalPosition */
    inline?: ScrollLogicalPosition;
}

interface ScrollOptions {
    /** Type: ScrollBehavior */
    behavior?: ScrollBehavior;
}

interface ScrollToOptions extends ScrollOptions {
    /** Type: unrestricted double */
    left?: number;
    /** Type: unrestricted double */
    top?: number;
}

interface SecurityPolicyViolationEventInit extends EventInit {
    /** Type: USVString */
    blockedURI?: string;
    /** Type: unsigned long */
    columnNumber?: number;
    /** Type: SecurityPolicyViolationEventDisposition */
    disposition?: SecurityPolicyViolationEventDisposition;
    /** Type: USVString */
    documentURI?: string;
    /** Type: DOMString */
    effectiveDirective?: string;
    /** Type: unsigned long */
    lineNumber?: number;
    /** Type: DOMString */
    originalPolicy?: string;
    /** Type: USVString */
    referrer?: string;
    /** Type: DOMString */
    sample?: string;
    /** Type: USVString */
    sourceFile?: string;
    /** Type: unsigned short */
    statusCode?: number;
    /** Type: DOMString */
    violatedDirective?: string;
}

interface ShadowRootInit {
    /** Type: boolean */
    clonable?: boolean;
    /** Type: CustomElementRegistry */
    customElementRegistry?: CustomElementRegistry;
    /** Type: boolean */
    delegatesFocus?: boolean;
    /** Type: ShadowRootMode */
    mode: ShadowRootMode;
    /** Type: boolean */
    serializable?: boolean;
    /** Type: SlotAssignmentMode */
    slotAssignment?: SlotAssignmentMode;
}

interface ShareData {
    /** Type: [object Object] */
    files?: File[];
    /** Type: USVString */
    text?: string;
    /** Type: USVString */
    title?: string;
    /** Type: USVString */
    url?: string;
}

interface SpeechSynthesisErrorEventInit extends SpeechSynthesisEventInit {
    /** Type: SpeechSynthesisErrorCode */
    error: SpeechSynthesisErrorCode;
}

interface SpeechSynthesisEventInit extends EventInit {
    /** Type: unsigned long */
    charIndex?: number;
    /** Type: unsigned long */
    charLength?: number;
    /** Type: float */
    elapsedTime?: number;
    /** Type: DOMString */
    name?: string;
    /** Type: SpeechSynthesisUtterance */
    utterance: SpeechSynthesisUtterance;
}

interface StartViewTransitionOptions {
    /** Type: [object Object] */
    types?: string[] | null;
    /** Type: ViewTransitionUpdateCallback */
    update?: ViewTransitionUpdateCallback | null;
}

interface StaticRangeInit {
    /** Type: Node */
    endContainer: Node;
    /** Type: unsigned long */
    endOffset: number;
    /** Type: Node */
    startContainer: Node;
    /** Type: unsigned long */
    startOffset: number;
}

interface StereoPannerOptions extends AudioNodeOptions {
    /** Type: float */
    pan?: number;
}

interface StorageEstimate {
    /** Type: unsigned long long */
    quota?: number;
    /** Type: unsigned long long */
    usage?: number;
}

interface StorageEventInit extends EventInit {
    /** Type: DOMString */
    key?: string | null;
    /** Type: DOMString */
    newValue?: string | null;
    /** Type: DOMString */
    oldValue?: string | null;
    /** Type: Storage */
    storageArea?: Storage | null;
    /** Type: USVString */
    url?: string;
}

interface StreamPipeOptions {
    /** Type: boolean */
    preventAbort?: boolean;
    /** Type: boolean */
    preventCancel?: boolean;
    /** Type: boolean */
    preventClose?: boolean;
    /** Type: AbortSignal */
    signal?: AbortSignal;
}

interface StructuredSerializeOptions {
    /** Type: [object Object] */
    transfer?: Transferable[];
}

interface SubmitEventInit extends EventInit {
    /** Type: HTMLElement */
    submitter?: HTMLElement | null;
}

interface TextDecodeOptions {
    /** Type: boolean */
    stream?: boolean;
}

interface TextDecoderOptions {
    /** Type: boolean */
    fatal?: boolean;
    /** Type: boolean */
    ignoreBOM?: boolean;
}

interface TextEncoderEncodeIntoResult {
    /** Type: unsigned long long */
    read: number;
    /** Type: unsigned long long */
    written: number;
}

interface ToggleEventInit extends EventInit {
    /** Type: DOMString */
    newState?: string;
    /** Type: DOMString */
    oldState?: string;
}

interface TouchEventInit extends EventModifierInit {
    /** Type: [object Object] */
    changedTouches?: Touch[];
    /** Type: [object Object] */
    targetTouches?: Touch[];
    /** Type: [object Object] */
    touches?: Touch[];
}

interface TouchInit {
    /** Type: double */
    altitudeAngle?: number;
    /** Type: double */
    azimuthAngle?: number;
    /** Type: double */
    clientX?: number;
    /** Type: double */
    clientY?: number;
    /** Type: float */
    force?: number;
    /** Type: long */
    identifier: number;
    /** Type: double */
    pageX?: number;
    /** Type: double */
    pageY?: number;
    /** Type: float */
    radiusX?: number;
    /** Type: float */
    radiusY?: number;
    /** Type: float */
    rotationAngle?: number;
    /** Type: double */
    screenX?: number;
    /** Type: double */
    screenY?: number;
    /** Type: EventTarget */
    target: EventTarget;
    /** Type: TouchType */
    touchType?: TouchType;
}

interface TrackEventInit extends EventInit {
    /** Type: [object Object],[object Object],[object Object] */
    track?: TextTrack | null;
}

interface Transformer<I = any, O = any> {
    /** Type: TransformerFlushCallback */
    flush?: TransformerFlushCallback<O>;
    /** Type: any */
    readableType?: undefined;
    /** Type: TransformerStartCallback */
    start?: TransformerStartCallback<O>;
    /** Type: TransformerTransformCallback */
    transform?: TransformerTransformCallback<I, O>;
    /** Type: any */
    writableType?: undefined;
}

interface TransitionEventInit extends EventInit {
    /** Type: double */
    elapsedTime?: number;
    /** Type: CSSOMString */
    propertyName?: string;
    /** Type: CSSOMString */
    pseudoElement?: string;
}

interface UIEventInit extends EventInit {
    /** Type: long */
    detail?: number;
    /** Type: Window */
    view?: Window | null;
    /**
     * Type: unsigned long
     * @deprecated
     */
    which?: number;
}

interface ULongRange {
    /** Type: unsigned long */
    max?: number;
    /** Type: unsigned long */
    min?: number;
}

interface UnderlyingByteSource {
    autoAllocateChunkSize?: number;
    cancel?: UnderlyingSourceCancelCallback;
    pull?: (controller: ReadableByteStreamController) => void | PromiseLike<void>;
    start?: (controller: ReadableByteStreamController) => any;
    type: "bytes";
}

interface UnderlyingDefaultSource<R = any> {
    cancel?: UnderlyingSourceCancelCallback;
    pull?: (controller: ReadableStreamDefaultController<R>) => void | PromiseLike<void>;
    start?: (controller: ReadableStreamDefaultController<R>) => any;
    type?: undefined;
}

interface UnderlyingSink<W = any> {
    /** Type: UnderlyingSinkAbortCallback */
    abort?: UnderlyingSinkAbortCallback;
    /** Type: UnderlyingSinkCloseCallback */
    close?: UnderlyingSinkCloseCallback;
    /** Type: UnderlyingSinkStartCallback */
    start?: UnderlyingSinkStartCallback;
    /** Type: any */
    type?: undefined;
    /** Type: UnderlyingSinkWriteCallback */
    write?: UnderlyingSinkWriteCallback<W>;
}

interface UnderlyingSource<R = any> {
    /** Type: unsigned long long */
    autoAllocateChunkSize?: number;
    /** Type: UnderlyingSourceCancelCallback */
    cancel?: UnderlyingSourceCancelCallback;
    /** Type: UnderlyingSourcePullCallback */
    pull?: UnderlyingSourcePullCallback<R>;
    /** Type: UnderlyingSourceStartCallback */
    start?: UnderlyingSourceStartCallback<R>;
    /** Type: ReadableStreamType */
    type?: ReadableStreamType;
}

interface ValidityStateFlags {
    /** Type: boolean */
    badInput?: boolean;
    /** Type: boolean */
    customError?: boolean;
    /** Type: boolean */
    patternMismatch?: boolean;
    /** Type: boolean */
    rangeOverflow?: boolean;
    /** Type: boolean */
    rangeUnderflow?: boolean;
    /** Type: boolean */
    stepMismatch?: boolean;
    /** Type: boolean */
    tooLong?: boolean;
    /** Type: boolean */
    tooShort?: boolean;
    /** Type: boolean */
    typeMismatch?: boolean;
    /** Type: boolean */
    valueMissing?: boolean;
}

interface VideoColorSpaceInit {
    /** Type: boolean */
    fullRange?: boolean | null;
    /** Type: VideoMatrixCoefficients */
    matrix?: VideoMatrixCoefficients | null;
    /** Type: VideoColorPrimaries */
    primaries?: VideoColorPrimaries | null;
    /** Type: VideoTransferCharacteristics */
    transfer?: VideoTransferCharacteristics | null;
}

interface VideoConfiguration {
    /** Type: unsigned long long */
    bitrate: number;
    /** Type: ColorGamut */
    colorGamut?: ColorGamut;
    /** Type: DOMString */
    contentType: string;
    /** Type: double */
    framerate: number;
    /** Type: boolean */
    hasAlphaChannel?: boolean;
    /** Type: HdrMetadataType */
    hdrMetadataType?: HdrMetadataType;
    /** Type: unsigned long */
    height: number;
    /** Type: DOMString */
    scalabilityMode?: string;
    /** Type: TransferFunction */
    transferFunction?: TransferFunction;
    /** Type: unsigned long */
    width: number;
}

interface VideoDecoderConfig {
    /** Type: DOMString */
    codec: string;
    /** Type: unsigned long */
    codedHeight?: number;
    /** Type: unsigned long */
    codedWidth?: number;
    /** Type: VideoColorSpaceInit */
    colorSpace?: VideoColorSpaceInit;
    /** Type: AllowSharedBufferSource */
    description?: AllowSharedBufferSource;
    /** Type: unsigned long */
    displayAspectHeight?: number;
    /** Type: unsigned long */
    displayAspectWidth?: number;
    /** Type: HardwareAcceleration */
    hardwareAcceleration?: HardwareAcceleration;
    /** Type: boolean */
    optimizeForLatency?: boolean;
}

interface VideoDecoderInit {
    /** Type: WebCodecsErrorCallback */
    error: WebCodecsErrorCallback;
    /** Type: VideoFrameOutputCallback */
    output: VideoFrameOutputCallback;
}

interface VideoDecoderSupport {
    /** Type: VideoDecoderConfig */
    config?: VideoDecoderConfig;
    /** Type: boolean */
    supported?: boolean;
}

interface VideoEncoderConfig {
    /** Type: AlphaOption */
    alpha?: AlphaOption;
    /** Type: AvcEncoderConfig */
    avc?: AvcEncoderConfig;
    /** Type: unsigned long long */
    bitrate?: number;
    /** Type: VideoEncoderBitrateMode */
    bitrateMode?: VideoEncoderBitrateMode;
    /** Type: DOMString */
    codec: string;
    /** Type: DOMString */
    contentHint?: string;
    /** Type: unsigned long */
    displayHeight?: number;
    /** Type: unsigned long */
    displayWidth?: number;
    /** Type: double */
    framerate?: number;
    /** Type: HardwareAcceleration */
    hardwareAcceleration?: HardwareAcceleration;
    /** Type: unsigned long */
    height: number;
    /** Type: LatencyMode */
    latencyMode?: LatencyMode;
    /** Type: DOMString */
    scalabilityMode?: string;
    /** Type: unsigned long */
    width: number;
}

interface VideoEncoderEncodeOptions {
    /** Type: VideoEncoderEncodeOptionsForAvc */
    avc?: VideoEncoderEncodeOptionsForAvc;
    /** Type: boolean */
    keyFrame?: boolean;
}

interface VideoEncoderEncodeOptionsForAvc {
    /** Type: unsigned short */
    quantizer?: number | null;
}

interface VideoEncoderInit {
    /** Type: WebCodecsErrorCallback */
    error: WebCodecsErrorCallback;
    /** Type: EncodedVideoChunkOutputCallback */
    output: EncodedVideoChunkOutputCallback;
}

interface VideoEncoderSupport {
    /** Type: VideoEncoderConfig */
    config?: VideoEncoderConfig;
    /** Type: boolean */
    supported?: boolean;
}

interface VideoFrameBufferInit {
    /** Type: unsigned long */
    codedHeight: number;
    /** Type: unsigned long */
    codedWidth: number;
    /** Type: VideoColorSpaceInit */
    colorSpace?: VideoColorSpaceInit;
    /** Type: unsigned long */
    displayHeight?: number;
    /** Type: unsigned long */
    displayWidth?: number;
    /** Type: unsigned long long */
    duration?: number;
    /** Type: VideoPixelFormat */
    format: VideoPixelFormat;
    /** Type: [object Object] */
    layout?: PlaneLayout[];
    /** Type: long long */
    timestamp: number;
    /** Type: DOMRectInit */
    visibleRect?: DOMRectInit;
}

interface VideoFrameCallbackMetadata {
    /** Type: DOMHighResTimeStamp */
    captureTime?: DOMHighResTimeStamp;
    /** Type: DOMHighResTimeStamp */
    expectedDisplayTime: DOMHighResTimeStamp;
    /** Type: unsigned long */
    height: number;
    /** Type: double */
    mediaTime: number;
    /** Type: DOMHighResTimeStamp */
    presentationTime: DOMHighResTimeStamp;
    /** Type: unsigned long */
    presentedFrames: number;
    /** Type: double */
    processingDuration?: number;
    /** Type: DOMHighResTimeStamp */
    receiveTime?: DOMHighResTimeStamp;
    /** Type: unsigned long */
    rtpTimestamp?: number;
    /** Type: unsigned long */
    width: number;
}

interface VideoFrameCopyToOptions {
    /** Type: PredefinedColorSpace */
    colorSpace?: PredefinedColorSpace;
    /** Type: VideoPixelFormat */
    format?: VideoPixelFormat;
    /** Type: [object Object] */
    layout?: PlaneLayout[];
    /** Type: DOMRectInit */
    rect?: DOMRectInit;
}

interface VideoFrameInit {
    /** Type: AlphaOption */
    alpha?: AlphaOption;
    /** Type: unsigned long */
    displayHeight?: number;
    /** Type: unsigned long */
    displayWidth?: number;
    /** Type: unsigned long long */
    duration?: number;
    /** Type: long long */
    timestamp?: number;
    /** Type: DOMRectInit */
    visibleRect?: DOMRectInit;
}

interface WaveShaperOptions extends AudioNodeOptions {
    /** Type: [object Object] */
    curve?: number[] | Float32Array;
    /** Type: OverSampleType */
    oversample?: OverSampleType;
}

interface WebGLContextAttributes {
    /** Type: boolean */
    alpha?: boolean;
    /** Type: boolean */
    antialias?: boolean;
    /** Type: boolean */
    depth?: boolean;
    /** Type: boolean */
    desynchronized?: boolean;
    /** Type: boolean */
    failIfMajorPerformanceCaveat?: boolean;
    /** Type: WebGLPowerPreference */
    powerPreference?: WebGLPowerPreference;
    /** Type: boolean */
    premultipliedAlpha?: boolean;
    /** Type: boolean */
    preserveDrawingBuffer?: boolean;
    /** Type: boolean */
    stencil?: boolean;
}

interface WebGLContextEventInit extends EventInit {
    /** Type: DOMString */
    statusMessage?: string;
}

interface WebTransportCloseInfo {
    /** Type: unsigned long */
    closeCode?: number;
    /** Type: USVString */
    reason?: string;
}

interface WebTransportErrorOptions {
    /** Type: WebTransportErrorSource */
    source?: WebTransportErrorSource;
    /** Type: unsigned long */
    streamErrorCode?: number | null;
}

interface WebTransportHash {
    /** Type: DOMString */
    algorithm?: string;
    /** Type: BufferSource */
    value?: BufferSource;
}

interface WebTransportOptions {
    /** Type: boolean */
    allowPooling?: boolean;
    /** Type: WebTransportCongestionControl */
    congestionControl?: WebTransportCongestionControl;
    /** Type: boolean */
    requireUnreliable?: boolean;
    /** Type: [object Object] */
    serverCertificateHashes?: WebTransportHash[];
}

interface WebTransportSendOptions {
    /** Type: long long */
    sendOrder?: number;
}

interface WebTransportSendStreamOptions extends WebTransportSendOptions {
}

interface WheelEventInit extends MouseEventInit {
    /** Type: unsigned long */
    deltaMode?: number;
    /** Type: double */
    deltaX?: number;
    /** Type: double */
    deltaY?: number;
    /** Type: double */
    deltaZ?: number;
}

interface WindowPostMessageOptions extends StructuredSerializeOptions {
    /** Type: USVString */
    targetOrigin?: string;
}

interface WorkerOptions {
    /** Type: RequestCredentials */
    credentials?: RequestCredentials;
    /** Type: DOMString */
    name?: string;
    /** Type: WorkerType */
    type?: WorkerType;
}

interface WorkletOptions {
    /** Type: RequestCredentials */
    credentials?: RequestCredentials;
}

interface WriteParams {
    /** Type: [object Object],[object Object],[object Object] */
    data?: BufferSource | Blob | string | null;
    /** Type: unsigned long long */
    position?: number | null;
    /** Type: unsigned long long */
    size?: number | null;
    /** Type: WriteCommandType */
    type: WriteCommandType;
}

type NodeFilter = ((node: Node) => number) | { acceptNode(node: Node): number; };

declare var NodeFilter: {
    /** Type: unsigned short */
    readonly FILTER_ACCEPT: 1;
    /** Type: unsigned short */
    readonly FILTER_REJECT: 2;
    /** Type: unsigned short */
    readonly FILTER_SKIP: 3;
    /** Type: unsigned long */
    readonly SHOW_ALL: 0xFFFFFFFF;
    /** Type: unsigned long */
    readonly SHOW_ELEMENT: 0x1;
    /** Type: unsigned long */
    readonly SHOW_ATTRIBUTE: 0x2;
    /** Type: unsigned long */
    readonly SHOW_TEXT: 0x4;
    /** Type: unsigned long */
    readonly SHOW_CDATA_SECTION: 0x8;
    /** Type: unsigned long */
    readonly SHOW_ENTITY_REFERENCE: 0x10;
    /** Type: unsigned long */
    readonly SHOW_ENTITY: 0x20;
    /** Type: unsigned long */
    readonly SHOW_PROCESSING_INSTRUCTION: 0x40;
    /** Type: unsigned long */
    readonly SHOW_COMMENT: 0x80;
    /** Type: unsigned long */
    readonly SHOW_DOCUMENT: 0x100;
    /** Type: unsigned long */
    readonly SHOW_DOCUMENT_TYPE: 0x200;
    /** Type: unsigned long */
    readonly SHOW_DOCUMENT_FRAGMENT: 0x400;
    /** Type: unsigned long */
    readonly SHOW_NOTATION: 0x800;
};

type XPathNSResolver = ((prefix: string | null) => string | null) | { lookupNamespaceURI(prefix: string | null): string | null; };

/**
 * The **`ANGLE_instanced_arrays`** extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays)
 */
interface ANGLE_instanced_arrays {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawArraysInstancedANGLE)
     */
    drawArraysInstancedANGLE(mode: GLenum, first: GLint, count: GLsizei, primcount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/drawElementsInstancedANGLE)
     */
    drawElementsInstancedANGLE(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, primcount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ANGLE_instanced_arrays/vertexAttribDivisorANGLE)
     */
    vertexAttribDivisorANGLE(index: GLuint, divisor: GLuint): void;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE: 0x88FE;
}

interface ARIAMixin {
    /** Type: Element */
    ariaActiveDescendantElement: Element | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAtomic)
     */
    ariaAtomic: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaAutoComplete)
     */
    ariaAutoComplete: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleLabel)
     */
    ariaBrailleLabel: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBrailleRoleDescription)
     */
    ariaBrailleRoleDescription: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaBusy)
     */
    ariaBusy: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaChecked)
     */
    ariaChecked: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColCount)
     */
    ariaColCount: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndex)
     */
    ariaColIndex: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColIndexText)
     */
    ariaColIndexText: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaColSpan)
     */
    ariaColSpan: string | null;
    /** Type: [object Object] */
    ariaControlsElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaCurrent)
     */
    ariaCurrent: string | null;
    /** Type: [object Object] */
    ariaDescribedByElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDescription)
     */
    ariaDescription: string | null;
    /** Type: [object Object] */
    ariaDetailsElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaDisabled)
     */
    ariaDisabled: string | null;
    /** Type: [object Object] */
    ariaErrorMessageElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaExpanded)
     */
    ariaExpanded: string | null;
    /** Type: [object Object] */
    ariaFlowToElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHasPopup)
     */
    ariaHasPopup: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaHidden)
     */
    ariaHidden: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaInvalid)
     */
    ariaInvalid: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaKeyShortcuts)
     */
    ariaKeyShortcuts: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLabel)
     */
    ariaLabel: string | null;
    /** Type: [object Object] */
    ariaLabelledByElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLevel)
     */
    ariaLevel: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaLive)
     */
    ariaLive: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaModal)
     */
    ariaModal: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiLine)
     */
    ariaMultiLine: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaMultiSelectable)
     */
    ariaMultiSelectable: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaOrientation)
     */
    ariaOrientation: string | null;
    /** Type: [object Object] */
    ariaOwnsElements: ReadonlyArray<Element> | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPlaceholder)
     */
    ariaPlaceholder: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPosInSet)
     */
    ariaPosInSet: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaPressed)
     */
    ariaPressed: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaReadOnly)
     */
    ariaReadOnly: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRelevant)
     */
    ariaRelevant: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRequired)
     */
    ariaRequired: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRoleDescription)
     */
    ariaRoleDescription: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowCount)
     */
    ariaRowCount: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndex)
     */
    ariaRowIndex: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowIndexText)
     */
    ariaRowIndexText: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaRowSpan)
     */
    ariaRowSpan: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSelected)
     */
    ariaSelected: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSetSize)
     */
    ariaSetSize: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaSort)
     */
    ariaSort: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMax)
     */
    ariaValueMax: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueMin)
     */
    ariaValueMin: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueNow)
     */
    ariaValueNow: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/ariaValueText)
     */
    ariaValueText: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/role)
     */
    role: string | null;
}

/**
 * The **`AbortController`** interface represents a controller object that allows you to abort one or more Web requests as and when desired.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController)
 */
interface AbortController {
    /**
     * Type: AbortSignal
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/signal)
     */
    readonly signal: AbortSignal;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortController/abort)
     */
    abort(reason?: any): void;
}

declare var AbortController: {
    prototype: AbortController;
    new(): AbortController;
};

interface AbortSignalEventMap {
    "abort": Event;
}

/**
 * The **`AbortSignal`** interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal)
 */
interface AbortSignal extends EventTarget {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/aborted)
     */
    readonly aborted: boolean;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_event)
     */
    onabort: ((this: AbortSignal, ev: Event) => any) | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/reason)
     */
    readonly reason: any;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/throwIfAborted)
     */
    throwIfAborted(): void;
    addEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AbortSignalEventMap>(type: K, listener: (this: AbortSignal, ev: AbortSignalEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AbortSignal: {
    prototype: AbortSignal;
    new(): AbortSignal;
    /**
     * Type: AbortSignal
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/abort_static)
     */
    abort(reason?: any): AbortSignal;
    /**
     * Type: AbortSignal
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/any_static)
     */
    any(signals: AbortSignal[]): AbortSignal;
    /**
     * Type: AbortSignal
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbortSignal/timeout_static)
     */
    timeout(milliseconds: number): AbortSignal;
};

/**
 * The **`AbstractRange`** abstract interface is the base class upon which all DOM range types are defined.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange)
 */
interface AbstractRange {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/collapsed)
     */
    readonly collapsed: boolean;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endContainer)
     */
    readonly endContainer: Node;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/endOffset)
     */
    readonly endOffset: number;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startContainer)
     */
    readonly startContainer: Node;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AbstractRange/startOffset)
     */
    readonly startOffset: number;
}

declare var AbstractRange: {
    prototype: AbstractRange;
    new(): AbstractRange;
};

interface AbstractWorkerEventMap {
    "error": ErrorEvent;
}

interface AbstractWorker {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/error_event)
     */
    onerror: ((this: AbstractWorker, ev: ErrorEvent) => any) | null;
    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: AbstractWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/**
 * The **`AnalyserNode`** interface represents a node able to provide real-time frequency and time-domain analysis information.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode)
 */
interface AnalyserNode extends AudioNode {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/fftSize)
     */
    fftSize: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/frequencyBinCount)
     */
    readonly frequencyBinCount: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/maxDecibels)
     */
    maxDecibels: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/minDecibels)
     */
    minDecibels: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/smoothingTimeConstant)
     */
    smoothingTimeConstant: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteFrequencyData)
     */
    getByteFrequencyData(array: Uint8Array<ArrayBuffer>): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getByteTimeDomainData)
     */
    getByteTimeDomainData(array: Uint8Array<ArrayBuffer>): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatFrequencyData)
     */
    getFloatFrequencyData(array: Float32Array<ArrayBuffer>): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnalyserNode/getFloatTimeDomainData)
     */
    getFloatTimeDomainData(array: Float32Array<ArrayBuffer>): void;
}

declare var AnalyserNode: {
    prototype: AnalyserNode;
    new(context: BaseAudioContext, options?: AnalyserOptions): AnalyserNode;
};

interface Animatable {
    /**
     * Type: Animation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animate)
     */
    animate(keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeAnimationOptions): Animation;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAnimations)
     */
    getAnimations(options?: GetAnimationsOptions): Animation[];
}

interface AnimationEventMap {
    "cancel": AnimationPlaybackEvent;
    "finish": AnimationPlaybackEvent;
    "remove": AnimationPlaybackEvent;
}

/**
 * The **`Animation`** interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation)
 */
interface Animation extends EventTarget {
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/currentTime)
     */
    currentTime: CSSNumberish | null;
    /**
     * Type: AnimationEffect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/effect)
     */
    effect: AnimationEffect | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finished)
     */
    readonly finished: Promise<Animation>;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/id)
     */
    id: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel_event)
     */
    oncancel: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish_event)
     */
    onfinish: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/remove_event)
     */
    onremove: ((this: Animation, ev: AnimationPlaybackEvent) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/pending)
     */
    readonly pending: boolean;
    /**
     * Type: AnimationPlayState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playState)
     */
    readonly playState: AnimationPlayState;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/playbackRate)
     */
    playbackRate: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/ready)
     */
    readonly ready: Promise<Animation>;
    /**
     * Type: AnimationReplaceState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/replaceState)
     */
    readonly replaceState: AnimationReplaceState;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/startTime)
     */
    startTime: CSSNumberish | null;
    /**
     * Type: AnimationTimeline
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/timeline)
     */
    timeline: AnimationTimeline | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/cancel)
     */
    cancel(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/commitStyles)
     */
    commitStyles(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/finish)
     */
    finish(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/pause)
     */
    pause(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/persist)
     */
    persist(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/play)
     */
    play(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/reverse)
     */
    reverse(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Animation/updatePlaybackRate)
     */
    updatePlaybackRate(playbackRate: number): void;
    addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: Animation, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: Animation, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var Animation: {
    prototype: Animation;
    new(effect?: AnimationEffect | null, timeline?: AnimationTimeline | null): Animation;
};

/**
 * The `AnimationEffect` interface of the Web Animations API is an interface representing animation effects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect)
 */
interface AnimationEffect {
    /**
     * Type: ComputedEffectTiming
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getComputedTiming)
     */
    getComputedTiming(): ComputedEffectTiming;
    /**
     * Type: EffectTiming
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/getTiming)
     */
    getTiming(): EffectTiming;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEffect/updateTiming)
     */
    updateTiming(timing?: OptionalEffectTiming): void;
}

declare var AnimationEffect: {
    prototype: AnimationEffect;
    new(): AnimationEffect;
};

/**
 * The **`AnimationEvent`** interface represents events providing information related to animations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent)
 */
interface AnimationEvent extends Event {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/animationName)
     */
    readonly animationName: string;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/elapsedTime)
     */
    readonly elapsedTime: number;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationEvent/pseudoElement)
     */
    readonly pseudoElement: string;
}

declare var AnimationEvent: {
    prototype: AnimationEvent;
    new(type: string, animationEventInitDict?: AnimationEventInit): AnimationEvent;
};

interface AnimationFrameProvider {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame)
     */
    cancelAnimationFrame(handle: number): void;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame)
     */
    requestAnimationFrame(callback: FrameRequestCallback): number;
}

/**
 * The AnimationPlaybackEvent interface of the Web Animations API represents animation events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent)
 */
interface AnimationPlaybackEvent extends Event {
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/currentTime)
     */
    readonly currentTime: CSSNumberish | null;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationPlaybackEvent/timelineTime)
     */
    readonly timelineTime: CSSNumberish | null;
}

declare var AnimationPlaybackEvent: {
    prototype: AnimationPlaybackEvent;
    new(type: string, eventInitDict?: AnimationPlaybackEventInit): AnimationPlaybackEvent;
};

/**
 * The `AnimationTimeline` interface of the Web Animations API represents the timeline of an animation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline)
 */
interface AnimationTimeline {
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AnimationTimeline/currentTime)
     */
    readonly currentTime: CSSNumberish | null;
}

declare var AnimationTimeline: {
    prototype: AnimationTimeline;
    new(): AnimationTimeline;
};

/**
 * The **`Attr`** interface represents one of an element's attributes as an object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr)
 */
interface Attr extends Node {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/localName)
     */
    readonly localName: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/name)
     */
    readonly name: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/namespaceURI)
     */
    readonly namespaceURI: string | null;
    readonly ownerDocument: Document;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/ownerElement)
     */
    readonly ownerElement: Element | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/prefix)
     */
    readonly prefix: string | null;
    /**
     * Type: boolean
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/specified)
     */
    readonly specified: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Attr/value)
     */
    value: string;
}

declare var Attr: {
    prototype: Attr;
    new(): Attr;
};

/**
 * The **`AudioBuffer`** interface represents a short audio asset residing in memory, created from an audio file using the BaseAudioContext/decodeAudioData method, or from raw data using BaseAudioContext/createBuffer.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer)
 */
interface AudioBuffer {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/duration)
     */
    readonly duration: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/length)
     */
    readonly length: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/numberOfChannels)
     */
    readonly numberOfChannels: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/sampleRate)
     */
    readonly sampleRate: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyFromChannel)
     */
    copyFromChannel(destination: Float32Array<ArrayBuffer>, channelNumber: number, bufferOffset?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/copyToChannel)
     */
    copyToChannel(source: Float32Array<ArrayBuffer>, channelNumber: number, bufferOffset?: number): void;
    /**
     * Type: Float32Array
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBuffer/getChannelData)
     */
    getChannelData(channel: number): Float32Array<ArrayBuffer>;
}

declare var AudioBuffer: {
    prototype: AudioBuffer;
    new(options: AudioBufferOptions): AudioBuffer;
};

/**
 * The **`AudioBufferSourceNode`** interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode)
 */
interface AudioBufferSourceNode extends AudioScheduledSourceNode {
    /**
     * Type: AudioBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/buffer)
     */
    buffer: AudioBuffer | null;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/detune)
     */
    readonly detune: AudioParam;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loop)
     */
    loop: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopEnd)
     */
    loopEnd: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/loopStart)
     */
    loopStart: number;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/playbackRate)
     */
    readonly playbackRate: AudioParam;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioBufferSourceNode/start)
     */
    start(when?: number, offset?: number, duration?: number): void;
    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioBufferSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AudioBufferSourceNode: {
    prototype: AudioBufferSourceNode;
    new(context: BaseAudioContext, options?: AudioBufferSourceOptions): AudioBufferSourceNode;
};

/**
 * The `AudioContext` interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext)
 */
interface AudioContext extends BaseAudioContext {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/baseLatency)
     */
    readonly baseLatency: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/outputLatency)
     */
    readonly outputLatency: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/close)
     */
    close(): Promise<void>;
    /**
     * Type: MediaElementAudioSourceNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaElementSource)
     */
    createMediaElementSource(mediaElement: HTMLMediaElement): MediaElementAudioSourceNode;
    /**
     * Type: MediaStreamAudioDestinationNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamDestination)
     */
    createMediaStreamDestination(): MediaStreamAudioDestinationNode;
    /**
     * Type: MediaStreamAudioSourceNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/createMediaStreamSource)
     */
    createMediaStreamSource(mediaStream: MediaStream): MediaStreamAudioSourceNode;
    /**
     * Type: AudioTimestamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/getOutputTimestamp)
     */
    getOutputTimestamp(): AudioTimestamp;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/resume)
     */
    resume(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioContext/suspend)
     */
    suspend(): Promise<void>;
    addEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: AudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AudioContext: {
    prototype: AudioContext;
    new(contextOptions?: AudioContextOptions): AudioContext;
};

/**
 * The **`AudioData`** interface of the WebCodecs API represents an audio sample.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData)
 */
interface AudioData {
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/duration)
     */
    readonly duration: number;
    /**
     * Type: AudioSampleFormat
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/format)
     */
    readonly format: AudioSampleFormat | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/numberOfChannels)
     */
    readonly numberOfChannels: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/numberOfFrames)
     */
    readonly numberOfFrames: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/sampleRate)
     */
    readonly sampleRate: number;
    /**
     * Type: long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/timestamp)
     */
    readonly timestamp: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/allocationSize)
     */
    allocationSize(options: AudioDataCopyToOptions): number;
    /**
     * Type: AudioData
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/clone)
     */
    clone(): AudioData;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioData/copyTo)
     */
    copyTo(destination: AllowSharedBufferSource, options: AudioDataCopyToOptions): void;
}

declare var AudioData: {
    prototype: AudioData;
    new(init: AudioDataInit): AudioData;
};

interface AudioDecoderEventMap {
    "dequeue": Event;
}

/**
 * The **`AudioDecoder`** interface of the WebCodecs API decodes chunks of audio.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder)
 */
interface AudioDecoder extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/decodeQueueSize)
     */
    readonly decodeQueueSize: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/dequeue_event)
     */
    ondequeue: ((this: AudioDecoder, ev: Event) => any) | null;
    /**
     * Type: CodecState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/state)
     */
    readonly state: CodecState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/configure)
     */
    configure(config: AudioDecoderConfig): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/decode)
     */
    decode(chunk: EncodedAudioChunk): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/flush)
     */
    flush(): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/reset)
     */
    reset(): void;
    addEventListener<K extends keyof AudioDecoderEventMap>(type: K, listener: (this: AudioDecoder, ev: AudioDecoderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioDecoderEventMap>(type: K, listener: (this: AudioDecoder, ev: AudioDecoderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AudioDecoder: {
    prototype: AudioDecoder;
    new(init: AudioDecoderInit): AudioDecoder;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDecoder/isConfigSupported_static)
     */
    isConfigSupported(config: AudioDecoderConfig): Promise<AudioDecoderSupport>;
};

/**
 * The `AudioDestinationNode` interface represents the end destination of an audio graph in a given context — usually the speakers of your device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode)
 */
interface AudioDestinationNode extends AudioNode {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioDestinationNode/maxChannelCount)
     */
    readonly maxChannelCount: number;
}

declare var AudioDestinationNode: {
    prototype: AudioDestinationNode;
    new(): AudioDestinationNode;
};

interface AudioEncoderEventMap {
    "dequeue": Event;
}

/**
 * The **`AudioEncoder`** interface of the WebCodecs API encodes AudioData objects.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder)
 */
interface AudioEncoder extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/encodeQueueSize)
     */
    readonly encodeQueueSize: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/dequeue_event)
     */
    ondequeue: ((this: AudioEncoder, ev: Event) => any) | null;
    /**
     * Type: CodecState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/state)
     */
    readonly state: CodecState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/configure)
     */
    configure(config: AudioEncoderConfig): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/encode)
     */
    encode(data: AudioData): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/flush)
     */
    flush(): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/reset)
     */
    reset(): void;
    addEventListener<K extends keyof AudioEncoderEventMap>(type: K, listener: (this: AudioEncoder, ev: AudioEncoderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioEncoderEventMap>(type: K, listener: (this: AudioEncoder, ev: AudioEncoderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AudioEncoder: {
    prototype: AudioEncoder;
    new(init: AudioEncoderInit): AudioEncoder;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioEncoder/isConfigSupported_static)
     */
    isConfigSupported(config: AudioEncoderConfig): Promise<AudioEncoderSupport>;
};

/**
 * The `AudioListener` interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener)
 */
interface AudioListener {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardX)
     */
    readonly forwardX: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardY)
     */
    readonly forwardY: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/forwardZ)
     */
    readonly forwardZ: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionX)
     */
    readonly positionX: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionY)
     */
    readonly positionY: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/positionZ)
     */
    readonly positionZ: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upX)
     */
    readonly upX: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upY)
     */
    readonly upY: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/upZ)
     */
    readonly upZ: AudioParam;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/setOrientation)
     */
    setOrientation(x: number, y: number, z: number, xUp: number, yUp: number, zUp: number): void;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioListener/setPosition)
     */
    setPosition(x: number, y: number, z: number): void;
}

declare var AudioListener: {
    prototype: AudioListener;
    new(): AudioListener;
};

/**
 * The **`AudioNode`** interface is a generic interface for representing an audio processing module.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode)
 */
interface AudioNode extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCount)
     */
    channelCount: number;
    /**
     * Type: ChannelCountMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelCountMode)
     */
    channelCountMode: ChannelCountMode;
    /**
     * Type: ChannelInterpretation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/channelInterpretation)
     */
    channelInterpretation: ChannelInterpretation;
    /**
     * Type: BaseAudioContext
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/context)
     */
    readonly context: BaseAudioContext;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfInputs)
     */
    readonly numberOfInputs: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/numberOfOutputs)
     */
    readonly numberOfOutputs: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/connect)
     */
    connect(destinationNode: AudioNode, output?: number, input?: number): AudioNode;
    connect(destinationParam: AudioParam, output?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioNode/disconnect)
     */
    disconnect(): void;
    disconnect(output: number): void;
    disconnect(destinationNode: AudioNode): void;
    disconnect(destinationNode: AudioNode, output: number): void;
    disconnect(destinationNode: AudioNode, output: number, input: number): void;
    disconnect(destinationParam: AudioParam): void;
    disconnect(destinationParam: AudioParam, output: number): void;
}

declare var AudioNode: {
    prototype: AudioNode;
    new(): AudioNode;
};

/**
 * The Web Audio API's `AudioParam` interface represents an audio-related parameter, usually a parameter of an AudioNode (such as GainNode.gain).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam)
 */
interface AudioParam {
    /** Type: AutomationRate */
    automationRate: AutomationRate;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/defaultValue)
     */
    readonly defaultValue: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/maxValue)
     */
    readonly maxValue: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/minValue)
     */
    readonly minValue: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/value)
     */
    value: number;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelAndHoldAtTime)
     */
    cancelAndHoldAtTime(cancelTime: number): AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/cancelScheduledValues)
     */
    cancelScheduledValues(cancelTime: number): AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/exponentialRampToValueAtTime)
     */
    exponentialRampToValueAtTime(value: number, endTime: number): AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/linearRampToValueAtTime)
     */
    linearRampToValueAtTime(value: number, endTime: number): AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setTargetAtTime)
     */
    setTargetAtTime(target: number, startTime: number, timeConstant: number): AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueAtTime)
     */
    setValueAtTime(value: number, startTime: number): AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParam/setValueCurveAtTime)
     */
    setValueCurveAtTime(values: number[] | Float32Array, startTime: number, duration: number): AudioParam;
}

declare var AudioParam: {
    prototype: AudioParam;
    new(): AudioParam;
};

/**
 * The **`AudioParamMap`** interface of the Web Audio API represents an iterable and read-only set of multiple audio parameters.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioParamMap)
 */
interface AudioParamMap {
    forEach(callbackfn: (value: AudioParam, key: string, parent: AudioParamMap) => void, thisArg?: any): void;
}

declare var AudioParamMap: {
    prototype: AudioParamMap;
    new(): AudioParamMap;
};

/**
 * The `AudioProcessingEvent` interface of the Web Audio API represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.
 * @deprecated As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and is soon to be replaced by AudioWorklet.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent)
 */
interface AudioProcessingEvent extends Event {
    /**
     * Type: AudioBuffer
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/inputBuffer)
     */
    readonly inputBuffer: AudioBuffer;
    /**
     * Type: AudioBuffer
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/outputBuffer)
     */
    readonly outputBuffer: AudioBuffer;
    /**
     * Type: double
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioProcessingEvent/playbackTime)
     */
    readonly playbackTime: number;
}

/** @deprecated */
declare var AudioProcessingEvent: {
    prototype: AudioProcessingEvent;
    new(type: string, eventInitDict: AudioProcessingEventInit): AudioProcessingEvent;
};

interface AudioScheduledSourceNodeEventMap {
    "ended": Event;
}

/**
 * The `AudioScheduledSourceNode` interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode)
 */
interface AudioScheduledSourceNode extends AudioNode {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/ended_event)
     */
    onended: ((this: AudioScheduledSourceNode, ev: Event) => any) | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/start)
     */
    start(when?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioScheduledSourceNode/stop)
     */
    stop(when?: number): void;
    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: AudioScheduledSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AudioScheduledSourceNode: {
    prototype: AudioScheduledSourceNode;
    new(): AudioScheduledSourceNode;
};

/**
 * The **`AudioWorklet`** interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorklet)
 */
interface AudioWorklet extends Worklet {
}

declare var AudioWorklet: {
    prototype: AudioWorklet;
    new(): AudioWorklet;
};

interface AudioWorkletNodeEventMap {
    "processorerror": ErrorEvent;
}

/**
 * The **`AudioWorkletNode`** interface of the Web Audio API represents a base class for a user-defined AudioNode, which can be connected to an audio routing graph along with other nodes.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode)
 */
interface AudioWorkletNode extends AudioNode {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/processorerror_event)
     */
    onprocessorerror: ((this: AudioWorkletNode, ev: ErrorEvent) => any) | null;
    /**
     * Type: AudioParamMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/parameters)
     */
    readonly parameters: AudioParamMap;
    /**
     * Type: MessagePort
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AudioWorkletNode/port)
     */
    readonly port: MessagePort;
    addEventListener<K extends keyof AudioWorkletNodeEventMap>(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioWorkletNodeEventMap>(type: K, listener: (this: AudioWorkletNode, ev: AudioWorkletNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var AudioWorkletNode: {
    prototype: AudioWorkletNode;
    new(context: BaseAudioContext, name: string, options?: AudioWorkletNodeOptions): AudioWorkletNode;
};

/**
 * The **`AuthenticatorAssertionResponse`** interface of the Web Authentication API contains a digital signature from the private key of a particular WebAuthn credential.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse)
 */
interface AuthenticatorAssertionResponse extends AuthenticatorResponse {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/authenticatorData)
     */
    readonly authenticatorData: ArrayBuffer;
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/signature)
     */
    readonly signature: ArrayBuffer;
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAssertionResponse/userHandle)
     */
    readonly userHandle: ArrayBuffer | null;
}

declare var AuthenticatorAssertionResponse: {
    prototype: AuthenticatorAssertionResponse;
    new(): AuthenticatorAssertionResponse;
};

/**
 * The **`AuthenticatorAttestationResponse`** interface of the Web Authentication API is the result of a WebAuthn credential registration.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse)
 */
interface AuthenticatorAttestationResponse extends AuthenticatorResponse {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/attestationObject)
     */
    readonly attestationObject: ArrayBuffer;
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getAuthenticatorData)
     */
    getAuthenticatorData(): ArrayBuffer;
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKey)
     */
    getPublicKey(): ArrayBuffer | null;
    /**
     * Type: COSEAlgorithmIdentifier
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getPublicKeyAlgorithm)
     */
    getPublicKeyAlgorithm(): COSEAlgorithmIdentifier;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorAttestationResponse/getTransports)
     */
    getTransports(): string[];
}

declare var AuthenticatorAttestationResponse: {
    prototype: AuthenticatorAttestationResponse;
    new(): AuthenticatorAttestationResponse;
};

/**
 * The **`AuthenticatorResponse`** interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse)
 */
interface AuthenticatorResponse {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/AuthenticatorResponse/clientDataJSON)
     */
    readonly clientDataJSON: ArrayBuffer;
}

declare var AuthenticatorResponse: {
    prototype: AuthenticatorResponse;
    new(): AuthenticatorResponse;
};

/**
 * The **`BarProp`** interface of the Document Object Model represents the web browser user interface elements that are exposed to scripts in web pages.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp)
 */
interface BarProp {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BarProp/visible)
     */
    readonly visible: boolean;
}

declare var BarProp: {
    prototype: BarProp;
    new(): BarProp;
};

interface BaseAudioContextEventMap {
    "statechange": Event;
}

/**
 * The `BaseAudioContext` interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext)
 */
interface BaseAudioContext extends EventTarget {
    /**
     * Type: AudioWorklet
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/audioWorklet)
     */
    readonly audioWorklet: AudioWorklet;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/currentTime)
     */
    readonly currentTime: number;
    /**
     * Type: AudioDestinationNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/destination)
     */
    readonly destination: AudioDestinationNode;
    /**
     * Type: AudioListener
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/listener)
     */
    readonly listener: AudioListener;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/statechange_event)
     */
    onstatechange: ((this: BaseAudioContext, ev: Event) => any) | null;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/sampleRate)
     */
    readonly sampleRate: number;
    /**
     * Type: AudioContextState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/state)
     */
    readonly state: AudioContextState;
    /**
     * Type: AnalyserNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createAnalyser)
     */
    createAnalyser(): AnalyserNode;
    /**
     * Type: BiquadFilterNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBiquadFilter)
     */
    createBiquadFilter(): BiquadFilterNode;
    /**
     * Type: AudioBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBuffer)
     */
    createBuffer(numberOfChannels: number, length: number, sampleRate: number): AudioBuffer;
    /**
     * Type: AudioBufferSourceNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createBufferSource)
     */
    createBufferSource(): AudioBufferSourceNode;
    /**
     * Type: ChannelMergerNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelMerger)
     */
    createChannelMerger(numberOfInputs?: number): ChannelMergerNode;
    /**
     * Type: ChannelSplitterNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createChannelSplitter)
     */
    createChannelSplitter(numberOfOutputs?: number): ChannelSplitterNode;
    /**
     * Type: ConstantSourceNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConstantSource)
     */
    createConstantSource(): ConstantSourceNode;
    /**
     * Type: ConvolverNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createConvolver)
     */
    createConvolver(): ConvolverNode;
    /**
     * Type: DelayNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDelay)
     */
    createDelay(maxDelayTime?: number): DelayNode;
    /**
     * Type: DynamicsCompressorNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createDynamicsCompressor)
     */
    createDynamicsCompressor(): DynamicsCompressorNode;
    /**
     * Type: GainNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createGain)
     */
    createGain(): GainNode;
    /**
     * Type: IIRFilterNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createIIRFilter)
     */
    createIIRFilter(feedforward: number[], feedback: number[]): IIRFilterNode;
    /**
     * Type: OscillatorNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createOscillator)
     */
    createOscillator(): OscillatorNode;
    /**
     * Type: PannerNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPanner)
     */
    createPanner(): PannerNode;
    /**
     * Type: PeriodicWave
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createPeriodicWave)
     */
    createPeriodicWave(real: number[] | Float32Array, imag: number[] | Float32Array, constraints?: PeriodicWaveConstraints): PeriodicWave;
    /**
     * Type: ScriptProcessorNode
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createScriptProcessor)
     */
    createScriptProcessor(bufferSize?: number, numberOfInputChannels?: number, numberOfOutputChannels?: number): ScriptProcessorNode;
    /**
     * Type: StereoPannerNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createStereoPanner)
     */
    createStereoPanner(): StereoPannerNode;
    /**
     * Type: WaveShaperNode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/createWaveShaper)
     */
    createWaveShaper(): WaveShaperNode;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BaseAudioContext/decodeAudioData)
     */
    decodeAudioData(audioData: ArrayBuffer, successCallback?: DecodeSuccessCallback | null, errorCallback?: DecodeErrorCallback | null): Promise<AudioBuffer>;
    addEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: BaseAudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof BaseAudioContextEventMap>(type: K, listener: (this: BaseAudioContext, ev: BaseAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var BaseAudioContext: {
    prototype: BaseAudioContext;
    new(): BaseAudioContext;
};

/**
 * The **`BeforeUnloadEvent`** interface represents the event object for the Window/beforeunload_event event, which is fired when the current window, contained document, and associated resources are about to be unloaded.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent)
 */
interface BeforeUnloadEvent extends Event {
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BeforeUnloadEvent/returnValue)
     */
    returnValue: any;
}

declare var BeforeUnloadEvent: {
    prototype: BeforeUnloadEvent;
    new(): BeforeUnloadEvent;
};

/**
 * The `BiquadFilterNode` interface represents a simple low-order filter, and is created using the BaseAudioContext/createBiquadFilter method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode)
 */
interface BiquadFilterNode extends AudioNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/Q)
     */
    readonly Q: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/detune)
     */
    readonly detune: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/frequency)
     */
    readonly frequency: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/gain)
     */
    readonly gain: AudioParam;
    /**
     * Type: BiquadFilterType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/type)
     */
    type: BiquadFilterType;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BiquadFilterNode/getFrequencyResponse)
     */
    getFrequencyResponse(frequencyHz: Float32Array<ArrayBuffer>, magResponse: Float32Array<ArrayBuffer>, phaseResponse: Float32Array<ArrayBuffer>): void;
}

declare var BiquadFilterNode: {
    prototype: BiquadFilterNode;
    new(context: BaseAudioContext, options?: BiquadFilterOptions): BiquadFilterNode;
};

/**
 * The **`Blob`** interface represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob)
 */
interface Blob {
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/size)
     */
    readonly size: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/type)
     */
    readonly type: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/arrayBuffer)
     */
    arrayBuffer(): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/bytes)
     */
    bytes(): Promise<Uint8Array<ArrayBuffer>>;
    /**
     * Type: Blob
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/slice)
     */
    slice(start?: number, end?: number, contentType?: string): Blob;
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/stream)
     */
    stream(): ReadableStream<Uint8Array<ArrayBuffer>>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Blob/text)
     */
    text(): Promise<string>;
}

declare var Blob: {
    prototype: Blob;
    new(blobParts?: BlobPart[], options?: BlobPropertyBag): Blob;
};

/**
 * The **`BlobEvent`** interface of the MediaStream Recording API represents events associated with a Blob.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent)
 */
interface BlobEvent extends Event {
    /**
     * Type: Blob
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/data)
     */
    readonly data: Blob;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BlobEvent/timecode)
     */
    readonly timecode: DOMHighResTimeStamp;
}

declare var BlobEvent: {
    prototype: BlobEvent;
    new(type: string, eventInitDict: BlobEventInit): BlobEvent;
};

interface Body {
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/body)
     */
    readonly body: ReadableStream<Uint8Array<ArrayBuffer>> | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bodyUsed)
     */
    readonly bodyUsed: boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/arrayBuffer)
     */
    arrayBuffer(): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/blob)
     */
    blob(): Promise<Blob>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/bytes)
     */
    bytes(): Promise<Uint8Array<ArrayBuffer>>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/formData)
     */
    formData(): Promise<FormData>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/json)
     */
    json(): Promise<any>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/text)
     */
    text(): Promise<string>;
}

interface BroadcastChannelEventMap {
    "message": MessageEvent;
    "messageerror": MessageEvent;
}

/**
 * The **`BroadcastChannel`** interface represents a named channel that any browsing context of a given origin can subscribe to.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel)
 */
interface BroadcastChannel extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/name)
     */
    readonly name: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/message_event)
     */
    onmessage: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/messageerror_event)
     */
    onmessageerror: ((this: BroadcastChannel, ev: MessageEvent) => any) | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/BroadcastChannel/postMessage)
     */
    postMessage(message: any): void;
    addEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof BroadcastChannelEventMap>(type: K, listener: (this: BroadcastChannel, ev: BroadcastChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var BroadcastChannel: {
    prototype: BroadcastChannel;
    new(name: string): BroadcastChannel;
};

/**
 * The **`ByteLengthQueuingStrategy`** interface of the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy)
 */
interface ByteLengthQueuingStrategy extends QueuingStrategy<ArrayBufferView> {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/highWaterMark)
     */
    readonly highWaterMark: number;
    /**
     * Type: Function
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ByteLengthQueuingStrategy/size)
     */
    readonly size: QueuingStrategySize<ArrayBufferView>;
}

declare var ByteLengthQueuingStrategy: {
    prototype: ByteLengthQueuingStrategy;
    new(init: QueuingStrategyInit): ByteLengthQueuingStrategy;
};

/**
 * The **`CDATASection`** interface represents a CDATA section that can be used within XML to include extended portions of unescaped text.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CDATASection)
 */
interface CDATASection extends Text {
}

declare var CDATASection: {
    prototype: CDATASection;
    new(): CDATASection;
};

/**
 * The `CSPViolationReportBody` interface is an extension of the Reporting API that represents the body of a Content Security Policy (CSP) violation report.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody)
 */
interface CSPViolationReportBody extends ReportBody {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/blockedURL)
     */
    readonly blockedURL: string | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/columnNumber)
     */
    readonly columnNumber: number | null;
    /**
     * Type: SecurityPolicyViolationEventDisposition
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/disposition)
     */
    readonly disposition: SecurityPolicyViolationEventDisposition;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/documentURL)
     */
    readonly documentURL: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/effectiveDirective)
     */
    readonly effectiveDirective: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/lineNumber)
     */
    readonly lineNumber: number | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/originalPolicy)
     */
    readonly originalPolicy: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/referrer)
     */
    readonly referrer: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/sample)
     */
    readonly sample: string | null;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/sourceFile)
     */
    readonly sourceFile: string | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/statusCode)
     */
    readonly statusCode: number;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSPViolationReportBody/toJSON)
     */
    toJSON(): any;
}

declare var CSPViolationReportBody: {
    prototype: CSPViolationReportBody;
    new(): CSPViolationReportBody;
};

/**
 * The **`CSSAnimation`** interface of the Web Animations API represents an Animation object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation)
 */
interface CSSAnimation extends Animation {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSAnimation/animationName)
     */
    readonly animationName: string;
    addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSAnimation, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSAnimation, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var CSSAnimation: {
    prototype: CSSAnimation;
    new(): CSSAnimation;
};

/**
 * An object implementing the **`CSSConditionRule`** interface represents a single condition CSS at-rule, which consists of a condition and a statement block.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule)
 */
interface CSSConditionRule extends CSSGroupingRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSConditionRule/conditionText)
     */
    readonly conditionText: string;
}

declare var CSSConditionRule: {
    prototype: CSSConditionRule;
    new(): CSSConditionRule;
};

/**
 * The **`CSSContainerRule`** interface represents a single CSS @container rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule)
 */
interface CSSContainerRule extends CSSConditionRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerName)
     */
    readonly containerName: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSContainerRule/containerQuery)
     */
    readonly containerQuery: string;
}

declare var CSSContainerRule: {
    prototype: CSSContainerRule;
    new(): CSSContainerRule;
};

/**
 * The **`CSSCounterStyleRule`** interface represents an @counter-style at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule)
 */
interface CSSCounterStyleRule extends CSSRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/additiveSymbols)
     */
    additiveSymbols: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/fallback)
     */
    fallback: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/name)
     */
    name: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/negative)
     */
    negative: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/pad)
     */
    pad: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/prefix)
     */
    prefix: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/range)
     */
    range: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/speakAs)
     */
    speakAs: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/suffix)
     */
    suffix: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/symbols)
     */
    symbols: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSCounterStyleRule/system)
     */
    system: string;
}

declare var CSSCounterStyleRule: {
    prototype: CSSCounterStyleRule;
    new(): CSSCounterStyleRule;
};

/**
 * The **`CSSFontFaceRule`** interface represents an @font-face at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule)
 */
interface CSSFontFaceRule extends CSSRule {
    /**
     * Type: CSSFontFaceDescriptors
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFaceRule/style)
     */
    get style(): CSSStyleDeclaration;
    set style(cssText: string);
}

declare var CSSFontFaceRule: {
    prototype: CSSFontFaceRule;
    new(): CSSFontFaceRule;
};

/**
 * The **`CSSFontFeatureValuesRule`** interface represents an @font-feature-values at-rule, letting developers assign for each font face a common name to specify features indices to be used in font-variant-alternates.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule)
 */
interface CSSFontFeatureValuesRule extends CSSRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontFeatureValuesRule/fontFamily)
     */
    fontFamily: string;
}

declare var CSSFontFeatureValuesRule: {
    prototype: CSSFontFeatureValuesRule;
    new(): CSSFontFeatureValuesRule;
};

/**
 * The **`CSSFontPaletteValuesRule`** interface represents an @font-palette-values at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule)
 */
interface CSSFontPaletteValuesRule extends CSSRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/basePalette)
     */
    readonly basePalette: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/fontFamily)
     */
    readonly fontFamily: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/name)
     */
    readonly name: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSFontPaletteValuesRule/overrideColors)
     */
    readonly overrideColors: string;
}

declare var CSSFontPaletteValuesRule: {
    prototype: CSSFontPaletteValuesRule;
    new(): CSSFontPaletteValuesRule;
};

/**
 * The **`CSSGroupingRule`** interface of the CSS Object Model represents any CSS at-rule that contains other rules nested within it.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule)
 */
interface CSSGroupingRule extends CSSRule {
    /**
     * Type: CSSRuleList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/cssRules)
     */
    readonly cssRules: CSSRuleList;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/deleteRule)
     */
    deleteRule(index: number): void;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSGroupingRule/insertRule)
     */
    insertRule(rule: string, index?: number): number;
}

declare var CSSGroupingRule: {
    prototype: CSSGroupingRule;
    new(): CSSGroupingRule;
};

/**
 * The **`CSSImageValue`** interface of the CSS Typed Object Model API represents values for properties that take an image, for example background-image, list-style-image, or border-image-source.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImageValue)
 */
interface CSSImageValue extends CSSStyleValue {
}

declare var CSSImageValue: {
    prototype: CSSImageValue;
    new(): CSSImageValue;
};

/**
 * The **`CSSImportRule`** interface represents an @import at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule)
 */
interface CSSImportRule extends CSSRule {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/href)
     */
    readonly href: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/layerName)
     */
    readonly layerName: string | null;
    /**
     * Type: MediaList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/media)
     */
    get media(): MediaList;
    set media(mediaText: string);
    /**
     * Type: CSSStyleSheet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/styleSheet)
     */
    readonly styleSheet: CSSStyleSheet | null;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSImportRule/supportsText)
     */
    readonly supportsText: string | null;
}

declare var CSSImportRule: {
    prototype: CSSImportRule;
    new(): CSSImportRule;
};

/**
 * The **`CSSKeyframeRule`** interface describes an object representing a set of styles for a given keyframe.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule)
 */
interface CSSKeyframeRule extends CSSRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/keyText)
     */
    keyText: string;
    /**
     * Type: CSSStyleProperties
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframeRule/style)
     */
    get style(): CSSStyleDeclaration;
    set style(cssText: string);
}

declare var CSSKeyframeRule: {
    prototype: CSSKeyframeRule;
    new(): CSSKeyframeRule;
};

/**
 * The **`CSSKeyframesRule`** interface describes an object representing a complete set of keyframes for a CSS animation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule)
 */
interface CSSKeyframesRule extends CSSRule {
    /**
     * Type: CSSRuleList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/cssRules)
     */
    readonly cssRules: CSSRuleList;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/length)
     */
    readonly length: number;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/name)
     */
    name: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/appendRule)
     */
    appendRule(rule: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/deleteRule)
     */
    deleteRule(select: string): void;
    /**
     * Type: CSSKeyframeRule
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeyframesRule/findRule)
     */
    findRule(select: string): CSSKeyframeRule | null;
    [index: number]: CSSKeyframeRule;
}

declare var CSSKeyframesRule: {
    prototype: CSSKeyframesRule;
    new(): CSSKeyframesRule;
};

/**
 * The **`CSSKeywordValue`** interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue)
 */
interface CSSKeywordValue extends CSSStyleValue {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSKeywordValue/value)
     */
    value: string;
}

declare var CSSKeywordValue: {
    prototype: CSSKeywordValue;
    new(value: string): CSSKeywordValue;
};

/**
 * The **`CSSLayerBlockRule`** represents a @layer block rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule)
 */
interface CSSLayerBlockRule extends CSSGroupingRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerBlockRule/name)
     */
    readonly name: string;
}

declare var CSSLayerBlockRule: {
    prototype: CSSLayerBlockRule;
    new(): CSSLayerBlockRule;
};

/**
 * The **`CSSLayerStatementRule`** represents a @layer statement rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule)
 */
interface CSSLayerStatementRule extends CSSRule {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSLayerStatementRule/nameList)
     */
    readonly nameList: ReadonlyArray<string>;
}

declare var CSSLayerStatementRule: {
    prototype: CSSLayerStatementRule;
    new(): CSSLayerStatementRule;
};

interface CSSMathClamp extends CSSMathValue {
    /** Type: CSSNumericValue */
    readonly lower: CSSNumericValue;
    /** Type: CSSNumericValue */
    readonly upper: CSSNumericValue;
    /** Type: CSSNumericValue */
    readonly value: CSSNumericValue;
}

declare var CSSMathClamp: {
    prototype: CSSMathClamp;
    new(lower: CSSNumberish, value: CSSNumberish, upper: CSSNumberish): CSSMathClamp;
};

/**
 * The **`CSSMathInvert`** interface of the CSS Typed Object Model API represents a CSS calc used as `calc(1 / <value>).` It inherits properties and methods from its parent CSSNumericValue.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert)
 */
interface CSSMathInvert extends CSSMathValue {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathInvert/value)
     */
    readonly value: CSSNumericValue;
}

declare var CSSMathInvert: {
    prototype: CSSMathInvert;
    new(arg: CSSNumberish): CSSMathInvert;
};

/**
 * The **`CSSMathMax`** interface of the CSS Typed Object Model API represents the CSS max function.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax)
 */
interface CSSMathMax extends CSSMathValue {
    /**
     * Type: CSSNumericArray
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMax/values)
     */
    readonly values: CSSNumericArray;
}

declare var CSSMathMax: {
    prototype: CSSMathMax;
    new(...args: CSSNumberish[]): CSSMathMax;
};

/**
 * The **`CSSMathMin`** interface of the CSS Typed Object Model API represents the CSS min function.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin)
 */
interface CSSMathMin extends CSSMathValue {
    /**
     * Type: CSSNumericArray
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathMin/values)
     */
    readonly values: CSSNumericArray;
}

declare var CSSMathMin: {
    prototype: CSSMathMin;
    new(...args: CSSNumberish[]): CSSMathMin;
};

/**
 * The **`CSSMathNegate`** interface of the CSS Typed Object Model API negates the value passed into it.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate)
 */
interface CSSMathNegate extends CSSMathValue {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathNegate/value)
     */
    readonly value: CSSNumericValue;
}

declare var CSSMathNegate: {
    prototype: CSSMathNegate;
    new(arg: CSSNumberish): CSSMathNegate;
};

/**
 * The **`CSSMathProduct`** interface of the CSS Typed Object Model API represents the result obtained by calling CSSNumericValue.add, CSSNumericValue.sub, or CSSNumericValue.toSum on CSSNumericValue.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct)
 */
interface CSSMathProduct extends CSSMathValue {
    /**
     * Type: CSSNumericArray
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathProduct/values)
     */
    readonly values: CSSNumericArray;
}

declare var CSSMathProduct: {
    prototype: CSSMathProduct;
    new(...args: CSSNumberish[]): CSSMathProduct;
};

/**
 * The **`CSSMathSum`** interface of the CSS Typed Object Model API represents the result obtained by calling CSSNumericValue.add, CSSNumericValue.sub, or CSSNumericValue.toSum on CSSNumericValue.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum)
 */
interface CSSMathSum extends CSSMathValue {
    /**
     * Type: CSSNumericArray
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathSum/values)
     */
    readonly values: CSSNumericArray;
}

declare var CSSMathSum: {
    prototype: CSSMathSum;
    new(...args: CSSNumberish[]): CSSMathSum;
};

/**
 * The **`CSSMathValue`** interface of the CSS Typed Object Model API a base class for classes representing complex numeric values.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue)
 */
interface CSSMathValue extends CSSNumericValue {
    /**
     * Type: CSSMathOperator
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMathValue/operator)
     */
    readonly operator: CSSMathOperator;
}

declare var CSSMathValue: {
    prototype: CSSMathValue;
    new(): CSSMathValue;
};

/**
 * The **`CSSMatrixComponent`** interface of the CSS Typed Object Model API represents the matrix() and matrix3d() values of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent)
 */
interface CSSMatrixComponent extends CSSTransformComponent {
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMatrixComponent/matrix)
     */
    matrix: DOMMatrix;
}

declare var CSSMatrixComponent: {
    prototype: CSSMatrixComponent;
    new(matrix: DOMMatrixReadOnly, options?: CSSMatrixComponentOptions): CSSMatrixComponent;
};

/**
 * The **`CSSMediaRule`** interface represents a single CSS @media rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule)
 */
interface CSSMediaRule extends CSSConditionRule {
    /**
     * Type: MediaList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSMediaRule/media)
     */
    get media(): MediaList;
    set media(mediaText: string);
}

declare var CSSMediaRule: {
    prototype: CSSMediaRule;
    new(): CSSMediaRule;
};

/**
 * The **`CSSNamespaceRule`** interface describes an object representing a single CSS @namespace at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule)
 */
interface CSSNamespaceRule extends CSSRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/namespaceURI)
     */
    readonly namespaceURI: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNamespaceRule/prefix)
     */
    readonly prefix: string;
}

declare var CSSNamespaceRule: {
    prototype: CSSNamespaceRule;
    new(): CSSNamespaceRule;
};

/**
 * The **`CSSNestedDeclarations`** interface of the CSS Rule API is used to group nested CSSRules.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNestedDeclarations)
 */
interface CSSNestedDeclarations extends CSSRule {
    /**
     * Type: CSSStyleProperties
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNestedDeclarations/style)
     */
    get style(): CSSStyleDeclaration;
    set style(cssText: string);
}

declare var CSSNestedDeclarations: {
    prototype: CSSNestedDeclarations;
    new(): CSSNestedDeclarations;
};

/**
 * The **`CSSNumericArray`** interface of the CSS Typed Object Model API contains a list of CSSNumericValue objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray)
 */
interface CSSNumericArray {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericArray/length)
     */
    readonly length: number;
    forEach(callbackfn: (value: CSSNumericValue, key: number, parent: CSSNumericArray) => void, thisArg?: any): void;
    [index: number]: CSSNumericValue;
}

declare var CSSNumericArray: {
    prototype: CSSNumericArray;
    new(): CSSNumericArray;
};

/**
 * The **`CSSNumericValue`** interface of the CSS Typed Object Model API represents operations that all numeric values can perform.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue)
 */
interface CSSNumericValue extends CSSStyleValue {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/add)
     */
    add(...values: CSSNumberish[]): CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/div)
     */
    div(...values: CSSNumberish[]): CSSNumericValue;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/equals)
     */
    equals(...value: CSSNumberish[]): boolean;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/max)
     */
    max(...values: CSSNumberish[]): CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/min)
     */
    min(...values: CSSNumberish[]): CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/mul)
     */
    mul(...values: CSSNumberish[]): CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/sub)
     */
    sub(...values: CSSNumberish[]): CSSNumericValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/to)
     */
    to(unit: string): CSSUnitValue;
    /**
     * Type: CSSMathSum
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/toSum)
     */
    toSum(...units: string[]): CSSMathSum;
    /**
     * Type: CSSNumericType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/type)
     */
    type(): CSSNumericType;
}

declare var CSSNumericValue: {
    prototype: CSSNumericValue;
    new(): CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSNumericValue/parse_static)
     */
    parse(cssText: string): CSSNumericValue;
};

/**
 * **`CSSPageRule`** represents a single CSS @page rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule)
 */
interface CSSPageRule extends CSSGroupingRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/selectorText)
     */
    selectorText: string;
    /**
     * Type: CSSPageDescriptors
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPageRule/style)
     */
    get style(): CSSStyleDeclaration;
    set style(cssText: string);
}

declare var CSSPageRule: {
    prototype: CSSPageRule;
    new(): CSSPageRule;
};

/**
 * The **`CSSPerspective`** interface of the CSS Typed Object Model API represents the perspective() value of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective)
 */
interface CSSPerspective extends CSSTransformComponent {
    /**
     * Type: CSSPerspectiveValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPerspective/length)
     */
    length: CSSPerspectiveValue;
}

declare var CSSPerspective: {
    prototype: CSSPerspective;
    new(length: CSSPerspectiveValue): CSSPerspective;
};

/**
 * The **`CSSPropertyRule`** interface of the CSS Properties and Values API represents a single CSS @property rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule)
 */
interface CSSPropertyRule extends CSSRule {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/inherits)
     */
    readonly inherits: boolean;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/initialValue)
     */
    readonly initialValue: string | null;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/name)
     */
    readonly name: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSPropertyRule/syntax)
     */
    readonly syntax: string;
}

declare var CSSPropertyRule: {
    prototype: CSSPropertyRule;
    new(): CSSPropertyRule;
};

/**
 * The **`CSSRotate`** interface of the CSS Typed Object Model API represents the rotate value of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate)
 */
interface CSSRotate extends CSSTransformComponent {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/angle)
     */
    angle: CSSNumericValue;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/x)
     */
    x: CSSNumberish;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/y)
     */
    y: CSSNumberish;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRotate/z)
     */
    z: CSSNumberish;
}

declare var CSSRotate: {
    prototype: CSSRotate;
    new(angle: CSSNumericValue): CSSRotate;
    new(x: CSSNumberish, y: CSSNumberish, z: CSSNumberish, angle: CSSNumericValue): CSSRotate;
};

/**
 * The **`CSSRule`** interface represents a single CSS rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule)
 */
interface CSSRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/cssText)
     */
    cssText: string;
    /**
     * Type: CSSRule
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentRule)
     */
    readonly parentRule: CSSRule | null;
    /**
     * Type: CSSStyleSheet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/parentStyleSheet)
     */
    readonly parentStyleSheet: CSSStyleSheet | null;
    /**
     * Type: unsigned short
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRule/type)
     */
    readonly type: number;
    /** Type: unsigned short */
    readonly STYLE_RULE: 1;
    /** Type: unsigned short */
    readonly CHARSET_RULE: 2;
    /** Type: unsigned short */
    readonly IMPORT_RULE: 3;
    /** Type: unsigned short */
    readonly MEDIA_RULE: 4;
    /** Type: unsigned short */
    readonly FONT_FACE_RULE: 5;
    /** Type: unsigned short */
    readonly PAGE_RULE: 6;
    /** Type: unsigned short */
    readonly NAMESPACE_RULE: 10;
    /** Type: unsigned short */
    readonly KEYFRAMES_RULE: 7;
    /** Type: unsigned short */
    readonly KEYFRAME_RULE: 8;
    /** Type: unsigned short */
    readonly SUPPORTS_RULE: 12;
    /** Type: unsigned short */
    readonly COUNTER_STYLE_RULE: 11;
    /** Type: unsigned short */
    readonly FONT_FEATURE_VALUES_RULE: 14;
}

declare var CSSRule: {
    prototype: CSSRule;
    new(): CSSRule;
    /** Type: unsigned short */
    readonly STYLE_RULE: 1;
    /** Type: unsigned short */
    readonly CHARSET_RULE: 2;
    /** Type: unsigned short */
    readonly IMPORT_RULE: 3;
    /** Type: unsigned short */
    readonly MEDIA_RULE: 4;
    /** Type: unsigned short */
    readonly FONT_FACE_RULE: 5;
    /** Type: unsigned short */
    readonly PAGE_RULE: 6;
    /** Type: unsigned short */
    readonly NAMESPACE_RULE: 10;
    /** Type: unsigned short */
    readonly KEYFRAMES_RULE: 7;
    /** Type: unsigned short */
    readonly KEYFRAME_RULE: 8;
    /** Type: unsigned short */
    readonly SUPPORTS_RULE: 12;
    /** Type: unsigned short */
    readonly COUNTER_STYLE_RULE: 11;
    /** Type: unsigned short */
    readonly FONT_FEATURE_VALUES_RULE: 14;
};

/**
 * A `CSSRuleList` represents an ordered collection of read-only CSSRule objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList)
 */
interface CSSRuleList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/length)
     */
    readonly length: number;
    /**
     * Type: CSSRule
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSRuleList/item)
     */
    item(index: number): CSSRule | null;
    [index: number]: CSSRule;
}

declare var CSSRuleList: {
    prototype: CSSRuleList;
    new(): CSSRuleList;
};

/**
 * The **`CSSScale`** interface of the CSS Typed Object Model API represents the scale() and scale3d() values of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale)
 */
interface CSSScale extends CSSTransformComponent {
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/x)
     */
    x: CSSNumberish;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/y)
     */
    y: CSSNumberish;
    /**
     * Type: CSSNumberish
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScale/z)
     */
    z: CSSNumberish;
}

declare var CSSScale: {
    prototype: CSSScale;
    new(x: CSSNumberish, y: CSSNumberish, z?: CSSNumberish): CSSScale;
};

/**
 * The **`CSSScopeRule`** interface of the CSS Object Model represents a CSS @scope at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule)
 */
interface CSSScopeRule extends CSSGroupingRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule/end)
     */
    readonly end: string | null;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSScopeRule/start)
     */
    readonly start: string | null;
}

declare var CSSScopeRule: {
    prototype: CSSScopeRule;
    new(): CSSScopeRule;
};

/**
 * The **`CSSSkew`** interface of the CSS Typed Object Model API is part of the CSSTransformValue interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew)
 */
interface CSSSkew extends CSSTransformComponent {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ax)
     */
    ax: CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkew/ay)
     */
    ay: CSSNumericValue;
}

declare var CSSSkew: {
    prototype: CSSSkew;
    new(ax: CSSNumericValue, ay: CSSNumericValue): CSSSkew;
};

/**
 * The **`CSSSkewX`** interface of the CSS Typed Object Model API represents the `skewX()` value of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX)
 */
interface CSSSkewX extends CSSTransformComponent {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewX/ax)
     */
    ax: CSSNumericValue;
}

declare var CSSSkewX: {
    prototype: CSSSkewX;
    new(ax: CSSNumericValue): CSSSkewX;
};

/**
 * The **`CSSSkewY`** interface of the CSS Typed Object Model API represents the `skewY()` value of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY)
 */
interface CSSSkewY extends CSSTransformComponent {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSkewY/ay)
     */
    ay: CSSNumericValue;
}

declare var CSSSkewY: {
    prototype: CSSSkewY;
    new(ay: CSSNumericValue): CSSSkewY;
};

/**
 * The **`CSSStartingStyleRule`** interface of the CSS Object Model represents a CSS @starting-style at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStartingStyleRule)
 */
interface CSSStartingStyleRule extends CSSGroupingRule {
}

declare var CSSStartingStyleRule: {
    prototype: CSSStartingStyleRule;
    new(): CSSStartingStyleRule;
};

/**
 * The **`CSSStyleDeclaration`** interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration)
 */
interface CSSStyleDeclaration {
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/accent-color) */
    accentColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content) */
    alignContent: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items) */
    alignItems: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self) */
    alignSelf: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/alignment-baseline) */
    alignmentBaseline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/all) */
    all: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation) */
    animation: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-composition) */
    animationComposition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay) */
    animationDelay: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction) */
    animationDirection: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration) */
    animationDuration: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode) */
    animationFillMode: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count) */
    animationIterationCount: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name) */
    animationName: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state) */
    animationPlayState: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function) */
    animationTimingFunction: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance) */
    appearance: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/aspect-ratio) */
    aspectRatio: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backdrop-filter) */
    backdropFilter: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility) */
    backfaceVisibility: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background) */
    background: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-attachment) */
    backgroundAttachment: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-blend-mode) */
    backgroundBlendMode: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip) */
    backgroundClip: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-color) */
    backgroundColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-image) */
    backgroundImage: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin) */
    backgroundOrigin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position) */
    backgroundPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-x) */
    backgroundPositionX: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-position-y) */
    backgroundPositionY: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-repeat) */
    backgroundRepeat: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size) */
    backgroundSize: string;
    baselineShift: string;
    baselineSource: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/block-size) */
    blockSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border) */
    border: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block) */
    borderBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-color) */
    borderBlockColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end) */
    borderBlockEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-color) */
    borderBlockEndColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-style) */
    borderBlockEndStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-end-width) */
    borderBlockEndWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start) */
    borderBlockStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-color) */
    borderBlockStartColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-style) */
    borderBlockStartStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-start-width) */
    borderBlockStartWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-style) */
    borderBlockStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-block-width) */
    borderBlockWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom) */
    borderBottom: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-color) */
    borderBottomColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius) */
    borderBottomLeftRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius) */
    borderBottomRightRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-style) */
    borderBottomStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-width) */
    borderBottomWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-collapse) */
    borderCollapse: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-color) */
    borderColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius) */
    borderEndEndRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius) */
    borderEndStartRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image) */
    borderImage: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-outset) */
    borderImageOutset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-repeat) */
    borderImageRepeat: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-slice) */
    borderImageSlice: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-source) */
    borderImageSource: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-image-width) */
    borderImageWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline) */
    borderInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-color) */
    borderInlineColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end) */
    borderInlineEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color) */
    borderInlineEndColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style) */
    borderInlineEndStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width) */
    borderInlineEndWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start) */
    borderInlineStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color) */
    borderInlineStartColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style) */
    borderInlineStartStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width) */
    borderInlineStartWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-style) */
    borderInlineStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-inline-width) */
    borderInlineWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left) */
    borderLeft: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-color) */
    borderLeftColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-style) */
    borderLeftStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-left-width) */
    borderLeftWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius) */
    borderRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right) */
    borderRight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-color) */
    borderRightColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-style) */
    borderRightStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-right-width) */
    borderRightWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-spacing) */
    borderSpacing: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius) */
    borderStartEndRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius) */
    borderStartStartRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-style) */
    borderStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top) */
    borderTop: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-color) */
    borderTopColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius) */
    borderTopLeftRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius) */
    borderTopRightRadius: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-style) */
    borderTopStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-width) */
    borderTopWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-width) */
    borderWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/bottom) */
    bottom: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-decoration-break) */
    boxDecorationBreak: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow) */
    boxShadow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing) */
    boxSizing: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-after) */
    breakAfter: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-before) */
    breakBefore: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/break-inside) */
    breakInside: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caption-side) */
    captionSide: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/caret-color) */
    caretColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clear) */
    clear: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip)
     */
    clip: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-path) */
    clipPath: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/clip-rule) */
    clipRule: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color) */
    color: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-interpolation) */
    colorInterpolation: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-interpolation-filters) */
    colorInterpolationFilters: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/color-scheme) */
    colorScheme: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-count) */
    columnCount: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-fill) */
    columnFill: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-gap) */
    columnGap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule) */
    columnRule: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-color) */
    columnRuleColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-style) */
    columnRuleStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-rule-width) */
    columnRuleWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-span) */
    columnSpan: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/column-width) */
    columnWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/columns) */
    columns: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain) */
    contain: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-block-size) */
    containIntrinsicBlockSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height) */
    containIntrinsicHeight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-inline-size) */
    containIntrinsicInlineSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size) */
    containIntrinsicSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width) */
    containIntrinsicWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container) */
    container: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-name) */
    containerName: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/container-type) */
    containerType: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content) */
    content: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/content-visibility) */
    contentVisibility: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-increment) */
    counterIncrement: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-reset) */
    counterReset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/counter-set) */
    counterSet: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssFloat) */
    cssFloat: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/cssText)
     */
    cssText: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cursor) */
    cursor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cx) */
    cx: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/cy) */
    cy: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/d) */
    d: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/direction) */
    direction: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/display) */
    display: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/dominant-baseline) */
    dominantBaseline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/empty-cells) */
    emptyCells: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill) */
    fill: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill-opacity) */
    fillOpacity: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/fill-rule) */
    fillRule: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter) */
    filter: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex) */
    flex: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis) */
    flexBasis: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction) */
    flexDirection: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow) */
    flexFlow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow) */
    flexGrow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink) */
    flexShrink: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap) */
    flexWrap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/float) */
    float: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flood-color) */
    floodColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flood-opacity) */
    floodOpacity: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font) */
    font: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-family) */
    fontFamily: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-feature-settings) */
    fontFeatureSettings: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-kerning) */
    fontKerning: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing) */
    fontOpticalSizing: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-palette) */
    fontPalette: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size) */
    fontSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-size-adjust) */
    fontSizeAdjust: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-stretch)
     */
    fontStretch: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-style) */
    fontStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis) */
    fontSynthesis: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps) */
    fontSynthesisSmallCaps: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style) */
    fontSynthesisStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight) */
    fontSynthesisWeight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant) */
    fontVariant: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates) */
    fontVariantAlternates: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-caps) */
    fontVariantCaps: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian) */
    fontVariantEastAsian: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures) */
    fontVariantLigatures: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric) */
    fontVariantNumeric: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variant-position) */
    fontVariantPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-variation-settings) */
    fontVariationSettings: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/font-weight) */
    fontWeight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust) */
    forcedColorAdjust: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/gap) */
    gap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid) */
    grid: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-area) */
    gridArea: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns) */
    gridAutoColumns: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow) */
    gridAutoFlow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows) */
    gridAutoRows: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column) */
    gridColumn: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-end) */
    gridColumnEnd: string;
    /** @deprecated This is a legacy alias of `columnGap`. */
    gridColumnGap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-column-start) */
    gridColumnStart: string;
    /** @deprecated This is a legacy alias of `gap`. */
    gridGap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row) */
    gridRow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-end) */
    gridRowEnd: string;
    /** @deprecated This is a legacy alias of `rowGap`. */
    gridRowGap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-row-start) */
    gridRowStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template) */
    gridTemplate: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-areas) */
    gridTemplateAreas: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-columns) */
    gridTemplateColumns: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/grid-template-rows) */
    gridTemplateRows: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/height) */
    height: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-character) */
    hyphenateCharacter: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphenate-limit-chars) */
    hyphenateLimitChars: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/hyphens) */
    hyphens: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-orientation)
     */
    imageOrientation: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/image-rendering) */
    imageRendering: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inline-size) */
    inlineSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset) */
    inset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block) */
    insetBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-end) */
    insetBlockEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-block-start) */
    insetBlockStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline) */
    insetInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-end) */
    insetInlineEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/inset-inline-start) */
    insetInlineStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/isolation) */
    isolation: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content) */
    justifyContent: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-items) */
    justifyItems: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-self) */
    justifySelf: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/left) */
    left: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/length)
     */
    readonly length: number;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/letter-spacing) */
    letterSpacing: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/lighting-color) */
    lightingColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-break) */
    lineBreak: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-height) */
    lineHeight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style) */
    listStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-image) */
    listStyleImage: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-position) */
    listStylePosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/list-style-type) */
    listStyleType: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin) */
    margin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block) */
    marginBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-end) */
    marginBlockEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-block-start) */
    marginBlockStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-bottom) */
    marginBottom: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline) */
    marginInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-end) */
    marginInlineEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-inline-start) */
    marginInlineStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-left) */
    marginLeft: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-right) */
    marginRight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/margin-top) */
    marginTop: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker) */
    marker: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-end) */
    markerEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-mid) */
    markerMid: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/marker-start) */
    markerStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask) */
    mask: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip) */
    maskClip: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite) */
    maskComposite: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image) */
    maskImage: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-mode) */
    maskMode: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin) */
    maskOrigin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position) */
    maskPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat) */
    maskRepeat: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size) */
    maskSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-type) */
    maskType: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-depth) */
    mathDepth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/math-style) */
    mathStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-block-size) */
    maxBlockSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-height) */
    maxHeight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-inline-size) */
    maxInlineSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/max-width) */
    maxWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-block-size) */
    minBlockSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-height) */
    minHeight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-inline-size) */
    minInlineSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/min-width) */
    minWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode) */
    mixBlendMode: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-fit) */
    objectFit: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/object-position) */
    objectPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset) */
    offset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-anchor) */
    offsetAnchor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-distance) */
    offsetDistance: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-path) */
    offsetPath: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-position) */
    offsetPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/offset-rotate) */
    offsetRotate: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/opacity) */
    opacity: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order) */
    order: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/orphans) */
    orphans: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline) */
    outline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-color) */
    outlineColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-offset) */
    outlineOffset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-style) */
    outlineStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/outline-width) */
    outlineWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow) */
    overflow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-anchor) */
    overflowAnchor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-block) */
    overflowBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin) */
    overflowClipMargin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-inline) */
    overflowInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap) */
    overflowWrap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-x) */
    overflowX: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-y) */
    overflowY: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior) */
    overscrollBehavior: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block) */
    overscrollBehaviorBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline) */
    overscrollBehaviorInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x) */
    overscrollBehaviorX: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y) */
    overscrollBehaviorY: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding) */
    padding: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block) */
    paddingBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-end) */
    paddingBlockEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-block-start) */
    paddingBlockStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-bottom) */
    paddingBottom: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline) */
    paddingInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-end) */
    paddingInlineEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-inline-start) */
    paddingInlineStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-left) */
    paddingLeft: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-right) */
    paddingRight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/padding-top) */
    paddingTop: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page) */
    page: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-after)
     */
    pageBreakAfter: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-before)
     */
    pageBreakBefore: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/page-break-inside)
     */
    pageBreakInside: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/paint-order) */
    paintOrder: string;
    /**
     * Type: CSSRule
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/parentRule)
     */
    readonly parentRule: CSSRule | null;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective) */
    perspective: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin) */
    perspectiveOrigin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-content) */
    placeContent: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-items) */
    placeItems: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/place-self) */
    placeSelf: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/pointer-events) */
    pointerEvents: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/position) */
    position: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/print-color-adjust) */
    printColorAdjust: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/quotes) */
    quotes: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/r) */
    r: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/resize) */
    resize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/right) */
    right: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rotate) */
    rotate: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/row-gap) */
    rowGap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-align) */
    rubyAlign: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ruby-position) */
    rubyPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/rx) */
    rx: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/ry) */
    ry: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scale) */
    scale: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-behavior) */
    scrollBehavior: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin) */
    scrollMargin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block) */
    scrollMarginBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end) */
    scrollMarginBlockEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start) */
    scrollMarginBlockStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom) */
    scrollMarginBottom: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline) */
    scrollMarginInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end) */
    scrollMarginInlineEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start) */
    scrollMarginInlineStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left) */
    scrollMarginLeft: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right) */
    scrollMarginRight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top) */
    scrollMarginTop: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding) */
    scrollPadding: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block) */
    scrollPaddingBlock: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end) */
    scrollPaddingBlockEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start) */
    scrollPaddingBlockStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom) */
    scrollPaddingBottom: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline) */
    scrollPaddingInline: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end) */
    scrollPaddingInlineEnd: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start) */
    scrollPaddingInlineStart: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left) */
    scrollPaddingLeft: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right) */
    scrollPaddingRight: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top) */
    scrollPaddingTop: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align) */
    scrollSnapAlign: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop) */
    scrollSnapStop: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type) */
    scrollSnapType: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-color) */
    scrollbarColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter) */
    scrollbarGutter: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/scrollbar-width) */
    scrollbarWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold) */
    shapeImageThreshold: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-margin) */
    shapeMargin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-outside) */
    shapeOutside: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/shape-rendering) */
    shapeRendering: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stop-color) */
    stopColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stop-opacity) */
    stopOpacity: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke) */
    stroke: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-dasharray) */
    strokeDasharray: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-dashoffset) */
    strokeDashoffset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-linecap) */
    strokeLinecap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-linejoin) */
    strokeLinejoin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-miterlimit) */
    strokeMiterlimit: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-opacity) */
    strokeOpacity: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/stroke-width) */
    strokeWidth: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/tab-size) */
    tabSize: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/table-layout) */
    tableLayout: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align) */
    textAlign: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-align-last) */
    textAlignLast: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-anchor) */
    textAnchor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box) */
    textBox: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box-edge) */
    textBoxEdge: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-box-trim) */
    textBoxTrim: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-combine-upright) */
    textCombineUpright: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration) */
    textDecoration: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-color) */
    textDecorationColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-line) */
    textDecorationLine: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink) */
    textDecorationSkipInk: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-style) */
    textDecorationStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness) */
    textDecorationThickness: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis) */
    textEmphasis: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color) */
    textEmphasisColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position) */
    textEmphasisPosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style) */
    textEmphasisStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-indent) */
    textIndent: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-orientation) */
    textOrientation: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-overflow) */
    textOverflow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-rendering) */
    textRendering: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-shadow) */
    textShadow: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-transform) */
    textTransform: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-offset) */
    textUnderlineOffset: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-underline-position) */
    textUnderlinePosition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap) */
    textWrap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap-mode) */
    textWrapMode: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-wrap-style) */
    textWrapStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/top) */
    top: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/touch-action) */
    touchAction: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform) */
    transform: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-box) */
    transformBox: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin) */
    transformOrigin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style) */
    transformStyle: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition) */
    transition: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-behavior) */
    transitionBehavior: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay) */
    transitionDelay: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration) */
    transitionDuration: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property) */
    transitionProperty: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function) */
    transitionTimingFunction: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/translate) */
    translate: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/unicode-bidi) */
    unicodeBidi: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select) */
    userSelect: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vector-effect) */
    vectorEffect: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/vertical-align) */
    verticalAlign: string;
    viewTransitionClass: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/view-transition-name) */
    viewTransitionName: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/visibility) */
    visibility: string;
    /**
     * @deprecated This is a legacy alias of `alignContent`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-content)
     */
    webkitAlignContent: string;
    /**
     * @deprecated This is a legacy alias of `alignItems`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-items)
     */
    webkitAlignItems: string;
    /**
     * @deprecated This is a legacy alias of `alignSelf`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/align-self)
     */
    webkitAlignSelf: string;
    /**
     * @deprecated This is a legacy alias of `animation`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation)
     */
    webkitAnimation: string;
    /**
     * @deprecated This is a legacy alias of `animationDelay`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-delay)
     */
    webkitAnimationDelay: string;
    /**
     * @deprecated This is a legacy alias of `animationDirection`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-direction)
     */
    webkitAnimationDirection: string;
    /**
     * @deprecated This is a legacy alias of `animationDuration`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-duration)
     */
    webkitAnimationDuration: string;
    /**
     * @deprecated This is a legacy alias of `animationFillMode`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode)
     */
    webkitAnimationFillMode: string;
    /**
     * @deprecated This is a legacy alias of `animationIterationCount`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count)
     */
    webkitAnimationIterationCount: string;
    /**
     * @deprecated This is a legacy alias of `animationName`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-name)
     */
    webkitAnimationName: string;
    /**
     * @deprecated This is a legacy alias of `animationPlayState`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-play-state)
     */
    webkitAnimationPlayState: string;
    /**
     * @deprecated This is a legacy alias of `animationTimingFunction`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/animation-timing-function)
     */
    webkitAnimationTimingFunction: string;
    /**
     * @deprecated This is a legacy alias of `appearance`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/appearance)
     */
    webkitAppearance: string;
    /**
     * @deprecated This is a legacy alias of `backfaceVisibility`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/backface-visibility)
     */
    webkitBackfaceVisibility: string;
    /**
     * @deprecated This is a legacy alias of `backgroundClip`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-clip)
     */
    webkitBackgroundClip: string;
    /**
     * @deprecated This is a legacy alias of `backgroundOrigin`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-origin)
     */
    webkitBackgroundOrigin: string;
    /**
     * @deprecated This is a legacy alias of `backgroundSize`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/background-size)
     */
    webkitBackgroundSize: string;
    /**
     * @deprecated This is a legacy alias of `borderBottomLeftRadius`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius)
     */
    webkitBorderBottomLeftRadius: string;
    /**
     * @deprecated This is a legacy alias of `borderBottomRightRadius`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius)
     */
    webkitBorderBottomRightRadius: string;
    /**
     * @deprecated This is a legacy alias of `borderRadius`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-radius)
     */
    webkitBorderRadius: string;
    /**
     * @deprecated This is a legacy alias of `borderTopLeftRadius`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius)
     */
    webkitBorderTopLeftRadius: string;
    /**
     * @deprecated This is a legacy alias of `borderTopRightRadius`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius)
     */
    webkitBorderTopRightRadius: string;
    /**
     * @deprecated This is a legacy alias of `boxAlign`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-align)
     */
    webkitBoxAlign: string;
    /**
     * @deprecated This is a legacy alias of `boxFlex`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-flex)
     */
    webkitBoxFlex: string;
    /**
     * @deprecated This is a legacy alias of `boxOrdinalGroup`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-ordinal-group)
     */
    webkitBoxOrdinalGroup: string;
    /**
     * @deprecated This is a legacy alias of `boxOrient`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-orient)
     */
    webkitBoxOrient: string;
    /**
     * @deprecated This is a legacy alias of `boxPack`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-pack)
     */
    webkitBoxPack: string;
    /**
     * @deprecated This is a legacy alias of `boxShadow`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-shadow)
     */
    webkitBoxShadow: string;
    /**
     * @deprecated This is a legacy alias of `boxSizing`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/box-sizing)
     */
    webkitBoxSizing: string;
    /**
     * @deprecated This is a legacy alias of `filter`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/filter)
     */
    webkitFilter: string;
    /**
     * @deprecated This is a legacy alias of `flex`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex)
     */
    webkitFlex: string;
    /**
     * @deprecated This is a legacy alias of `flexBasis`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-basis)
     */
    webkitFlexBasis: string;
    /**
     * @deprecated This is a legacy alias of `flexDirection`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-direction)
     */
    webkitFlexDirection: string;
    /**
     * @deprecated This is a legacy alias of `flexFlow`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-flow)
     */
    webkitFlexFlow: string;
    /**
     * @deprecated This is a legacy alias of `flexGrow`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-grow)
     */
    webkitFlexGrow: string;
    /**
     * @deprecated This is a legacy alias of `flexShrink`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-shrink)
     */
    webkitFlexShrink: string;
    /**
     * @deprecated This is a legacy alias of `flexWrap`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/flex-wrap)
     */
    webkitFlexWrap: string;
    /**
     * @deprecated This is a legacy alias of `justifyContent`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/justify-content)
     */
    webkitJustifyContent: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/line-clamp) */
    webkitLineClamp: string;
    /**
     * @deprecated This is a legacy alias of `mask`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask)
     */
    webkitMask: string;
    /**
     * @deprecated This is a legacy alias of `maskBorder`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border)
     */
    webkitMaskBoxImage: string;
    /**
     * @deprecated This is a legacy alias of `maskBorderOutset`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-outset)
     */
    webkitMaskBoxImageOutset: string;
    /**
     * @deprecated This is a legacy alias of `maskBorderRepeat`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat)
     */
    webkitMaskBoxImageRepeat: string;
    /**
     * @deprecated This is a legacy alias of `maskBorderSlice`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-slice)
     */
    webkitMaskBoxImageSlice: string;
    /**
     * @deprecated This is a legacy alias of `maskBorderSource`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-source)
     */
    webkitMaskBoxImageSource: string;
    /**
     * @deprecated This is a legacy alias of `maskBorderWidth`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-border-width)
     */
    webkitMaskBoxImageWidth: string;
    /**
     * @deprecated This is a legacy alias of `maskClip`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-clip)
     */
    webkitMaskClip: string;
    /**
     * @deprecated This is a legacy alias of `maskComposite`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-composite)
     */
    webkitMaskComposite: string;
    /**
     * @deprecated This is a legacy alias of `maskImage`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-image)
     */
    webkitMaskImage: string;
    /**
     * @deprecated This is a legacy alias of `maskOrigin`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-origin)
     */
    webkitMaskOrigin: string;
    /**
     * @deprecated This is a legacy alias of `maskPosition`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-position)
     */
    webkitMaskPosition: string;
    /**
     * @deprecated This is a legacy alias of `maskRepeat`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-repeat)
     */
    webkitMaskRepeat: string;
    /**
     * @deprecated This is a legacy alias of `maskSize`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/mask-size)
     */
    webkitMaskSize: string;
    /**
     * @deprecated This is a legacy alias of `order`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/order)
     */
    webkitOrder: string;
    /**
     * @deprecated This is a legacy alias of `perspective`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective)
     */
    webkitPerspective: string;
    /**
     * @deprecated This is a legacy alias of `perspectiveOrigin`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/perspective-origin)
     */
    webkitPerspectiveOrigin: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-fill-color) */
    webkitTextFillColor: string;
    /**
     * @deprecated This is a legacy alias of `textSizeAdjust`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/text-size-adjust)
     */
    webkitTextSizeAdjust: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke) */
    webkitTextStroke: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-color) */
    webkitTextStrokeColor: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/-webkit-text-stroke-width) */
    webkitTextStrokeWidth: string;
    /**
     * @deprecated This is a legacy alias of `transform`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform)
     */
    webkitTransform: string;
    /**
     * @deprecated This is a legacy alias of `transformOrigin`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-origin)
     */
    webkitTransformOrigin: string;
    /**
     * @deprecated This is a legacy alias of `transformStyle`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transform-style)
     */
    webkitTransformStyle: string;
    /**
     * @deprecated This is a legacy alias of `transition`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition)
     */
    webkitTransition: string;
    /**
     * @deprecated This is a legacy alias of `transitionDelay`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-delay)
     */
    webkitTransitionDelay: string;
    /**
     * @deprecated This is a legacy alias of `transitionDuration`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-duration)
     */
    webkitTransitionDuration: string;
    /**
     * @deprecated This is a legacy alias of `transitionProperty`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-property)
     */
    webkitTransitionProperty: string;
    /**
     * @deprecated This is a legacy alias of `transitionTimingFunction`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/transition-timing-function)
     */
    webkitTransitionTimingFunction: string;
    /**
     * @deprecated This is a legacy alias of `userSelect`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/user-select)
     */
    webkitUserSelect: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space) */
    whiteSpace: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/white-space-collapse) */
    whiteSpaceCollapse: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/widows) */
    widows: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/width) */
    width: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/will-change) */
    willChange: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-break) */
    wordBreak: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/word-spacing) */
    wordSpacing: string;
    /**
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/overflow-wrap)
     */
    wordWrap: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/writing-mode) */
    writingMode: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/x) */
    x: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/y) */
    y: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/z-index) */
    zIndex: string;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/CSS/zoom) */
    zoom: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyPriority)
     */
    getPropertyPriority(property: string): string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/getPropertyValue)
     */
    getPropertyValue(property: string): string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/item)
     */
    item(index: number): string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/removeProperty)
     */
    removeProperty(property: string): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleDeclaration/setProperty)
     */
    setProperty(property: string, value: string | null, priority?: string): void;
    [index: number]: string;
}

declare var CSSStyleDeclaration: {
    prototype: CSSStyleDeclaration;
    new(): CSSStyleDeclaration;
};

/**
 * The **`CSSStyleRule`** interface represents a single CSS style rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule)
 */
interface CSSStyleRule extends CSSGroupingRule {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/selectorText)
     */
    selectorText: string;
    /**
     * Type: CSSStyleProperties
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/style)
     */
    get style(): CSSStyleDeclaration;
    set style(cssText: string);
    /**
     * Type: StylePropertyMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleRule/styleMap)
     */
    readonly styleMap: StylePropertyMap;
}

declare var CSSStyleRule: {
    prototype: CSSStyleRule;
    new(): CSSStyleRule;
};

/**
 * The **`CSSStyleSheet`** interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet)
 */
interface CSSStyleSheet extends StyleSheet {
    /**
     * Type: CSSRuleList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/cssRules)
     */
    readonly cssRules: CSSRuleList;
    /**
     * Type: CSSRule
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/ownerRule)
     */
    readonly ownerRule: CSSRule | null;
    /**
     * Type: CSSRuleList
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/rules)
     */
    readonly rules: CSSRuleList;
    /**
     * Type: long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/addRule)
     */
    addRule(selector?: string, style?: string, index?: number): number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/deleteRule)
     */
    deleteRule(index: number): void;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/insertRule)
     */
    insertRule(rule: string, index?: number): number;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/removeRule)
     */
    removeRule(index?: number): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replace)
     */
    replace(text: string): Promise<CSSStyleSheet>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleSheet/replaceSync)
     */
    replaceSync(text: string): void;
}

declare var CSSStyleSheet: {
    prototype: CSSStyleSheet;
    new(options?: CSSStyleSheetInit): CSSStyleSheet;
};

/**
 * The **`CSSStyleValue`** interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue)
 */
interface CSSStyleValue {
    toString(): string;
}

declare var CSSStyleValue: {
    prototype: CSSStyleValue;
    new(): CSSStyleValue;
    /**
     * Type: CSSStyleValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parse_static)
     */
    parse(property: string, cssText: string): CSSStyleValue;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSStyleValue/parseAll_static)
     */
    parseAll(property: string, cssText: string): CSSStyleValue[];
};

/**
 * The **`CSSSupportsRule`** interface represents a single CSS @supports at-rule.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSSupportsRule)
 */
interface CSSSupportsRule extends CSSConditionRule {
}

declare var CSSSupportsRule: {
    prototype: CSSSupportsRule;
    new(): CSSSupportsRule;
};

/**
 * The **`CSSTransformComponent`** interface of the CSS Typed Object Model API is part of the CSSTransformValue interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent)
 */
interface CSSTransformComponent {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/is2D)
     */
    is2D: boolean;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformComponent/toMatrix)
     */
    toMatrix(): DOMMatrix;
    toString(): string;
}

declare var CSSTransformComponent: {
    prototype: CSSTransformComponent;
    new(): CSSTransformComponent;
};

/**
 * The **`CSSTransformValue`** interface of the CSS Typed Object Model API represents `transform-list` values as used by the CSS transform property.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue)
 */
interface CSSTransformValue extends CSSStyleValue {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/is2D)
     */
    readonly is2D: boolean;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/length)
     */
    readonly length: number;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransformValue/toMatrix)
     */
    toMatrix(): DOMMatrix;
    forEach(callbackfn: (value: CSSTransformComponent, key: number, parent: CSSTransformValue) => void, thisArg?: any): void;
    [index: number]: CSSTransformComponent;
}

declare var CSSTransformValue: {
    prototype: CSSTransformValue;
    new(transforms: CSSTransformComponent[]): CSSTransformValue;
};

/**
 * The **`CSSTransition`** interface of the Web Animations API represents an Animation object used for a CSS Transition.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition)
 */
interface CSSTransition extends Animation {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTransition/transitionProperty)
     */
    readonly transitionProperty: string;
    addEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSTransition, ev: AnimationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AnimationEventMap>(type: K, listener: (this: CSSTransition, ev: AnimationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var CSSTransition: {
    prototype: CSSTransition;
    new(): CSSTransition;
};

/**
 * The **`CSSTranslate`** interface of the CSS Typed Object Model API represents the translate() value of the individual transform property in CSS.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate)
 */
interface CSSTranslate extends CSSTransformComponent {
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/x)
     */
    x: CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/y)
     */
    y: CSSNumericValue;
    /**
     * Type: CSSNumericValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSTranslate/z)
     */
    z: CSSNumericValue;
}

declare var CSSTranslate: {
    prototype: CSSTranslate;
    new(x: CSSNumericValue, y: CSSNumericValue, z?: CSSNumericValue): CSSTranslate;
};

/**
 * The **`CSSUnitValue`** interface of the CSS Typed Object Model API represents values that contain a single unit type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue)
 */
interface CSSUnitValue extends CSSNumericValue {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/unit)
     */
    readonly unit: string;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnitValue/value)
     */
    value: number;
}

declare var CSSUnitValue: {
    prototype: CSSUnitValue;
    new(value: number, unit: string): CSSUnitValue;
};

/**
 * The **`CSSUnparsedValue`** interface of the CSS Typed Object Model API represents property values that reference custom properties.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue)
 */
interface CSSUnparsedValue extends CSSStyleValue {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSUnparsedValue/length)
     */
    readonly length: number;
    forEach(callbackfn: (value: CSSUnparsedSegment, key: number, parent: CSSUnparsedValue) => void, thisArg?: any): void;
    [index: number]: CSSUnparsedSegment;
}

declare var CSSUnparsedValue: {
    prototype: CSSUnparsedValue;
    new(members: CSSUnparsedSegment[]): CSSUnparsedValue;
};

/**
 * The **`CSSVariableReferenceValue`** interface of the CSS Typed Object Model API allows you to create a custom name for a built-in CSS value.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue)
 */
interface CSSVariableReferenceValue {
    /**
     * Type: CSSUnparsedValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/fallback)
     */
    readonly fallback: CSSUnparsedValue | null;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSSVariableReferenceValue/variable)
     */
    variable: string;
}

declare var CSSVariableReferenceValue: {
    prototype: CSSVariableReferenceValue;
    new(variable: string, fallback?: CSSUnparsedValue | null): CSSVariableReferenceValue;
};

interface CSSViewTransitionRule extends CSSRule {
    /** Type: CSSOMString */
    readonly navigation: string;
    /** Type: [object Object] */
    readonly types: ReadonlyArray<string>;
}

declare var CSSViewTransitionRule: {
    prototype: CSSViewTransitionRule;
    new(): CSSViewTransitionRule;
};

/**
 * The **`Cache`** interface provides a persistent storage mechanism for Request / Response object pairs that are cached in long lived memory.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache)
 */
interface Cache {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/add)
     */
    add(request: RequestInfo | URL): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/addAll)
     */
    addAll(requests: RequestInfo[]): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/delete)
     */
    delete(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/keys)
     */
    keys(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Request>>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/match)
     */
    match(request: RequestInfo | URL, options?: CacheQueryOptions): Promise<Response | undefined>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/matchAll)
     */
    matchAll(request?: RequestInfo | URL, options?: CacheQueryOptions): Promise<ReadonlyArray<Response>>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Cache/put)
     */
    put(request: RequestInfo | URL, response: Response): Promise<void>;
}

declare var Cache: {
    prototype: Cache;
    new(): Cache;
};

/**
 * The **`CacheStorage`** interface represents the storage for Cache objects.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage)
 */
interface CacheStorage {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/delete)
     */
    delete(cacheName: string): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/has)
     */
    has(cacheName: string): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/keys)
     */
    keys(): Promise<string[]>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/match)
     */
    match(request: RequestInfo | URL, options?: MultiCacheQueryOptions): Promise<Response | undefined>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CacheStorage/open)
     */
    open(cacheName: string): Promise<Cache>;
}

declare var CacheStorage: {
    prototype: CacheStorage;
    new(): CacheStorage;
};

/**
 * The **`CanvasCaptureMediaStreamTrack`** interface of the Media Capture and Streams API represents the video track contained in a MediaStream being generated from a canvas following a call to HTMLCanvasElement.captureStream().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack)
 */
interface CanvasCaptureMediaStreamTrack extends MediaStreamTrack {
    /**
     * Type: HTMLCanvasElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/canvas)
     */
    readonly canvas: HTMLCanvasElement;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasCaptureMediaStreamTrack/requestFrame)
     */
    requestFrame(): void;
    addEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: CanvasCaptureMediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: CanvasCaptureMediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var CanvasCaptureMediaStreamTrack: {
    prototype: CanvasCaptureMediaStreamTrack;
    new(): CanvasCaptureMediaStreamTrack;
};

interface CanvasCompositing {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalAlpha)
     */
    globalAlpha: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/globalCompositeOperation)
     */
    globalCompositeOperation: GlobalCompositeOperation;
}

interface CanvasDrawImage {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawImage)
     */
    drawImage(image: CanvasImageSource, dx: number, dy: number): void;
    drawImage(image: CanvasImageSource, dx: number, dy: number, dw: number, dh: number): void;
    drawImage(image: CanvasImageSource, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;
}

interface CanvasDrawPath {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/beginPath)
     */
    beginPath(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clip)
     */
    clip(fillRule?: CanvasFillRule): void;
    clip(path: Path2D, fillRule?: CanvasFillRule): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fill)
     */
    fill(fillRule?: CanvasFillRule): void;
    fill(path: Path2D, fillRule?: CanvasFillRule): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInPath)
     */
    isPointInPath(x: number, y: number, fillRule?: CanvasFillRule): boolean;
    isPointInPath(path: Path2D, x: number, y: number, fillRule?: CanvasFillRule): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isPointInStroke)
     */
    isPointInStroke(x: number, y: number): boolean;
    isPointInStroke(path: Path2D, x: number, y: number): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/stroke)
     */
    stroke(): void;
    stroke(path: Path2D): void;
}

interface CanvasFillStrokeStyles {
    /**
     * Type: [object Object],[object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillStyle)
     */
    fillStyle: string | CanvasGradient | CanvasPattern;
    /**
     * Type: [object Object],[object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeStyle)
     */
    strokeStyle: string | CanvasGradient | CanvasPattern;
    /**
     * Type: CanvasGradient
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createConicGradient)
     */
    createConicGradient(startAngle: number, x: number, y: number): CanvasGradient;
    /**
     * Type: CanvasGradient
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createLinearGradient)
     */
    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;
    /**
     * Type: CanvasPattern
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createPattern)
     */
    createPattern(image: CanvasImageSource, repetition: string | null): CanvasPattern | null;
    /**
     * Type: CanvasGradient
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createRadialGradient)
     */
    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;
}

interface CanvasFilters {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/filter)
     */
    filter: string;
}

/**
 * The **`CanvasGradient`** interface represents an opaque object describing a gradient.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient)
 */
interface CanvasGradient {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasGradient/addColorStop)
     */
    addColorStop(offset: number, color: string): void;
}

declare var CanvasGradient: {
    prototype: CanvasGradient;
    new(): CanvasGradient;
};

interface CanvasImageData {
    /**
     * Type: ImageData
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/createImageData)
     */
    createImageData(sw: number, sh: number, settings?: ImageDataSettings): ImageData;
    createImageData(imageData: ImageData): ImageData;
    /**
     * Type: ImageData
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getImageData)
     */
    getImageData(sx: number, sy: number, sw: number, sh: number, settings?: ImageDataSettings): ImageData;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/putImageData)
     */
    putImageData(imageData: ImageData, dx: number, dy: number): void;
    putImageData(imageData: ImageData, dx: number, dy: number, dirtyX: number, dirtyY: number, dirtyWidth: number, dirtyHeight: number): void;
}

interface CanvasImageSmoothing {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled)
     */
    imageSmoothingEnabled: boolean;
    /**
     * Type: ImageSmoothingQuality
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality)
     */
    imageSmoothingQuality: ImageSmoothingQuality;
}

interface CanvasPath {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arc)
     */
    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/arcTo)
     */
    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/bezierCurveTo)
     */
    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/closePath)
     */
    closePath(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/ellipse)
     */
    ellipse(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number, counterclockwise?: boolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineTo)
     */
    lineTo(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/moveTo)
     */
    moveTo(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/quadraticCurveTo)
     */
    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rect)
     */
    rect(x: number, y: number, w: number, h: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/roundRect)
     */
    roundRect(x: number, y: number, w: number, h: number, radii?: number | DOMPointInit | (number | DOMPointInit)[]): void;
}

interface CanvasPathDrawingStyles {
    /**
     * Type: CanvasLineCap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineCap)
     */
    lineCap: CanvasLineCap;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineDashOffset)
     */
    lineDashOffset: number;
    /**
     * Type: CanvasLineJoin
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineJoin)
     */
    lineJoin: CanvasLineJoin;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/lineWidth)
     */
    lineWidth: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/miterLimit)
     */
    miterLimit: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getLineDash)
     */
    getLineDash(): number[];
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash)
     */
    setLineDash(segments: number[]): void;
}

/**
 * The **`CanvasPattern`** interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern)
 */
interface CanvasPattern {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasPattern/setTransform)
     */
    setTransform(transform?: DOMMatrix2DInit): void;
}

declare var CanvasPattern: {
    prototype: CanvasPattern;
    new(): CanvasPattern;
};

interface CanvasRect {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/clearRect)
     */
    clearRect(x: number, y: number, w: number, h: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillRect)
     */
    fillRect(x: number, y: number, w: number, h: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeRect)
     */
    strokeRect(x: number, y: number, w: number, h: number): void;
}

/**
 * The **`CanvasRenderingContext2D`** interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a canvas element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D)
 */
interface CanvasRenderingContext2D extends CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasSettings, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform, CanvasUserInterface {
    /**
     * Type: HTMLCanvasElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)
     */
    readonly canvas: HTMLCanvasElement;
}

declare var CanvasRenderingContext2D: {
    prototype: CanvasRenderingContext2D;
    new(): CanvasRenderingContext2D;
};

interface CanvasSettings {
    /**
     * Type: CanvasRenderingContext2DSettings
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getContextAttributes)
     */
    getContextAttributes(): CanvasRenderingContext2DSettings;
}

interface CanvasShadowStyles {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowBlur)
     */
    shadowBlur: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowColor)
     */
    shadowColor: string;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetX)
     */
    shadowOffsetX: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/shadowOffsetY)
     */
    shadowOffsetY: number;
}

interface CanvasState {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/isContextLost)
     */
    isContextLost(): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/reset)
     */
    reset(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/restore)
     */
    restore(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/save)
     */
    save(): void;
}

interface CanvasText {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fillText)
     */
    fillText(text: string, x: number, y: number, maxWidth?: number): void;
    /**
     * Type: TextMetrics
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/measureText)
     */
    measureText(text: string): TextMetrics;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/strokeText)
     */
    strokeText(text: string, x: number, y: number, maxWidth?: number): void;
}

interface CanvasTextDrawingStyles {
    /**
     * Type: CanvasDirection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/direction)
     */
    direction: CanvasDirection;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/font)
     */
    font: string;
    /**
     * Type: CanvasFontKerning
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontKerning)
     */
    fontKerning: CanvasFontKerning;
    /**
     * Type: CanvasFontStretch
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontStretch)
     */
    fontStretch: CanvasFontStretch;
    /**
     * Type: CanvasFontVariantCaps
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/fontVariantCaps)
     */
    fontVariantCaps: CanvasFontVariantCaps;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/letterSpacing)
     */
    letterSpacing: string;
    /**
     * Type: CanvasTextAlign
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textAlign)
     */
    textAlign: CanvasTextAlign;
    /**
     * Type: CanvasTextBaseline
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textBaseline)
     */
    textBaseline: CanvasTextBaseline;
    /**
     * Type: CanvasTextRendering
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/textRendering)
     */
    textRendering: CanvasTextRendering;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/wordSpacing)
     */
    wordSpacing: string;
}

interface CanvasTransform {
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/getTransform)
     */
    getTransform(): DOMMatrix;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/resetTransform)
     */
    resetTransform(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/rotate)
     */
    rotate(angle: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/scale)
     */
    scale(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setTransform)
     */
    setTransform(a: number, b: number, c: number, d: number, e: number, f: number): void;
    setTransform(transform?: DOMMatrix2DInit): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/transform)
     */
    transform(a: number, b: number, c: number, d: number, e: number, f: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/translate)
     */
    translate(x: number, y: number): void;
}

interface CanvasUserInterface {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/drawFocusIfNeeded)
     */
    drawFocusIfNeeded(element: Element): void;
    drawFocusIfNeeded(path: Path2D, element: Element): void;
}

/**
 * The `CaretPosition` interface represents the caret position, an indicator for the text insertion point.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CaretPosition)
 */
interface CaretPosition {
    /** Type: unsigned long */
    readonly offset: number;
    /** Type: Node */
    readonly offsetNode: Node;
    /** Type: DOMRect */
    getClientRect(): DOMRect | null;
}

declare var CaretPosition: {
    prototype: CaretPosition;
    new(): CaretPosition;
};

/**
 * The `ChannelMergerNode` interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelMergerNode)
 */
interface ChannelMergerNode extends AudioNode {
}

declare var ChannelMergerNode: {
    prototype: ChannelMergerNode;
    new(context: BaseAudioContext, options?: ChannelMergerOptions): ChannelMergerNode;
};

/**
 * The `ChannelSplitterNode` interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ChannelSplitterNode)
 */
interface ChannelSplitterNode extends AudioNode {
}

declare var ChannelSplitterNode: {
    prototype: ChannelSplitterNode;
    new(context: BaseAudioContext, options?: ChannelSplitterOptions): ChannelSplitterNode;
};

/**
 * The **`CharacterData`** abstract interface represents a Node object that contains characters.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData)
 */
interface CharacterData extends Node, ChildNode, NonDocumentTypeChildNode {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/data)
     */
    data: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/length)
     */
    readonly length: number;
    readonly ownerDocument: Document;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/appendData)
     */
    appendData(data: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/deleteData)
     */
    deleteData(offset: number, count: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/insertData)
     */
    insertData(offset: number, data: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceData)
     */
    replaceData(offset: number, count: number, data: string): void;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/substringData)
     */
    substringData(offset: number, count: number): string;
}

declare var CharacterData: {
    prototype: CharacterData;
    new(): CharacterData;
};

interface ChildNode extends Node {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/after)
     */
    after(...nodes: (Node | string)[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/before)
     */
    before(...nodes: (Node | string)[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/remove)
     */
    remove(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/replaceWith)
     */
    replaceWith(...nodes: (Node | string)[]): void;
}

/** @deprecated */
interface ClientRect extends DOMRect {
}

/**
 * The **`Clipboard`** interface of the Clipboard API provides read and write access to the contents of the system clipboard.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard)
 */
interface Clipboard extends EventTarget {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/read)
     */
    read(): Promise<ClipboardItems>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/readText)
     */
    readText(): Promise<string>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/write)
     */
    write(data: ClipboardItems): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Clipboard/writeText)
     */
    writeText(data: string): Promise<void>;
}

declare var Clipboard: {
    prototype: Clipboard;
    new(): Clipboard;
};

/**
 * The **`ClipboardEvent`** interface of the Clipboard API represents events providing information related to modification of the clipboard, that is Element/cut_event, Element/copy_event, and Element/paste_event events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent)
 */
interface ClipboardEvent extends Event {
    /**
     * Type: DataTransfer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardEvent/clipboardData)
     */
    readonly clipboardData: DataTransfer | null;
}

declare var ClipboardEvent: {
    prototype: ClipboardEvent;
    new(type: string, eventInitDict?: ClipboardEventInit): ClipboardEvent;
};

/**
 * The **`ClipboardItem`** interface of the Clipboard API represents a single item format, used when reading or writing clipboard data using Clipboard.read() and Clipboard.write() respectively.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem)
 */
interface ClipboardItem {
    /**
     * Type: PresentationStyle
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/presentationStyle)
     */
    readonly presentationStyle: PresentationStyle;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/types)
     */
    readonly types: ReadonlyArray<string>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/getType)
     */
    getType(type: string): Promise<Blob>;
}

declare var ClipboardItem: {
    prototype: ClipboardItem;
    new(items: Record<string, string | Blob | PromiseLike<string | Blob>>, options?: ClipboardItemOptions): ClipboardItem;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ClipboardItem/supports_static)
     */
    supports(type: string): boolean;
};

/**
 * A `CloseEvent` is sent to clients using WebSockets when the connection is closed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent)
 */
interface CloseEvent extends Event {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/code)
     */
    readonly code: number;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/reason)
     */
    readonly reason: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CloseEvent/wasClean)
     */
    readonly wasClean: boolean;
}

declare var CloseEvent: {
    prototype: CloseEvent;
    new(type: string, eventInitDict?: CloseEventInit): CloseEvent;
};

/**
 * The **`Comment`** interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Comment)
 */
interface Comment extends CharacterData {
}

declare var Comment: {
    prototype: Comment;
    new(data?: string): Comment;
};

/**
 * The DOM **`CompositionEvent`** represents events that occur due to the user indirectly entering text.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent)
 */
interface CompositionEvent extends UIEvent {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/data)
     */
    readonly data: string;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompositionEvent/initCompositionEvent)
     */
    initCompositionEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: WindowProxy | null, dataArg?: string): void;
}

declare var CompositionEvent: {
    prototype: CompositionEvent;
    new(type: string, eventInitDict?: CompositionEventInit): CompositionEvent;
};

/**
 * The **`CompressionStream`** interface of the Compression Streams API is an API for compressing a stream of data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream)
 */
interface CompressionStream extends GenericTransformStream {
    readonly readable: ReadableStream<Uint8Array<ArrayBuffer>>;
    readonly writable: WritableStream<BufferSource>;
}

declare var CompressionStream: {
    prototype: CompressionStream;
    new(format: CompressionFormat): CompressionStream;
};

/**
 * The `ConstantSourceNode` interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode)
 */
interface ConstantSourceNode extends AudioScheduledSourceNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConstantSourceNode/offset)
     */
    readonly offset: AudioParam;
    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: ConstantSourceNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var ConstantSourceNode: {
    prototype: ConstantSourceNode;
    new(context: BaseAudioContext, options?: ConstantSourceOptions): ConstantSourceNode;
};

/**
 * The **`ContentVisibilityAutoStateChangeEvent`** interface is the event object for the element/contentvisibilityautostatechange_event event, which fires on any element with content-visibility set on it when it starts or stops being relevant to the user and skipping its contents.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContentVisibilityAutoStateChangeEvent)
 */
interface ContentVisibilityAutoStateChangeEvent extends Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContentVisibilityAutoStateChangeEvent/skipped)
     */
    readonly skipped: boolean;
}

declare var ContentVisibilityAutoStateChangeEvent: {
    prototype: ContentVisibilityAutoStateChangeEvent;
    new(type: string, eventInitDict?: ContentVisibilityAutoStateChangeEventInit): ContentVisibilityAutoStateChangeEvent;
};

/**
 * The `ConvolverNode` interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode)
 */
interface ConvolverNode extends AudioNode {
    /**
     * Type: AudioBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/buffer)
     */
    buffer: AudioBuffer | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ConvolverNode/normalize)
     */
    normalize: boolean;
}

declare var ConvolverNode: {
    prototype: ConvolverNode;
    new(context: BaseAudioContext, options?: ConvolverOptions): ConvolverNode;
};

/**
 * The **`CookieChangeEvent`** interface of the Cookie Store API is the event type of the CookieStore/change_event event fired at a CookieStore when any cookies are created or deleted.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent)
 */
interface CookieChangeEvent extends Event {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent/changed)
     */
    readonly changed: ReadonlyArray<CookieListItem>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieChangeEvent/deleted)
     */
    readonly deleted: ReadonlyArray<CookieListItem>;
}

declare var CookieChangeEvent: {
    prototype: CookieChangeEvent;
    new(type: string, eventInitDict?: CookieChangeEventInit): CookieChangeEvent;
};

interface CookieStoreEventMap {
    "change": CookieChangeEvent;
}

/**
 * The **`CookieStore`** interface of the Cookie Store API provides methods for getting and setting cookies asynchronously from either a page or a service worker.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore)
 */
interface CookieStore extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/change_event)
     */
    onchange: ((this: CookieStore, ev: CookieChangeEvent) => any) | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/delete)
     */
    delete(name: string): Promise<void>;
    delete(options: CookieStoreDeleteOptions): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/get)
     */
    get(name: string): Promise<CookieListItem | null>;
    get(options?: CookieStoreGetOptions): Promise<CookieListItem | null>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/getAll)
     */
    getAll(name: string): Promise<CookieList>;
    getAll(options?: CookieStoreGetOptions): Promise<CookieList>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CookieStore/set)
     */
    set(name: string, value: string): Promise<void>;
    set(options: CookieInit): Promise<void>;
    addEventListener<K extends keyof CookieStoreEventMap>(type: K, listener: (this: CookieStore, ev: CookieStoreEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof CookieStoreEventMap>(type: K, listener: (this: CookieStore, ev: CookieStoreEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var CookieStore: {
    prototype: CookieStore;
    new(): CookieStore;
};

/**
 * The **`CountQueuingStrategy`** interface of the Streams API provides a built-in chunk counting queuing strategy that can be used when constructing streams.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy)
 */
interface CountQueuingStrategy extends QueuingStrategy {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/highWaterMark)
     */
    readonly highWaterMark: number;
    /**
     * Type: Function
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CountQueuingStrategy/size)
     */
    readonly size: QueuingStrategySize;
}

declare var CountQueuingStrategy: {
    prototype: CountQueuingStrategy;
    new(init: QueuingStrategyInit): CountQueuingStrategy;
};

/**
 * The **`Credential`** interface of the Credential Management API provides information about an entity (usually a user) normally as a prerequisite to a trust decision.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential)
 */
interface Credential {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/id)
     */
    readonly id: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Credential/type)
     */
    readonly type: string;
}

declare var Credential: {
    prototype: Credential;
    new(): Credential;
};

/**
 * The **`CredentialsContainer`** interface of the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer)
 */
interface CredentialsContainer {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/create)
     */
    create(options?: CredentialCreationOptions): Promise<Credential | null>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/get)
     */
    get(options?: CredentialRequestOptions): Promise<Credential | null>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/preventSilentAccess)
     */
    preventSilentAccess(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CredentialsContainer/store)
     */
    store(credential: Credential): Promise<void>;
}

declare var CredentialsContainer: {
    prototype: CredentialsContainer;
    new(): CredentialsContainer;
};

/**
 * The **`Crypto`** interface represents basic cryptography features available in the current context.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto)
 */
interface Crypto {
    /**
     * Type: SubtleCrypto
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/subtle)
     */
    readonly subtle: SubtleCrypto;
    /**
     * Type: ArrayBufferView
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/getRandomValues)
     */
    getRandomValues<T extends ArrayBufferView | null>(array: T): T;
    /**
     * Type: DOMString
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Crypto/randomUUID)
     */
    randomUUID(): `${string}-${string}-${string}-${string}-${string}`;
}

declare var Crypto: {
    prototype: Crypto;
    new(): Crypto;
};

/**
 * The **`CryptoKey`** interface of the Web Crypto API represents a cryptographic key obtained from one of the SubtleCrypto methods SubtleCrypto.generateKey, SubtleCrypto.deriveKey, SubtleCrypto.importKey, or SubtleCrypto.unwrapKey.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey)
 */
interface CryptoKey {
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/algorithm)
     */
    readonly algorithm: KeyAlgorithm;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/extractable)
     */
    readonly extractable: boolean;
    /**
     * Type: KeyType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/type)
     */
    readonly type: KeyType;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CryptoKey/usages)
     */
    readonly usages: KeyUsage[];
}

declare var CryptoKey: {
    prototype: CryptoKey;
    new(): CryptoKey;
};

/**
 * The **`CustomElementRegistry`** interface provides methods for registering custom elements and querying registered elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry)
 */
interface CustomElementRegistry {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/define)
     */
    define(name: string, constructor: CustomElementConstructor, options?: ElementDefinitionOptions): void;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/get)
     */
    get(name: string): CustomElementConstructor | undefined;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/getName)
     */
    getName(constructor: CustomElementConstructor): string | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/upgrade)
     */
    upgrade(root: Node): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomElementRegistry/whenDefined)
     */
    whenDefined(name: string): Promise<CustomElementConstructor>;
}

declare var CustomElementRegistry: {
    prototype: CustomElementRegistry;
    new(): CustomElementRegistry;
};

/**
 * The **`CustomEvent`** interface represents events initialized by an application for any purpose.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent)
 */
interface CustomEvent<T = any> extends Event {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/detail)
     */
    readonly detail: T;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomEvent/initCustomEvent)
     */
    initCustomEvent(type: string, bubbles?: boolean, cancelable?: boolean, detail?: T): void;
}

declare var CustomEvent: {
    prototype: CustomEvent;
    new<T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;
};

/**
 * The **`CustomStateSet`** interface of the Document Object Model stores a list of states for an autonomous custom element, and allows states to be added and removed from the set.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CustomStateSet)
 */
interface CustomStateSet {
    forEach(callbackfn: (value: string, key: string, parent: CustomStateSet) => void, thisArg?: any): void;
}

declare var CustomStateSet: {
    prototype: CustomStateSet;
    new(): CustomStateSet;
};

/**
 * The **`DOMException`** interface represents an abnormal event (called an **exception**) that occurs as a result of calling a method or accessing a property of a web API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException)
 */
interface DOMException extends Error {
    /**
     * Type: unsigned short
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/code)
     */
    readonly code: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/message)
     */
    readonly message: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMException/name)
     */
    readonly name: string;
    /** Type: unsigned short */
    readonly INDEX_SIZE_ERR: 1;
    /** Type: unsigned short */
    readonly DOMSTRING_SIZE_ERR: 2;
    /** Type: unsigned short */
    readonly HIERARCHY_REQUEST_ERR: 3;
    /** Type: unsigned short */
    readonly WRONG_DOCUMENT_ERR: 4;
    /** Type: unsigned short */
    readonly INVALID_CHARACTER_ERR: 5;
    /** Type: unsigned short */
    readonly NO_DATA_ALLOWED_ERR: 6;
    /** Type: unsigned short */
    readonly NO_MODIFICATION_ALLOWED_ERR: 7;
    /** Type: unsigned short */
    readonly NOT_FOUND_ERR: 8;
    /** Type: unsigned short */
    readonly NOT_SUPPORTED_ERR: 9;
    /** Type: unsigned short */
    readonly INUSE_ATTRIBUTE_ERR: 10;
    /** Type: unsigned short */
    readonly INVALID_STATE_ERR: 11;
    /** Type: unsigned short */
    readonly SYNTAX_ERR: 12;
    /** Type: unsigned short */
    readonly INVALID_MODIFICATION_ERR: 13;
    /** Type: unsigned short */
    readonly NAMESPACE_ERR: 14;
    /** Type: unsigned short */
    readonly INVALID_ACCESS_ERR: 15;
    /** Type: unsigned short */
    readonly VALIDATION_ERR: 16;
    /** Type: unsigned short */
    readonly TYPE_MISMATCH_ERR: 17;
    /** Type: unsigned short */
    readonly SECURITY_ERR: 18;
    /** Type: unsigned short */
    readonly NETWORK_ERR: 19;
    /** Type: unsigned short */
    readonly ABORT_ERR: 20;
    /** Type: unsigned short */
    readonly URL_MISMATCH_ERR: 21;
    /** Type: unsigned short */
    readonly QUOTA_EXCEEDED_ERR: 22;
    /** Type: unsigned short */
    readonly TIMEOUT_ERR: 23;
    /** Type: unsigned short */
    readonly INVALID_NODE_TYPE_ERR: 24;
    /** Type: unsigned short */
    readonly DATA_CLONE_ERR: 25;
}

declare var DOMException: {
    prototype: DOMException;
    new(message?: string, name?: string): DOMException;
    /** Type: unsigned short */
    readonly INDEX_SIZE_ERR: 1;
    /** Type: unsigned short */
    readonly DOMSTRING_SIZE_ERR: 2;
    /** Type: unsigned short */
    readonly HIERARCHY_REQUEST_ERR: 3;
    /** Type: unsigned short */
    readonly WRONG_DOCUMENT_ERR: 4;
    /** Type: unsigned short */
    readonly INVALID_CHARACTER_ERR: 5;
    /** Type: unsigned short */
    readonly NO_DATA_ALLOWED_ERR: 6;
    /** Type: unsigned short */
    readonly NO_MODIFICATION_ALLOWED_ERR: 7;
    /** Type: unsigned short */
    readonly NOT_FOUND_ERR: 8;
    /** Type: unsigned short */
    readonly NOT_SUPPORTED_ERR: 9;
    /** Type: unsigned short */
    readonly INUSE_ATTRIBUTE_ERR: 10;
    /** Type: unsigned short */
    readonly INVALID_STATE_ERR: 11;
    /** Type: unsigned short */
    readonly SYNTAX_ERR: 12;
    /** Type: unsigned short */
    readonly INVALID_MODIFICATION_ERR: 13;
    /** Type: unsigned short */
    readonly NAMESPACE_ERR: 14;
    /** Type: unsigned short */
    readonly INVALID_ACCESS_ERR: 15;
    /** Type: unsigned short */
    readonly VALIDATION_ERR: 16;
    /** Type: unsigned short */
    readonly TYPE_MISMATCH_ERR: 17;
    /** Type: unsigned short */
    readonly SECURITY_ERR: 18;
    /** Type: unsigned short */
    readonly NETWORK_ERR: 19;
    /** Type: unsigned short */
    readonly ABORT_ERR: 20;
    /** Type: unsigned short */
    readonly URL_MISMATCH_ERR: 21;
    /** Type: unsigned short */
    readonly QUOTA_EXCEEDED_ERR: 22;
    /** Type: unsigned short */
    readonly TIMEOUT_ERR: 23;
    /** Type: unsigned short */
    readonly INVALID_NODE_TYPE_ERR: 24;
    /** Type: unsigned short */
    readonly DATA_CLONE_ERR: 25;
};

/**
 * The **`DOMImplementation`** interface represents an object providing methods which are not dependent on any particular document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation)
 */
interface DOMImplementation {
    /**
     * Type: XMLDocument
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocument)
     */
    createDocument(namespace: string | null, qualifiedName: string | null, doctype?: DocumentType | null): XMLDocument;
    /**
     * Type: DocumentType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createDocumentType)
     */
    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/createHTMLDocument)
     */
    createHTMLDocument(title?: string): Document;
    /**
     * Type: boolean
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMImplementation/hasFeature)
     */
    hasFeature(...args: any[]): true;
}

declare var DOMImplementation: {
    prototype: DOMImplementation;
    new(): DOMImplementation;
};

/**
 * The **`DOMMatrix`** interface represents 4×4 matrices, suitable for 2D and 3D operations including rotation and translation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix)
 */
interface DOMMatrix extends DOMMatrixReadOnly {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    a: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    b: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    c: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    d: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    e: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    f: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m11: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m12: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m13: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m14: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m21: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m22: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m23: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m24: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m31: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m32: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m33: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m34: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m41: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m42: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m43: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix#instance_properties)
     */
    m44: number;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/invertSelf)
     */
    invertSelf(): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/multiplySelf)
     */
    multiplySelf(other?: DOMMatrixInit): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/preMultiplySelf)
     */
    preMultiplySelf(other?: DOMMatrixInit): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/rotateAxisAngleSelf)
     */
    rotateAxisAngleSelf(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/rotateFromVectorSelf)
     */
    rotateFromVectorSelf(x?: number, y?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/rotateSelf)
     */
    rotateSelf(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scale3dSelf)
     */
    scale3dSelf(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/scaleSelf)
     */
    scaleSelf(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/setMatrixValue)
     */
    setMatrixValue(transformList: string): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/skewXSelf)
     */
    skewXSelf(sx?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/skewYSelf)
     */
    skewYSelf(sy?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrix/translateSelf)
     */
    translateSelf(tx?: number, ty?: number, tz?: number): DOMMatrix;
}

declare var DOMMatrix: {
    prototype: DOMMatrix;
    new(init?: string | number[]): DOMMatrix;
    /** Type: DOMMatrix */
    fromFloat32Array(array32: Float32Array<ArrayBuffer>): DOMMatrix;
    /** Type: DOMMatrix */
    fromFloat64Array(array64: Float64Array<ArrayBuffer>): DOMMatrix;
    /** Type: DOMMatrix */
    fromMatrix(other?: DOMMatrixInit): DOMMatrix;
};

type SVGMatrix = DOMMatrix;
declare var SVGMatrix: typeof DOMMatrix;

type WebKitCSSMatrix = DOMMatrix;
declare var WebKitCSSMatrix: typeof DOMMatrix;

/**
 * The **`DOMMatrixReadOnly`** interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly)
 */
interface DOMMatrixReadOnly {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly a: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly b: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly c: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly d: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly e: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly f: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/is2D)
     */
    readonly is2D: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/isIdentity)
     */
    readonly isIdentity: boolean;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m11: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m12: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m13: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m14: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m21: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m22: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m23: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m24: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m31: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m32: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m33: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m34: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m41: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m42: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m43: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly#instance_properties)
     */
    readonly m44: number;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipX)
     */
    flipX(): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/flipY)
     */
    flipY(): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/inverse)
     */
    inverse(): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/multiply)
     */
    multiply(other?: DOMMatrixInit): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotate)
     */
    rotate(rotX?: number, rotY?: number, rotZ?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateAxisAngle)
     */
    rotateAxisAngle(x?: number, y?: number, z?: number, angle?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/rotateFromVector)
     */
    rotateFromVector(x?: number, y?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale)
     */
    scale(scaleX?: number, scaleY?: number, scaleZ?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/scale3d)
     */
    scale3d(scale?: number, originX?: number, originY?: number, originZ?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     * @deprecated
     */
    scaleNonUniform(scaleX?: number, scaleY?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewX)
     */
    skewX(sx?: number): DOMMatrix;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/skewY)
     */
    skewY(sy?: number): DOMMatrix;
    /**
     * Type: Float32Array
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat32Array)
     */
    toFloat32Array(): Float32Array<ArrayBuffer>;
    /**
     * Type: Float64Array
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toFloat64Array)
     */
    toFloat64Array(): Float64Array<ArrayBuffer>;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/toJSON)
     */
    toJSON(): any;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/transformPoint)
     */
    transformPoint(point?: DOMPointInit): DOMPoint;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMMatrixReadOnly/translate)
     */
    translate(tx?: number, ty?: number, tz?: number): DOMMatrix;
    toString(): string;
}

declare var DOMMatrixReadOnly: {
    prototype: DOMMatrixReadOnly;
    new(init?: string | number[]): DOMMatrixReadOnly;
    /** Type: DOMMatrixReadOnly */
    fromFloat32Array(array32: Float32Array<ArrayBuffer>): DOMMatrixReadOnly;
    /** Type: DOMMatrixReadOnly */
    fromFloat64Array(array64: Float64Array<ArrayBuffer>): DOMMatrixReadOnly;
    /** Type: DOMMatrixReadOnly */
    fromMatrix(other?: DOMMatrixInit): DOMMatrixReadOnly;
};

/**
 * The **`DOMParser`** interface provides the ability to parse XML or HTML source code from a string into a DOM Document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser)
 */
interface DOMParser {
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMParser/parseFromString)
     */
    parseFromString(string: string, type: DOMParserSupportedType): Document;
}

declare var DOMParser: {
    prototype: DOMParser;
    new(): DOMParser;
};

/**
 * A **`DOMPoint`** object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint)
 */
interface DOMPoint extends DOMPointReadOnly {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/w)
     */
    w: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/x)
     */
    x: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/y)
     */
    y: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/z)
     */
    z: number;
}

declare var DOMPoint: {
    prototype: DOMPoint;
    new(x?: number, y?: number, z?: number, w?: number): DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPoint/fromPoint_static)
     */
    fromPoint(other?: DOMPointInit): DOMPoint;
};

type SVGPoint = DOMPoint;
declare var SVGPoint: typeof DOMPoint;

/**
 * The **`DOMPointReadOnly`** interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly)
 */
interface DOMPointReadOnly {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/w)
     */
    readonly w: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/x)
     */
    readonly x: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/y)
     */
    readonly y: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/z)
     */
    readonly z: number;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/matrixTransform)
     */
    matrixTransform(matrix?: DOMMatrixInit): DOMPoint;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/toJSON)
     */
    toJSON(): any;
}

declare var DOMPointReadOnly: {
    prototype: DOMPointReadOnly;
    new(x?: number, y?: number, z?: number, w?: number): DOMPointReadOnly;
    /**
     * Type: DOMPointReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMPointReadOnly/fromPoint_static)
     */
    fromPoint(other?: DOMPointInit): DOMPointReadOnly;
};

/**
 * A `DOMQuad` is a collection of four `DOMPoint`s defining the corners of an arbitrary quadrilateral.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad)
 */
interface DOMQuad {
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p1)
     */
    readonly p1: DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p2)
     */
    readonly p2: DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p3)
     */
    readonly p3: DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/p4)
     */
    readonly p4: DOMPoint;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/getBounds)
     */
    getBounds(): DOMRect;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMQuad/toJSON)
     */
    toJSON(): any;
}

declare var DOMQuad: {
    prototype: DOMQuad;
    new(p1?: DOMPointInit, p2?: DOMPointInit, p3?: DOMPointInit, p4?: DOMPointInit): DOMQuad;
    /** Type: DOMQuad */
    fromQuad(other?: DOMQuadInit): DOMQuad;
    /** Type: DOMQuad */
    fromRect(other?: DOMRectInit): DOMQuad;
};

/**
 * A **`DOMRect`** describes the size and position of a rectangle.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect)
 */
interface DOMRect extends DOMRectReadOnly {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/height)
     */
    height: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/width)
     */
    width: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/x)
     */
    x: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/y)
     */
    y: number;
}

declare var DOMRect: {
    prototype: DOMRect;
    new(x?: number, y?: number, width?: number, height?: number): DOMRect;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRect/fromRect_static)
     */
    fromRect(other?: DOMRectInit): DOMRect;
};

type SVGRect = DOMRect;
declare var SVGRect: typeof DOMRect;

/**
 * The **`DOMRectList`** interface represents a collection of DOMRect objects, typically used to hold the rectangles associated with a particular element, like bounding boxes returned by methods such as Element.getClientRects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectList)
 */
interface DOMRectList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectList/length)
     */
    readonly length: number;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectList/item)
     */
    item(index: number): DOMRect | null;
    [index: number]: DOMRect;
}

declare var DOMRectList: {
    prototype: DOMRectList;
    new(): DOMRectList;
};

/**
 * The **`DOMRectReadOnly`** interface specifies the standard properties (also used by DOMRect) to define a rectangle whose properties are immutable.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly)
 */
interface DOMRectReadOnly {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/bottom)
     */
    readonly bottom: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/height)
     */
    readonly height: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/left)
     */
    readonly left: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/right)
     */
    readonly right: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/top)
     */
    readonly top: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/width)
     */
    readonly width: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/x)
     */
    readonly x: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/y)
     */
    readonly y: number;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/toJSON)
     */
    toJSON(): any;
}

declare var DOMRectReadOnly: {
    prototype: DOMRectReadOnly;
    new(x?: number, y?: number, width?: number, height?: number): DOMRectReadOnly;
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMRectReadOnly/fromRect_static)
     */
    fromRect(other?: DOMRectInit): DOMRectReadOnly;
};

/**
 * The **`DOMStringList`** interface is a legacy type returned by some APIs and represents a non-modifiable list of strings (`DOMString`).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList)
 */
interface DOMStringList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/length)
     */
    readonly length: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/contains)
     */
    contains(string: string): boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringList/item)
     */
    item(index: number): string | null;
    [index: number]: string;
}

declare var DOMStringList: {
    prototype: DOMStringList;
    new(): DOMStringList;
};

/**
 * The **`DOMStringMap`** interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMStringMap)
 */
interface DOMStringMap {
    [name: string]: string | undefined;
}

declare var DOMStringMap: {
    prototype: DOMStringMap;
    new(): DOMStringMap;
};

/**
 * The **`DOMTokenList`** interface represents a set of space-separated tokens.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList)
 */
interface DOMTokenList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/length)
     */
    readonly length: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/value)
     */
    value: string;
    toString(): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/add)
     */
    add(...tokens: string[]): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/contains)
     */
    contains(token: string): boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/item)
     */
    item(index: number): string | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/remove)
     */
    remove(...tokens: string[]): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/replace)
     */
    replace(token: string, newToken: string): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/supports)
     */
    supports(token: string): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DOMTokenList/toggle)
     */
    toggle(token: string, force?: boolean): boolean;
    forEach(callbackfn: (value: string, key: number, parent: DOMTokenList) => void, thisArg?: any): void;
    [index: number]: string;
}

declare var DOMTokenList: {
    prototype: DOMTokenList;
    new(): DOMTokenList;
};

/**
 * The **`DataTransfer`** object is used to hold any data transferred between contexts, such as a drag and drop operation, or clipboard read/write.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer)
 */
interface DataTransfer {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/dropEffect)
     */
    dropEffect: "none" | "copy" | "link" | "move";
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/effectAllowed)
     */
    effectAllowed: "none" | "copy" | "copyLink" | "copyMove" | "link" | "linkMove" | "move" | "all" | "uninitialized";
    /**
     * Type: FileList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/files)
     */
    readonly files: FileList;
    /**
     * Type: DataTransferItemList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/items)
     */
    readonly items: DataTransferItemList;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/types)
     */
    readonly types: ReadonlyArray<string>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/clearData)
     */
    clearData(format?: string): void;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/getData)
     */
    getData(format: string): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setData)
     */
    setData(format: string, data: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransfer/setDragImage)
     */
    setDragImage(image: Element, x: number, y: number): void;
}

declare var DataTransfer: {
    prototype: DataTransfer;
    new(): DataTransfer;
};

/**
 * The **`DataTransferItem`** object represents one drag data item.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem)
 */
interface DataTransferItem {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/kind)
     */
    readonly kind: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/type)
     */
    readonly type: string;
    /**
     * Type: File
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsFile)
     */
    getAsFile(): File | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/getAsString)
     */
    getAsString(callback: FunctionStringCallback | null): void;
    /**
     * Type: FileSystemEntry
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItem/webkitGetAsEntry)
     */
    webkitGetAsEntry(): FileSystemEntry | null;
}

declare var DataTransferItem: {
    prototype: DataTransferItem;
    new(): DataTransferItem;
};

/**
 * The **`DataTransferItemList`** object is a list of DataTransferItem objects representing items being dragged.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList)
 */
interface DataTransferItemList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/length)
     */
    readonly length: number;
    /**
     * Type: DataTransferItem
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/add)
     */
    add(data: string, type: string): DataTransferItem | null;
    add(data: File): DataTransferItem | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/clear)
     */
    clear(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DataTransferItemList/remove)
     */
    remove(index: number): void;
    [index: number]: DataTransferItem;
}

declare var DataTransferItemList: {
    prototype: DataTransferItemList;
    new(): DataTransferItemList;
};

/**
 * The **`DecompressionStream`** interface of the Compression Streams API is an API for decompressing a stream of data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DecompressionStream)
 */
interface DecompressionStream extends GenericTransformStream {
    readonly readable: ReadableStream<Uint8Array<ArrayBuffer>>;
    readonly writable: WritableStream<BufferSource>;
}

declare var DecompressionStream: {
    prototype: DecompressionStream;
    new(format: CompressionFormat): DecompressionStream;
};

/**
 * The **`DelayNode`** interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode)
 */
interface DelayNode extends AudioNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DelayNode/delayTime)
     */
    readonly delayTime: AudioParam;
}

declare var DelayNode: {
    prototype: DelayNode;
    new(context: BaseAudioContext, options?: DelayOptions): DelayNode;
};

/**
 * The **`DeviceMotionEvent`** interface of the Device Orientation Events provides web developers with information about the speed of changes for the device's position and orientation.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent)
 */
interface DeviceMotionEvent extends Event {
    /**
     * Type: DeviceMotionEventAcceleration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/acceleration)
     */
    readonly acceleration: DeviceMotionEventAcceleration | null;
    /**
     * Type: DeviceMotionEventAcceleration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/accelerationIncludingGravity)
     */
    readonly accelerationIncludingGravity: DeviceMotionEventAcceleration | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/interval)
     */
    readonly interval: number;
    /**
     * Type: DeviceMotionEventRotationRate
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEvent/rotationRate)
     */
    readonly rotationRate: DeviceMotionEventRotationRate | null;
}

declare var DeviceMotionEvent: {
    prototype: DeviceMotionEvent;
    new(type: string, eventInitDict?: DeviceMotionEventInit): DeviceMotionEvent;
};

/**
 * The **`DeviceMotionEventAcceleration`** interface of the Device Orientation Events provides information about the amount of acceleration the device is experiencing along all three axes.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration)
 */
interface DeviceMotionEventAcceleration {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/x)
     */
    readonly x: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/y)
     */
    readonly y: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventAcceleration/z)
     */
    readonly z: number | null;
}

/**
 * A **`DeviceMotionEventRotationRate`** interface of the Device Orientation Events provides information about the rate at which the device is rotating around all three axes.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate)
 */
interface DeviceMotionEventRotationRate {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/alpha)
     */
    readonly alpha: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/beta)
     */
    readonly beta: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceMotionEventRotationRate/gamma)
     */
    readonly gamma: number | null;
}

/**
 * The **`DeviceOrientationEvent`** interface of the Device Orientation Events provides web developers with information from the physical orientation of the device running the web page.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent)
 */
interface DeviceOrientationEvent extends Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/absolute)
     */
    readonly absolute: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/alpha)
     */
    readonly alpha: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/beta)
     */
    readonly beta: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DeviceOrientationEvent/gamma)
     */
    readonly gamma: number | null;
}

declare var DeviceOrientationEvent: {
    prototype: DeviceOrientationEvent;
    new(type: string, eventInitDict?: DeviceOrientationEventInit): DeviceOrientationEvent;
};

interface DocumentEventMap extends GlobalEventHandlersEventMap {
    "DOMContentLoaded": Event;
    "fullscreenchange": Event;
    "fullscreenerror": Event;
    "pointerlockchange": Event;
    "pointerlockerror": Event;
    "readystatechange": Event;
    "visibilitychange": Event;
}

/**
 * The **`Document`** interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document)
 */
interface Document extends Node, DocumentOrShadowRoot, FontFaceSource, GlobalEventHandlers, NonElementParentNode, ParentNode, XPathEvaluatorBase {
    /**
     * Sets or gets the URL for the current document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/URL)
     */
    readonly URL: string;
    /**
     * Sets or gets the color of all active links in the document.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/alinkColor)
     */
    alinkColor: string;
    /**
     * Returns a reference to the collection of elements contained by the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/all)
     */
    readonly all: HTMLAllCollection;
    /**
     * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/anchors)
     */
    readonly anchors: HTMLCollectionOf<HTMLAnchorElement>;
    /**
     * Retrieves a collection of all applet objects in the document.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/applets)
     */
    readonly applets: HTMLCollection;
    /**
     * Deprecated. Sets or retrieves a value that indicates the background color behind the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/bgColor)
     */
    bgColor: string;
    /**
     * Specifies the beginning and end of the document body.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/body)
     */
    body: HTMLElement;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
     */
    readonly characterSet: string;
    /**
     * Gets or sets the character set used to encode the object.
     * @deprecated This is a legacy alias of `characterSet`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
     */
    readonly charset: string;
    /**
     * Gets a value that indicates whether standards-compliant mode is switched on for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/compatMode)
     */
    readonly compatMode: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/contentType)
     */
    readonly contentType: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/cookie)
     */
    cookie: string;
    /**
     * Type: HTMLOrSVGScriptElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/currentScript)
     */
    readonly currentScript: HTMLOrSVGScriptElement | null;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/defaultView)
     */
    readonly defaultView: (WindowProxy & typeof globalThis) | null;
    /**
     * Sets or gets a value that indicates whether the document can be edited.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/designMode)
     */
    designMode: string;
    /**
     * Sets or retrieves a value that indicates the reading order of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/dir)
     */
    dir: string;
    /**
     * Gets an object representing the document type declaration associated with the current document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/doctype)
     */
    readonly doctype: DocumentType | null;
    /**
     * Gets a reference to the root node of the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentElement)
     */
    readonly documentElement: HTMLElement;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/documentURI)
     */
    readonly documentURI: string;
    /**
     * Sets or gets the security domain of the document.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/domain)
     */
    domain: string;
    /**
     * Retrieves a collection of all embed objects in the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/embeds)
     */
    readonly embeds: HTMLCollectionOf<HTMLEmbedElement>;
    /**
     * Sets or gets the foreground (text) color of the document.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fgColor)
     */
    fgColor: string;
    /**
     * Retrieves a collection, in source order, of all form objects in the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/forms)
     */
    readonly forms: HTMLCollectionOf<HTMLFormElement>;
    /**
     * Type: FragmentDirective
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fragmentDirective)
     */
    readonly fragmentDirective: FragmentDirective;
    /**
     * Type: boolean
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreen)
     */
    readonly fullscreen: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenEnabled)
     */
    readonly fullscreenEnabled: boolean;
    /**
     * Type: HTMLHeadElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/head)
     */
    readonly head: HTMLHeadElement;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hidden)
     */
    readonly hidden: boolean;
    /**
     * Retrieves a collection, in source order, of img objects in the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/images)
     */
    readonly images: HTMLCollectionOf<HTMLImageElement>;
    /**
     * Gets the implementation object of the current document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/implementation)
     */
    readonly implementation: DOMImplementation;
    /**
     * Returns the character encoding used to create the webpage that is loaded into the document object.
     * @deprecated This is a legacy alias of `characterSet`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/characterSet)
     */
    readonly inputEncoding: string;
    /**
     * Gets the date that the page was last modified, if the page supplies one.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastModified)
     */
    readonly lastModified: string;
    /**
     * Sets or gets the color of the document links.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/linkColor)
     */
    linkColor: string;
    /**
     * Retrieves a collection of all a objects that specify the href property and all area objects in the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/links)
     */
    readonly links: HTMLCollectionOf<HTMLAnchorElement | HTMLAreaElement>;
    /**
     * Contains information about the current URL.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/location)
     */
    get location(): Location;
    set location(href: string);
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenchange_event)
     */
    onfullscreenchange: ((this: Document, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenerror_event)
     */
    onfullscreenerror: ((this: Document, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockchange_event)
     */
    onpointerlockchange: ((this: Document, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerlockerror_event)
     */
    onpointerlockerror: ((this: Document, ev: Event) => any) | null;
    /**
     * Fires when the state of the object has changed.
     * @param ev The event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readystatechange_event)
     */
    onreadystatechange: ((this: Document, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilitychange_event)
     */
    onvisibilitychange: ((this: Document, ev: Event) => any) | null;
    readonly ownerDocument: null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureEnabled)
     */
    readonly pictureInPictureEnabled: boolean;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/plugins)
     */
    readonly plugins: HTMLCollectionOf<HTMLEmbedElement>;
    /**
     * Retrieves a value that indicates the current state of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/readyState)
     */
    readonly readyState: DocumentReadyState;
    /**
     * Gets the URL of the location that referred the user to the current page.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/referrer)
     */
    readonly referrer: string;
    /**
     * Type: SVGSVGElement
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/rootElement)
     */
    readonly rootElement: SVGSVGElement | null;
    /**
     * Retrieves a collection of all script objects in the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scripts)
     */
    readonly scripts: HTMLCollectionOf<HTMLScriptElement>;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollingElement)
     */
    readonly scrollingElement: Element | null;
    /**
     * Type: DocumentTimeline
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/timeline)
     */
    readonly timeline: DocumentTimeline;
    /**
     * Contains the title of the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/title)
     */
    title: string;
    /**
     * Type: DocumentVisibilityState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/visibilityState)
     */
    readonly visibilityState: DocumentVisibilityState;
    /**
     * Sets or gets the color of the links that the user has visited.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/vlinkColor)
     */
    vlinkColor: string;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptNode)
     */
    adoptNode<T extends Node>(node: T): T;
    /**
     * Type: undefined
     * @deprecated
     */
    captureEvents(): void;
    /**
     * Type: CaretPosition
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/caretPositionFromPoint)
     */
    caretPositionFromPoint(x: number, y: number, options?: CaretPositionFromPointOptions): CaretPosition | null;
    /** @deprecated */
    caretRangeFromPoint(x: number, y: number): Range | null;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/clear)
     */
    clear(): void;
    /**
     * Closes an output stream and forces the sent data to display.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/close)
     */
    close(): void;
    /**
     * Creates an attribute object with a specified name.
     * @param name String that sets the attribute object's name.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createAttribute)
     */
    createAttribute(localName: string): Attr;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createAttributeNS)
     */
    createAttributeNS(namespace: string | null, qualifiedName: string): Attr;
    /**
     * Type: CDATASection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createCDATASection)
     */
    createCDATASection(data: string): CDATASection;
    /**
     * Creates a comment object with the specified data.
     * @param data Sets the comment object's data.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createComment)
     */
    createComment(data: string): Comment;
    /**
     * Creates a new document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createDocumentFragment)
     */
    createDocumentFragment(): DocumentFragment;
    /**
     * Creates an instance of the element for the specified tag.
     * @param tagName The name of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createElement)
     */
    createElement<K extends keyof HTMLElementTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementTagNameMap[K];
    /** @deprecated */
    createElement<K extends keyof HTMLElementDeprecatedTagNameMap>(tagName: K, options?: ElementCreationOptions): HTMLElementDeprecatedTagNameMap[K];
    createElement(tagName: string, options?: ElementCreationOptions): HTMLElement;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createElementNS)
     */
    createElementNS(namespaceURI: "http://www.w3.org/1999/xhtml", qualifiedName: string): HTMLElement;
    createElementNS<K extends keyof SVGElementTagNameMap>(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: K): SVGElementTagNameMap[K];
    createElementNS(namespaceURI: "http://www.w3.org/2000/svg", qualifiedName: string): SVGElement;
    createElementNS<K extends keyof MathMLElementTagNameMap>(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: K): MathMLElementTagNameMap[K];
    createElementNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", qualifiedName: string): MathMLElement;
    createElementNS(namespaceURI: string | null, qualifiedName: string, options?: ElementCreationOptions): Element;
    createElementNS(namespace: string | null, qualifiedName: string, options?: string | ElementCreationOptions): Element;
    /**
     * Type: Event
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createEvent)
     */
    createEvent(eventInterface: "AnimationEvent"): AnimationEvent;
    createEvent(eventInterface: "AnimationPlaybackEvent"): AnimationPlaybackEvent;
    createEvent(eventInterface: "AudioProcessingEvent"): AudioProcessingEvent;
    createEvent(eventInterface: "BeforeUnloadEvent"): BeforeUnloadEvent;
    createEvent(eventInterface: "BlobEvent"): BlobEvent;
    createEvent(eventInterface: "ClipboardEvent"): ClipboardEvent;
    createEvent(eventInterface: "CloseEvent"): CloseEvent;
    createEvent(eventInterface: "CompositionEvent"): CompositionEvent;
    createEvent(eventInterface: "ContentVisibilityAutoStateChangeEvent"): ContentVisibilityAutoStateChangeEvent;
    createEvent(eventInterface: "CookieChangeEvent"): CookieChangeEvent;
    createEvent(eventInterface: "CustomEvent"): CustomEvent;
    createEvent(eventInterface: "DeviceMotionEvent"): DeviceMotionEvent;
    createEvent(eventInterface: "DeviceOrientationEvent"): DeviceOrientationEvent;
    createEvent(eventInterface: "DragEvent"): DragEvent;
    createEvent(eventInterface: "ErrorEvent"): ErrorEvent;
    createEvent(eventInterface: "Event"): Event;
    createEvent(eventInterface: "Events"): Event;
    createEvent(eventInterface: "FocusEvent"): FocusEvent;
    createEvent(eventInterface: "FontFaceSetLoadEvent"): FontFaceSetLoadEvent;
    createEvent(eventInterface: "FormDataEvent"): FormDataEvent;
    createEvent(eventInterface: "GamepadEvent"): GamepadEvent;
    createEvent(eventInterface: "HashChangeEvent"): HashChangeEvent;
    createEvent(eventInterface: "IDBVersionChangeEvent"): IDBVersionChangeEvent;
    createEvent(eventInterface: "InputEvent"): InputEvent;
    createEvent(eventInterface: "KeyboardEvent"): KeyboardEvent;
    createEvent(eventInterface: "MIDIConnectionEvent"): MIDIConnectionEvent;
    createEvent(eventInterface: "MIDIMessageEvent"): MIDIMessageEvent;
    createEvent(eventInterface: "MediaEncryptedEvent"): MediaEncryptedEvent;
    createEvent(eventInterface: "MediaKeyMessageEvent"): MediaKeyMessageEvent;
    createEvent(eventInterface: "MediaQueryListEvent"): MediaQueryListEvent;
    createEvent(eventInterface: "MediaStreamTrackEvent"): MediaStreamTrackEvent;
    createEvent(eventInterface: "MessageEvent"): MessageEvent;
    createEvent(eventInterface: "MouseEvent"): MouseEvent;
    createEvent(eventInterface: "MouseEvents"): MouseEvent;
    createEvent(eventInterface: "OfflineAudioCompletionEvent"): OfflineAudioCompletionEvent;
    createEvent(eventInterface: "PageRevealEvent"): PageRevealEvent;
    createEvent(eventInterface: "PageSwapEvent"): PageSwapEvent;
    createEvent(eventInterface: "PageTransitionEvent"): PageTransitionEvent;
    createEvent(eventInterface: "PaymentMethodChangeEvent"): PaymentMethodChangeEvent;
    createEvent(eventInterface: "PaymentRequestUpdateEvent"): PaymentRequestUpdateEvent;
    createEvent(eventInterface: "PictureInPictureEvent"): PictureInPictureEvent;
    createEvent(eventInterface: "PointerEvent"): PointerEvent;
    createEvent(eventInterface: "PopStateEvent"): PopStateEvent;
    createEvent(eventInterface: "ProgressEvent"): ProgressEvent;
    createEvent(eventInterface: "PromiseRejectionEvent"): PromiseRejectionEvent;
    createEvent(eventInterface: "RTCDTMFToneChangeEvent"): RTCDTMFToneChangeEvent;
    createEvent(eventInterface: "RTCDataChannelEvent"): RTCDataChannelEvent;
    createEvent(eventInterface: "RTCErrorEvent"): RTCErrorEvent;
    createEvent(eventInterface: "RTCPeerConnectionIceErrorEvent"): RTCPeerConnectionIceErrorEvent;
    createEvent(eventInterface: "RTCPeerConnectionIceEvent"): RTCPeerConnectionIceEvent;
    createEvent(eventInterface: "RTCTrackEvent"): RTCTrackEvent;
    createEvent(eventInterface: "SecurityPolicyViolationEvent"): SecurityPolicyViolationEvent;
    createEvent(eventInterface: "SpeechSynthesisErrorEvent"): SpeechSynthesisErrorEvent;
    createEvent(eventInterface: "SpeechSynthesisEvent"): SpeechSynthesisEvent;
    createEvent(eventInterface: "StorageEvent"): StorageEvent;
    createEvent(eventInterface: "SubmitEvent"): SubmitEvent;
    createEvent(eventInterface: "TextEvent"): TextEvent;
    createEvent(eventInterface: "ToggleEvent"): ToggleEvent;
    createEvent(eventInterface: "TouchEvent"): TouchEvent;
    createEvent(eventInterface: "TrackEvent"): TrackEvent;
    createEvent(eventInterface: "TransitionEvent"): TransitionEvent;
    createEvent(eventInterface: "UIEvent"): UIEvent;
    createEvent(eventInterface: "UIEvents"): UIEvent;
    createEvent(eventInterface: "WebGLContextEvent"): WebGLContextEvent;
    createEvent(eventInterface: "WheelEvent"): WheelEvent;
    createEvent(eventInterface: string): Event;
    /**
     * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document.
     * @param root The root element or node to start traversing on.
     * @param whatToShow The type of nodes or elements to appear in the node list
     * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createNodeIterator)
     */
    createNodeIterator(root: Node, whatToShow?: number, filter?: NodeFilter | null): NodeIterator;
    /**
     * Type: ProcessingInstruction
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createProcessingInstruction)
     */
    createProcessingInstruction(target: string, data: string): ProcessingInstruction;
    /**
     *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createRange)
     */
    createRange(): Range;
    /**
     * Creates a text string from the specified value.
     * @param data String that specifies the nodeValue property of the text node.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createTextNode)
     */
    createTextNode(data: string): Text;
    /**
     * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.
     * @param root The root element or node to start traversing on.
     * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.
     * @param filter A custom NodeFilter function to use.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createTreeWalker)
     */
    createTreeWalker(root: Node, whatToShow?: number, filter?: NodeFilter | null): TreeWalker;
    /**
     * Executes a command on the current document, current selection, or the given range.
     * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.
     * @param showUI Display the user interface, defaults to false.
     * @param value Value to assign.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/execCommand)
     */
    execCommand(commandId: string, showUI?: boolean, value?: string): boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/exitFullscreen)
     */
    exitFullscreen(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/exitPictureInPicture)
     */
    exitPictureInPicture(): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/exitPointerLock)
     */
    exitPointerLock(): void;
    /**
     * Returns a reference to the first object with the specified value of the ID attribute.
     * @param elementId String that specifies the ID value.
     */
    getElementById(elementId: string): HTMLElement | null;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByClassName)
     */
    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
    /**
     * Gets a collection of objects based on the value of the NAME or ID attribute.
     * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByName)
     */
    getElementsByName(elementName: string): NodeListOf<HTMLElement>;
    /**
     * Retrieves a collection of objects based on the specified element name.
     * @param name Specifies the name of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagName)
     */
    getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
    getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
    getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
    /** @deprecated */
    getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementsByTagNameNS)
     */
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
    getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
    /**
     * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getSelection)
     */
    getSelection(): Selection | null;
    /**
     * Gets a value indicating whether the object currently has focus.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hasFocus)
     */
    hasFocus(): boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/hasStorageAccess)
     */
    hasStorageAccess(): Promise<boolean>;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/importNode)
     */
    importNode<T extends Node>(node: T, options?: boolean | ImportNodeOptions): T;
    /**
     * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.
     * @param url Specifies a MIME type for the document.
     * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.
     * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, "fullscreen=yes, toolbar=yes"). The following values are supported.
     * @param replace Specifies whether the existing entry for the document is replaced in the history list.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/open)
     */
    open(unused1?: string, unused2?: string): Document;
    open(url: string | URL, name: string, features: string): WindowProxy | null;
    /**
     * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.
     * @param commandId Specifies a command identifier.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandEnabled)
     */
    queryCommandEnabled(commandId: string): boolean;
    /**
     * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.
     * @param commandId String that specifies a command identifier.
     * @deprecated
     */
    queryCommandIndeterm(commandId: string): boolean;
    /**
     * Returns a Boolean value that indicates the current state of the command.
     * @param commandId String that specifies a command identifier.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandState)
     */
    queryCommandState(commandId: string): boolean;
    /**
     * Returns a Boolean value that indicates whether the current command is supported on the current range.
     * @param commandId Specifies a command identifier.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/queryCommandSupported)
     */
    queryCommandSupported(commandId: string): boolean;
    /**
     * Returns the current value of the document, range, or current selection for the given command.
     * @param commandId String that specifies a command identifier.
     * @deprecated
     */
    queryCommandValue(commandId: string): string;
    /**
     * Type: undefined
     * @deprecated
     */
    releaseEvents(): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/requestStorageAccess)
     */
    requestStorageAccess(): Promise<void>;
    /**
     * Type: ViewTransition
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/startViewTransition)
     */
    startViewTransition(callbackOptions?: ViewTransitionUpdateCallback | StartViewTransitionOptions): ViewTransition;
    /**
     * Writes one or more HTML expressions to a document in the specified window.
     * @param content Specifies the text and HTML tags to write.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/write)
     */
    write(...text: string[]): void;
    /**
     * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window.
     * @param content The text and HTML tags to write.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/writeln)
     */
    writeln(...text: string[]): void;
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var Document: {
    prototype: Document;
    new(): Document;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/parseHTMLUnsafe_static)
     */
    parseHTMLUnsafe(html: string): Document;
};

/**
 * The **`DocumentFragment`** interface represents a minimal document object that has no parent.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentFragment)
 */
interface DocumentFragment extends Node, NonElementParentNode, ParentNode {
    readonly ownerDocument: Document;
    getElementById(elementId: string): HTMLElement | null;
}

declare var DocumentFragment: {
    prototype: DocumentFragment;
    new(): DocumentFragment;
};

interface DocumentOrShadowRoot {
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/activeElement)
     */
    readonly activeElement: Element | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/adoptedStyleSheets)
     */
    adoptedStyleSheets: CSSStyleSheet[];
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fullscreenElement)
     */
    readonly fullscreenElement: Element | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pictureInPictureElement)
     */
    readonly pictureInPictureElement: Element | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/pointerLockElement)
     */
    readonly pointerLockElement: Element | null;
    /**
     * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/styleSheets)
     */
    readonly styleSheets: StyleSheetList;
    /**
     * Returns the element for the specified x coordinate and the specified y coordinate.
     * @param x The x-offset
     * @param y The y-offset
     */
    elementFromPoint(x: number, y: number): Element | null;
    elementsFromPoint(x: number, y: number): Element[];
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getAnimations)
     */
    getAnimations(): Animation[];
}

/**
 * The **`DocumentTimeline`** interface of the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentTimeline)
 */
interface DocumentTimeline extends AnimationTimeline {
}

declare var DocumentTimeline: {
    prototype: DocumentTimeline;
    new(options?: DocumentTimelineOptions): DocumentTimeline;
};

/**
 * The **`DocumentType`** interface represents a Node containing a doctype.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType)
 */
interface DocumentType extends Node, ChildNode {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/name)
     */
    readonly name: string;
    readonly ownerDocument: Document;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/publicId)
     */
    readonly publicId: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DocumentType/systemId)
     */
    readonly systemId: string;
}

declare var DocumentType: {
    prototype: DocumentType;
    new(): DocumentType;
};

/**
 * The **`DragEvent`** interface is a DOM event that represents a drag and drop interaction.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent)
 */
interface DragEvent extends MouseEvent {
    /**
     * Type: DataTransfer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DragEvent/dataTransfer)
     */
    readonly dataTransfer: DataTransfer | null;
}

declare var DragEvent: {
    prototype: DragEvent;
    new(type: string, eventInitDict?: DragEventInit): DragEvent;
};

/**
 * The `DynamicsCompressorNode` interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode)
 */
interface DynamicsCompressorNode extends AudioNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/attack)
     */
    readonly attack: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/knee)
     */
    readonly knee: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/ratio)
     */
    readonly ratio: AudioParam;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/reduction)
     */
    readonly reduction: number;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/release)
     */
    readonly release: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DynamicsCompressorNode/threshold)
     */
    readonly threshold: AudioParam;
}

declare var DynamicsCompressorNode: {
    prototype: DynamicsCompressorNode;
    new(context: BaseAudioContext, options?: DynamicsCompressorOptions): DynamicsCompressorNode;
};

/**
 * The **`EXT_blend_minmax`** extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_blend_minmax)
 */
interface EXT_blend_minmax {
    /** Type: GLenum */
    readonly MIN_EXT: 0x8007;
    /** Type: GLenum */
    readonly MAX_EXT: 0x8008;
}

/**
 * The **`EXT_color_buffer_float`** extension is part of WebGL and adds the ability to render a variety of floating point formats.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_float)
 */
interface EXT_color_buffer_float {
}

/**
 * The **`EXT_color_buffer_half_float`** extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_color_buffer_half_float)
 */
interface EXT_color_buffer_half_float {
    /** Type: GLenum */
    readonly RGBA16F_EXT: 0x881A;
    /** Type: GLenum */
    readonly RGB16F_EXT: 0x881B;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211;
    /** Type: GLenum */
    readonly UNSIGNED_NORMALIZED_EXT: 0x8C17;
}

/**
 * The WebGL API's `EXT_float_blend` extension allows blending and draw buffers with 32-bit floating-point components.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_float_blend)
 */
interface EXT_float_blend {
}

/**
 * The **`EXT_frag_depth`** extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_frag_depth)
 */
interface EXT_frag_depth {
}

/**
 * The **`EXT_sRGB`** extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_sRGB)
 */
interface EXT_sRGB {
    /** Type: GLenum */
    readonly SRGB_EXT: 0x8C40;
    /** Type: GLenum */
    readonly SRGB_ALPHA_EXT: 0x8C42;
    /** Type: GLenum */
    readonly SRGB8_ALPHA8_EXT: 0x8C43;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT: 0x8210;
}

/**
 * The **`EXT_shader_texture_lod`** extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_shader_texture_lod)
 */
interface EXT_shader_texture_lod {
}

/**
 * The `EXT_texture_compression_bptc` extension is part of the WebGL API and exposes 4 BPTC compressed texture formats.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_bptc)
 */
interface EXT_texture_compression_bptc {
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_BPTC_UNORM_EXT: 0x8E8C;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT: 0x8E8D;
    /** Type: GLenum */
    readonly COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT: 0x8E8E;
    /** Type: GLenum */
    readonly COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT: 0x8E8F;
}

/**
 * The `EXT_texture_compression_rgtc` extension is part of the WebGL API and exposes 4 RGTC compressed texture formats.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_compression_rgtc)
 */
interface EXT_texture_compression_rgtc {
    /** Type: GLenum */
    readonly COMPRESSED_RED_RGTC1_EXT: 0x8DBB;
    /** Type: GLenum */
    readonly COMPRESSED_SIGNED_RED_RGTC1_EXT: 0x8DBC;
    /** Type: GLenum */
    readonly COMPRESSED_RED_GREEN_RGTC2_EXT: 0x8DBD;
    /** Type: GLenum */
    readonly COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT: 0x8DBE;
}

/**
 * The **`EXT_texture_filter_anisotropic`** extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_filter_anisotropic)
 */
interface EXT_texture_filter_anisotropic {
    /** Type: GLenum */
    readonly TEXTURE_MAX_ANISOTROPY_EXT: 0x84FE;
    /** Type: GLenum */
    readonly MAX_TEXTURE_MAX_ANISOTROPY_EXT: 0x84FF;
}

/**
 * The **`EXT_texture_norm16`** extension is part of the WebGL API and provides a set of new 16-bit signed normalized and unsigned normalized formats (fixed-point texture, renderbuffer and texture buffer).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EXT_texture_norm16)
 */
interface EXT_texture_norm16 {
    /** Type: GLenum */
    readonly R16_EXT: 0x822A;
    /** Type: GLenum */
    readonly RG16_EXT: 0x822C;
    /** Type: GLenum */
    readonly RGB16_EXT: 0x8054;
    /** Type: GLenum */
    readonly RGBA16_EXT: 0x805B;
    /** Type: GLenum */
    readonly R16_SNORM_EXT: 0x8F98;
    /** Type: GLenum */
    readonly RG16_SNORM_EXT: 0x8F99;
    /** Type: GLenum */
    readonly RGB16_SNORM_EXT: 0x8F9A;
    /** Type: GLenum */
    readonly RGBA16_SNORM_EXT: 0x8F9B;
}

interface ElementEventMap {
    "fullscreenchange": Event;
    "fullscreenerror": Event;
}

/**
 * **`Element`** is the most general base class from which all element objects (i.e., objects that represent elements) in a Document inherit.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element)
 */
interface Element extends Node, ARIAMixin, Animatable, ChildNode, NonDocumentTypeChildNode, ParentNode, Slottable {
    /**
     * Type: NamedNodeMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attributes)
     */
    readonly attributes: NamedNodeMap;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/classList)
     */
    get classList(): DOMTokenList;
    set classList(value: string);
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/className)
     */
    className: string;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientHeight)
     */
    readonly clientHeight: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientLeft)
     */
    readonly clientLeft: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientTop)
     */
    readonly clientTop: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/clientWidth)
     */
    readonly clientWidth: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/currentCSSZoom)
     */
    readonly currentCSSZoom: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/id)
     */
    id: string;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/innerHTML)
     */
    innerHTML: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/localName)
     */
    readonly localName: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/namespaceURI)
     */
    readonly namespaceURI: string | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenchange_event)
     */
    onfullscreenchange: ((this: Element, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/fullscreenerror_event)
     */
    onfullscreenerror: ((this: Element, ev: Event) => any) | null;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/outerHTML)
     */
    outerHTML: string;
    readonly ownerDocument: Document;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/part)
     */
    get part(): DOMTokenList;
    set part(value: string);
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/prefix)
     */
    readonly prefix: string | null;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollHeight)
     */
    readonly scrollHeight: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollLeft)
     */
    scrollLeft: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTop)
     */
    scrollTop: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollWidth)
     */
    readonly scrollWidth: number;
    /**
     * Type: ShadowRoot
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/shadowRoot)
     */
    readonly shadowRoot: ShadowRoot | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/slot)
     */
    slot: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/tagName)
     */
    readonly tagName: string;
    /**
     * Type: ShadowRoot
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/attachShadow)
     */
    attachShadow(init: ShadowRootInit): ShadowRoot;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/checkVisibility)
     */
    checkVisibility(options?: CheckVisibilityOptions): boolean;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/closest)
     */
    closest<K extends keyof HTMLElementTagNameMap>(selector: K): HTMLElementTagNameMap[K] | null;
    closest<K extends keyof SVGElementTagNameMap>(selector: K): SVGElementTagNameMap[K] | null;
    closest<K extends keyof MathMLElementTagNameMap>(selector: K): MathMLElementTagNameMap[K] | null;
    closest<E extends Element = Element>(selectors: string): E | null;
    /**
     * Type: StylePropertyMapReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/computedStyleMap)
     */
    computedStyleMap(): StylePropertyMapReadOnly;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttribute)
     */
    getAttribute(qualifiedName: string): string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNS)
     */
    getAttributeNS(namespace: string | null, localName: string): string | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNames)
     */
    getAttributeNames(): string[];
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNode)
     */
    getAttributeNode(qualifiedName: string): Attr | null;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getAttributeNodeNS)
     */
    getAttributeNodeNS(namespace: string | null, localName: string): Attr | null;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getBoundingClientRect)
     */
    getBoundingClientRect(): DOMRect;
    /**
     * Type: DOMRectList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getClientRects)
     */
    getClientRects(): DOMRectList;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByClassName)
     */
    getElementsByClassName(classNames: string): HTMLCollectionOf<Element>;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagName)
     */
    getElementsByTagName<K extends keyof HTMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementTagNameMap[K]>;
    getElementsByTagName<K extends keyof SVGElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<SVGElementTagNameMap[K]>;
    getElementsByTagName<K extends keyof MathMLElementTagNameMap>(qualifiedName: K): HTMLCollectionOf<MathMLElementTagNameMap[K]>;
    /** @deprecated */
    getElementsByTagName<K extends keyof HTMLElementDeprecatedTagNameMap>(qualifiedName: K): HTMLCollectionOf<HTMLElementDeprecatedTagNameMap[K]>;
    getElementsByTagName(qualifiedName: string): HTMLCollectionOf<Element>;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getElementsByTagNameNS)
     */
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1999/xhtml", localName: string): HTMLCollectionOf<HTMLElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/2000/svg", localName: string): HTMLCollectionOf<SVGElement>;
    getElementsByTagNameNS(namespaceURI: "http://www.w3.org/1998/Math/MathML", localName: string): HTMLCollectionOf<MathMLElement>;
    getElementsByTagNameNS(namespace: string | null, localName: string): HTMLCollectionOf<Element>;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/getHTML)
     */
    getHTML(options?: GetHTMLOptions): string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttribute)
     */
    hasAttribute(qualifiedName: string): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributeNS)
     */
    hasAttributeNS(namespace: string | null, localName: string): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasAttributes)
     */
    hasAttributes(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/hasPointerCapture)
     */
    hasPointerCapture(pointerId: number): boolean;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentElement)
     */
    insertAdjacentElement(where: InsertPosition, element: Element): Element | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentHTML)
     */
    insertAdjacentHTML(position: InsertPosition, string: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/insertAdjacentText)
     */
    insertAdjacentText(where: InsertPosition, data: string): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)
     */
    matches(selectors: string): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/releasePointerCapture)
     */
    releasePointerCapture(pointerId: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttribute)
     */
    removeAttribute(qualifiedName: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNS)
     */
    removeAttributeNS(namespace: string | null, localName: string): void;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/removeAttributeNode)
     */
    removeAttributeNode(attr: Attr): Attr;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/requestFullscreen)
     */
    requestFullscreen(options?: FullscreenOptions): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/requestPointerLock)
     */
    requestPointerLock(options?: PointerLockOptions): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scroll)
     */
    scroll(options?: ScrollToOptions): void;
    scroll(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollBy)
     */
    scrollBy(options?: ScrollToOptions): void;
    scrollBy(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollIntoView)
     */
    scrollIntoView(arg?: boolean | ScrollIntoViewOptions): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/scrollTo)
     */
    scrollTo(options?: ScrollToOptions): void;
    scrollTo(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttribute)
     */
    setAttribute(qualifiedName: string, value: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNS)
     */
    setAttributeNS(namespace: string | null, qualifiedName: string, value: string): void;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNode)
     */
    setAttributeNode(attr: Attr): Attr | null;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setAttributeNodeNS)
     */
    setAttributeNodeNS(attr: Attr): Attr | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setHTMLUnsafe)
     */
    setHTMLUnsafe(html: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/setPointerCapture)
     */
    setPointerCapture(pointerId: number): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/toggleAttribute)
     */
    toggleAttribute(qualifiedName: string, force?: boolean): boolean;
    /**
     * Type: boolean
     * @deprecated This is a legacy alias of `matches`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/matches)
     */
    webkitMatchesSelector(selectors: string): boolean;
    addEventListener<K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ElementEventMap>(type: K, listener: (this: Element, ev: ElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var Element: {
    prototype: Element;
    new(): Element;
};

interface ElementCSSInlineStyle {
    /**
     * Type: StylePropertyMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attributeStyleMap)
     */
    readonly attributeStyleMap: StylePropertyMap;
    /**
     * Type: CSSStyleDeclaration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/style)
     */
    get style(): CSSStyleDeclaration;
    set style(cssText: string);
}

interface ElementContentEditable {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/contentEditable)
     */
    contentEditable: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/enterKeyHint)
     */
    enterKeyHint: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inputMode)
     */
    inputMode: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/isContentEditable)
     */
    readonly isContentEditable: boolean;
}

/**
 * The **`ElementInternals`** interface of the Document Object Model gives web developers a way to allow custom elements to fully participate in HTML forms.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals)
 */
interface ElementInternals extends ARIAMixin {
    /**
     * Type: HTMLFormElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/labels)
     */
    readonly labels: NodeList;
    /**
     * Type: ShadowRoot
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/shadowRoot)
     */
    readonly shadowRoot: ShadowRoot | null;
    /**
     * Type: CustomStateSet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/states)
     */
    readonly states: CustomStateSet;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Type: ValidityState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/validity)
     */
    readonly validity: ValidityState;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/setFormValue)
     */
    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ElementInternals/setValidity)
     */
    setValidity(flags?: ValidityStateFlags, message?: string, anchor?: HTMLElement): void;
}

declare var ElementInternals: {
    prototype: ElementInternals;
    new(): ElementInternals;
};

/**
 * The **`EncodedAudioChunk`** interface of the WebCodecs API represents a chunk of encoded audio data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk)
 */
interface EncodedAudioChunk {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/byteLength)
     */
    readonly byteLength: number;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/duration)
     */
    readonly duration: number | null;
    /**
     * Type: long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/timestamp)
     */
    readonly timestamp: number;
    /**
     * Type: EncodedAudioChunkType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/type)
     */
    readonly type: EncodedAudioChunkType;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedAudioChunk/copyTo)
     */
    copyTo(destination: AllowSharedBufferSource): void;
}

declare var EncodedAudioChunk: {
    prototype: EncodedAudioChunk;
    new(init: EncodedAudioChunkInit): EncodedAudioChunk;
};

/**
 * The **`EncodedVideoChunk`** interface of the WebCodecs API represents a chunk of encoded video data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk)
 */
interface EncodedVideoChunk {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/byteLength)
     */
    readonly byteLength: number;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/duration)
     */
    readonly duration: number | null;
    /**
     * Type: long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/timestamp)
     */
    readonly timestamp: number;
    /**
     * Type: EncodedVideoChunkType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/type)
     */
    readonly type: EncodedVideoChunkType;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EncodedVideoChunk/copyTo)
     */
    copyTo(destination: AllowSharedBufferSource): void;
}

declare var EncodedVideoChunk: {
    prototype: EncodedVideoChunk;
    new(init: EncodedVideoChunkInit): EncodedVideoChunk;
};

/**
 * The **`ErrorEvent`** interface represents events providing information related to errors in scripts or in files.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent)
 */
interface ErrorEvent extends Event {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/colno)
     */
    readonly colno: number;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/error)
     */
    readonly error: any;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/filename)
     */
    readonly filename: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/lineno)
     */
    readonly lineno: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ErrorEvent/message)
     */
    readonly message: string;
}

declare var ErrorEvent: {
    prototype: ErrorEvent;
    new(type: string, eventInitDict?: ErrorEventInit): ErrorEvent;
};

/**
 * The **`Event`** interface represents an event which takes place on an `EventTarget`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event)
 */
interface Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/bubbles)
     */
    readonly bubbles: boolean;
    /**
     * Type: boolean
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelBubble)
     */
    cancelBubble: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/cancelable)
     */
    readonly cancelable: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composed)
     */
    readonly composed: boolean;
    /**
     * Type: EventTarget
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/currentTarget)
     */
    readonly currentTarget: EventTarget | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/defaultPrevented)
     */
    readonly defaultPrevented: boolean;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/eventPhase)
     */
    readonly eventPhase: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/isTrusted)
     */
    readonly isTrusted: boolean;
    /**
     * Type: boolean
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/returnValue)
     */
    returnValue: boolean;
    /**
     * Type: EventTarget
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/srcElement)
     */
    readonly srcElement: EventTarget | null;
    /**
     * Type: EventTarget
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/target)
     */
    readonly target: EventTarget | null;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/timeStamp)
     */
    readonly timeStamp: DOMHighResTimeStamp;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/type)
     */
    readonly type: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/composedPath)
     */
    composedPath(): EventTarget[];
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/initEvent)
     */
    initEvent(type: string, bubbles?: boolean, cancelable?: boolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/preventDefault)
     */
    preventDefault(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/stopImmediatePropagation)
     */
    stopImmediatePropagation(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Event/stopPropagation)
     */
    stopPropagation(): void;
    /** Type: unsigned short */
    readonly NONE: 0;
    /** Type: unsigned short */
    readonly CAPTURING_PHASE: 1;
    /** Type: unsigned short */
    readonly AT_TARGET: 2;
    /** Type: unsigned short */
    readonly BUBBLING_PHASE: 3;
}

declare var Event: {
    prototype: Event;
    new(type: string, eventInitDict?: EventInit): Event;
    /** Type: unsigned short */
    readonly NONE: 0;
    /** Type: unsigned short */
    readonly CAPTURING_PHASE: 1;
    /** Type: unsigned short */
    readonly AT_TARGET: 2;
    /** Type: unsigned short */
    readonly BUBBLING_PHASE: 3;
};

/**
 * The **`EventCounts`** interface of the Performance API provides the number of events that have been dispatched for each event type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventCounts)
 */
interface EventCounts {
    forEach(callbackfn: (value: number, key: string, parent: EventCounts) => void, thisArg?: any): void;
}

declare var EventCounts: {
    prototype: EventCounts;
    new(): EventCounts;
};

interface EventListener {
    (evt: Event): void;
}

interface EventListenerObject {
    handleEvent(object: Event): void;
}

interface EventSourceEventMap {
    "error": Event;
    "message": MessageEvent;
    "open": Event;
}

/**
 * The **`EventSource`** interface is web content's interface to server-sent events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource)
 */
interface EventSource extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/error_event)
     */
    onerror: ((this: EventSource, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/message_event)
     */
    onmessage: ((this: EventSource, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/open_event)
     */
    onopen: ((this: EventSource, ev: Event) => any) | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/readyState)
     */
    readonly readyState: number;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/url)
     */
    readonly url: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/withCredentials)
     */
    readonly withCredentials: boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventSource/close)
     */
    close(): void;
    /** Type: unsigned short */
    readonly CONNECTING: 0;
    /** Type: unsigned short */
    readonly OPEN: 1;
    /** Type: unsigned short */
    readonly CLOSED: 2;
    addEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: (this: EventSource, event: MessageEvent) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof EventSourceEventMap>(type: K, listener: (this: EventSource, ev: EventSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: (this: EventSource, event: MessageEvent) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var EventSource: {
    prototype: EventSource;
    new(url: string | URL, eventSourceInitDict?: EventSourceInit): EventSource;
    /** Type: unsigned short */
    readonly CONNECTING: 0;
    /** Type: unsigned short */
    readonly OPEN: 1;
    /** Type: unsigned short */
    readonly CLOSED: 2;
};

/**
 * The **`EventTarget`** interface is implemented by objects that can receive events and may have listeners for them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget)
 */
interface EventTarget {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener)
     */
    addEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: AddEventListenerOptions | boolean): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
     */
    dispatchEvent(event: Event): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/removeEventListener)
     */
    removeEventListener(type: string, callback: EventListenerOrEventListenerObject | null, options?: EventListenerOptions | boolean): void;
}

declare var EventTarget: {
    prototype: EventTarget;
    new(): EventTarget;
};

/** @deprecated */
interface External {
    /**
     * Type: undefined
     * @deprecated
     */
    AddSearchProvider(): void;
    /**
     * Type: undefined
     * @deprecated
     */
    IsSearchProviderInstalled(): void;
}

/** @deprecated */
declare var External: {
    prototype: External;
    new(): External;
};

/**
 * The **`File`** interface provides information about files and allows JavaScript in a web page to access their content.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/File)
 */
interface File extends Blob {
    /**
     * Type: long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/lastModified)
     */
    readonly lastModified: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/name)
     */
    readonly name: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/File/webkitRelativePath)
     */
    readonly webkitRelativePath: string;
}

declare var File: {
    prototype: File;
    new(fileBits: BlobPart[], fileName: string, options?: FilePropertyBag): File;
};

/**
 * The **`FileList`** interface represents an object of this type returned by the `files` property of the HTML input element; this lets you access the list of files selected with the `<input type='file'>` element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList)
 */
interface FileList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/length)
     */
    readonly length: number;
    /**
     * Type: File
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileList/item)
     */
    item(index: number): File | null;
    [index: number]: File;
}

declare var FileList: {
    prototype: FileList;
    new(): FileList;
};

interface FileReaderEventMap {
    "abort": ProgressEvent<FileReader>;
    "error": ProgressEvent<FileReader>;
    "load": ProgressEvent<FileReader>;
    "loadend": ProgressEvent<FileReader>;
    "loadstart": ProgressEvent<FileReader>;
    "progress": ProgressEvent<FileReader>;
}

/**
 * The **`FileReader`** interface lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader)
 */
interface FileReader extends EventTarget {
    /**
     * Type: DOMException
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error)
     */
    readonly error: DOMException | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort_event)
     */
    onabort: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/error_event)
     */
    onerror: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/load_event)
     */
    onload: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadend_event)
     */
    onloadend: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/loadstart_event)
     */
    onloadstart: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/progress_event)
     */
    onprogress: ((this: FileReader, ev: ProgressEvent<FileReader>) => any) | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readyState)
     */
    readonly readyState: typeof FileReader.EMPTY | typeof FileReader.LOADING | typeof FileReader.DONE;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/result)
     */
    readonly result: string | ArrayBuffer | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/abort)
     */
    abort(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsArrayBuffer)
     */
    readAsArrayBuffer(blob: Blob): void;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsBinaryString)
     */
    readAsBinaryString(blob: Blob): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsDataURL)
     */
    readAsDataURL(blob: Blob): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileReader/readAsText)
     */
    readAsText(blob: Blob, encoding?: string): void;
    /** Type: unsigned short */
    readonly EMPTY: 0;
    /** Type: unsigned short */
    readonly LOADING: 1;
    /** Type: unsigned short */
    readonly DONE: 2;
    addEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof FileReaderEventMap>(type: K, listener: (this: FileReader, ev: FileReaderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var FileReader: {
    prototype: FileReader;
    new(): FileReader;
    /** Type: unsigned short */
    readonly EMPTY: 0;
    /** Type: unsigned short */
    readonly LOADING: 1;
    /** Type: unsigned short */
    readonly DONE: 2;
};

/**
 * The File and Directory Entries API interface **`FileSystem`** is used to represent a file system.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem)
 */
interface FileSystem {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/name)
     */
    readonly name: string;
    /**
     * Type: FileSystemDirectoryEntry
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystem/root)
     */
    readonly root: FileSystemDirectoryEntry;
}

declare var FileSystem: {
    prototype: FileSystem;
    new(): FileSystem;
};

/**
 * The **`FileSystemDirectoryEntry`** interface of the File and Directory Entries API represents a directory in a file system.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry)
 */
interface FileSystemDirectoryEntry extends FileSystemEntry {
    /**
     * Type: FileSystemDirectoryReader
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/createReader)
     */
    createReader(): FileSystemDirectoryReader;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getDirectory)
     */
    getDirectory(path?: string | null, options?: FileSystemFlags, successCallback?: FileSystemEntryCallback, errorCallback?: ErrorCallback): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryEntry/getFile)
     */
    getFile(path?: string | null, options?: FileSystemFlags, successCallback?: FileSystemEntryCallback, errorCallback?: ErrorCallback): void;
}

declare var FileSystemDirectoryEntry: {
    prototype: FileSystemDirectoryEntry;
    new(): FileSystemDirectoryEntry;
};

/**
 * The **`FileSystemDirectoryHandle`** interface of the File System API provides a handle to a file system directory.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle)
 */
interface FileSystemDirectoryHandle extends FileSystemHandle {
    readonly kind: "directory";
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getDirectoryHandle)
     */
    getDirectoryHandle(name: string, options?: FileSystemGetDirectoryOptions): Promise<FileSystemDirectoryHandle>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/getFileHandle)
     */
    getFileHandle(name: string, options?: FileSystemGetFileOptions): Promise<FileSystemFileHandle>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/removeEntry)
     */
    removeEntry(name: string, options?: FileSystemRemoveOptions): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryHandle/resolve)
     */
    resolve(possibleDescendant: FileSystemHandle): Promise<string[] | null>;
}

declare var FileSystemDirectoryHandle: {
    prototype: FileSystemDirectoryHandle;
    new(): FileSystemDirectoryHandle;
};

/**
 * The `FileSystemDirectoryReader` interface of the File and Directory Entries API lets you access the FileSystemFileEntry-based objects (generally FileSystemFileEntry or FileSystemDirectoryEntry) representing each entry in a directory.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader)
 */
interface FileSystemDirectoryReader {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemDirectoryReader/readEntries)
     */
    readEntries(successCallback: FileSystemEntriesCallback, errorCallback?: ErrorCallback): void;
}

declare var FileSystemDirectoryReader: {
    prototype: FileSystemDirectoryReader;
    new(): FileSystemDirectoryReader;
};

/**
 * The **`FileSystemEntry`** interface of the File and Directory Entries API represents a single entry in a file system.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry)
 */
interface FileSystemEntry {
    /**
     * Type: FileSystem
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/filesystem)
     */
    readonly filesystem: FileSystem;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/fullPath)
     */
    readonly fullPath: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isDirectory)
     */
    readonly isDirectory: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/isFile)
     */
    readonly isFile: boolean;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/name)
     */
    readonly name: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemEntry/getParent)
     */
    getParent(successCallback?: FileSystemEntryCallback, errorCallback?: ErrorCallback): void;
}

declare var FileSystemEntry: {
    prototype: FileSystemEntry;
    new(): FileSystemEntry;
};

/**
 * The **`FileSystemFileEntry`** interface of the File and Directory Entries API represents a file in a file system.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry)
 */
interface FileSystemFileEntry extends FileSystemEntry {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileEntry/file)
     */
    file(successCallback: FileCallback, errorCallback?: ErrorCallback): void;
}

declare var FileSystemFileEntry: {
    prototype: FileSystemFileEntry;
    new(): FileSystemFileEntry;
};

/**
 * The **`FileSystemFileHandle`** interface of the File System API represents a handle to a file system entry.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle)
 */
interface FileSystemFileHandle extends FileSystemHandle {
    readonly kind: "file";
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/createWritable)
     */
    createWritable(options?: FileSystemCreateWritableOptions): Promise<FileSystemWritableFileStream>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemFileHandle/getFile)
     */
    getFile(): Promise<File>;
}

declare var FileSystemFileHandle: {
    prototype: FileSystemFileHandle;
    new(): FileSystemFileHandle;
};

/**
 * The **`FileSystemHandle`** interface of the File System API is an object which represents a file or directory entry.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle)
 */
interface FileSystemHandle {
    /**
     * Type: FileSystemHandleKind
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/kind)
     */
    readonly kind: FileSystemHandleKind;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/name)
     */
    readonly name: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemHandle/isSameEntry)
     */
    isSameEntry(other: FileSystemHandle): Promise<boolean>;
}

declare var FileSystemHandle: {
    prototype: FileSystemHandle;
    new(): FileSystemHandle;
};

/**
 * The **`FileSystemWritableFileStream`** interface of the File System API is a WritableStream object with additional convenience methods, which operates on a single file on disk.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream)
 */
interface FileSystemWritableFileStream extends WritableStream {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/seek)
     */
    seek(position: number): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/truncate)
     */
    truncate(size: number): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FileSystemWritableFileStream/write)
     */
    write(data: FileSystemWriteChunkType): Promise<void>;
}

declare var FileSystemWritableFileStream: {
    prototype: FileSystemWritableFileStream;
    new(): FileSystemWritableFileStream;
};

/**
 * The **`FocusEvent`** interface represents focus-related events, including Element/focus_event, Element/blur_event, Element/focusin_event, and Element/focusout_event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent)
 */
interface FocusEvent extends UIEvent {
    /**
     * Type: EventTarget
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FocusEvent/relatedTarget)
     */
    readonly relatedTarget: EventTarget | null;
}

declare var FocusEvent: {
    prototype: FocusEvent;
    new(type: string, eventInitDict?: FocusEventInit): FocusEvent;
};

/**
 * The **`FontFace`** interface of the CSS Font Loading API represents a single usable font face.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace)
 */
interface FontFace {
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/ascentOverride)
     */
    ascentOverride: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/descentOverride)
     */
    descentOverride: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/display)
     */
    display: FontDisplay;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/family)
     */
    family: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/featureSettings)
     */
    featureSettings: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/lineGapOverride)
     */
    lineGapOverride: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/loaded)
     */
    readonly loaded: Promise<FontFace>;
    /**
     * Type: FontFaceLoadStatus
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/status)
     */
    readonly status: FontFaceLoadStatus;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/stretch)
     */
    stretch: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/style)
     */
    style: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/unicodeRange)
     */
    unicodeRange: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/weight)
     */
    weight: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFace/load)
     */
    load(): Promise<FontFace>;
}

declare var FontFace: {
    prototype: FontFace;
    new(family: string, source: string | BufferSource, descriptors?: FontFaceDescriptors): FontFace;
};

interface FontFaceSetEventMap {
    "loading": FontFaceSetLoadEvent;
    "loadingdone": FontFaceSetLoadEvent;
    "loadingerror": FontFaceSetLoadEvent;
}

/**
 * The **`FontFaceSet`** interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet)
 */
interface FontFaceSet extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loading_event)
     */
    onloading: ((this: FontFaceSet, ev: FontFaceSetLoadEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingdone_event)
     */
    onloadingdone: ((this: FontFaceSet, ev: FontFaceSetLoadEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/loadingerror_event)
     */
    onloadingerror: ((this: FontFaceSet, ev: FontFaceSetLoadEvent) => any) | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/ready)
     */
    readonly ready: Promise<FontFaceSet>;
    /**
     * Type: FontFaceSetLoadStatus
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/status)
     */
    readonly status: FontFaceSetLoadStatus;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/check)
     */
    check(font: string, text?: string): boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSet/load)
     */
    load(font: string, text?: string): Promise<FontFace[]>;
    forEach(callbackfn: (value: FontFace, key: FontFace, parent: FontFaceSet) => void, thisArg?: any): void;
    addEventListener<K extends keyof FontFaceSetEventMap>(type: K, listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof FontFaceSetEventMap>(type: K, listener: (this: FontFaceSet, ev: FontFaceSetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var FontFaceSet: {
    prototype: FontFaceSet;
    new(): FontFaceSet;
};

/**
 * The **`FontFaceSetLoadEvent`** interface of the CSS Font Loading API represents events fired at a FontFaceSet after it starts loading font faces.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent)
 */
interface FontFaceSetLoadEvent extends Event {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FontFaceSetLoadEvent/fontfaces)
     */
    readonly fontfaces: ReadonlyArray<FontFace>;
}

declare var FontFaceSetLoadEvent: {
    prototype: FontFaceSetLoadEvent;
    new(type: string, eventInitDict?: FontFaceSetLoadEventInit): FontFaceSetLoadEvent;
};

interface FontFaceSource {
    /**
     * Type: FontFaceSet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/fonts)
     */
    readonly fonts: FontFaceSet;
}

/**
 * The **`FormData`** interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the Window/fetch, XMLHttpRequest.send() or navigator.sendBeacon() methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData)
 */
interface FormData {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/append)
     */
    append(name: string, value: string | Blob): void;
    append(name: string, value: string): void;
    append(name: string, blobValue: Blob, filename?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/delete)
     */
    delete(name: string): void;
    /**
     * Type: FormDataEntryValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/get)
     */
    get(name: string): FormDataEntryValue | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/getAll)
     */
    getAll(name: string): FormDataEntryValue[];
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/has)
     */
    has(name: string): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormData/set)
     */
    set(name: string, value: string | Blob): void;
    set(name: string, value: string): void;
    set(name: string, blobValue: Blob, filename?: string): void;
    forEach(callbackfn: (value: FormDataEntryValue, key: string, parent: FormData) => void, thisArg?: any): void;
}

declare var FormData: {
    prototype: FormData;
    new(form?: HTMLFormElement, submitter?: HTMLElement | null): FormData;
};

/**
 * The **`FormDataEvent`** interface represents a `formdata` event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent)
 */
interface FormDataEvent extends Event {
    /**
     * Type: FormData
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FormDataEvent/formData)
     */
    readonly formData: FormData;
}

declare var FormDataEvent: {
    prototype: FormDataEvent;
    new(type: string, eventInitDict: FormDataEventInit): FormDataEvent;
};

/**
 * The **`FragmentDirective`** interface is an object exposed to allow code to check whether or not a browser supports text fragments.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/FragmentDirective)
 */
interface FragmentDirective {
}

declare var FragmentDirective: {
    prototype: FragmentDirective;
    new(): FragmentDirective;
};

/**
 * The **`GPUError`** interface of the WebGPU API is the base interface for errors surfaced by GPUDevice.popErrorScope and the GPUDevice.uncapturederror_event event.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GPUError)
 */
interface GPUError {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GPUError/message)
     */
    readonly message: string;
}

/**
 * The `GainNode` interface represents a change in volume.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode)
 */
interface GainNode extends AudioNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GainNode/gain)
     */
    readonly gain: AudioParam;
}

declare var GainNode: {
    prototype: GainNode;
    new(context: BaseAudioContext, options?: GainOptions): GainNode;
};

/**
 * The **`Gamepad`** interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad)
 */
interface Gamepad {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/axes)
     */
    readonly axes: ReadonlyArray<number>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/buttons)
     */
    readonly buttons: ReadonlyArray<GamepadButton>;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/connected)
     */
    readonly connected: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/id)
     */
    readonly id: string;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/index)
     */
    readonly index: number;
    /**
     * Type: GamepadMappingType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/mapping)
     */
    readonly mapping: GamepadMappingType;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/timestamp)
     */
    readonly timestamp: DOMHighResTimeStamp;
    /**
     * Type: GamepadHapticActuator
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Gamepad/vibrationActuator)
     */
    readonly vibrationActuator: GamepadHapticActuator;
}

declare var Gamepad: {
    prototype: Gamepad;
    new(): Gamepad;
};

/**
 * The **`GamepadButton`** interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton)
 */
interface GamepadButton {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/pressed)
     */
    readonly pressed: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/touched)
     */
    readonly touched: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadButton/value)
     */
    readonly value: number;
}

declare var GamepadButton: {
    prototype: GamepadButton;
    new(): GamepadButton;
};

/**
 * The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected_event and Window.gamepaddisconnected_event are fired in response to.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent)
 */
interface GamepadEvent extends Event {
    /**
     * Type: Gamepad
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadEvent/gamepad)
     */
    readonly gamepad: Gamepad;
}

declare var GamepadEvent: {
    prototype: GamepadEvent;
    new(type: string, eventInitDict: GamepadEventInit): GamepadEvent;
};

/**
 * The **`GamepadHapticActuator`** interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator)
 */
interface GamepadHapticActuator {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator/playEffect)
     */
    playEffect(type: GamepadHapticEffectType, params?: GamepadEffectParameters): Promise<GamepadHapticsResult>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GamepadHapticActuator/reset)
     */
    reset(): Promise<GamepadHapticsResult>;
}

declare var GamepadHapticActuator: {
    prototype: GamepadHapticActuator;
    new(): GamepadHapticActuator;
};

interface GenericTransformStream {
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/readable)
     */
    readonly readable: ReadableStream;
    /**
     * Type: WritableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CompressionStream/writable)
     */
    readonly writable: WritableStream;
}

/**
 * The **`Geolocation`** interface represents an object able to obtain the position of the device programmatically.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation)
 */
interface Geolocation {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/clearWatch)
     */
    clearWatch(watchId: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/getCurrentPosition)
     */
    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions): void;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Geolocation/watchPosition)
     */
    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback | null, options?: PositionOptions): number;
}

declare var Geolocation: {
    prototype: Geolocation;
    new(): Geolocation;
};

/**
 * The **`GeolocationCoordinates`** interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates)
 */
interface GeolocationCoordinates {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/accuracy)
     */
    readonly accuracy: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitude)
     */
    readonly altitude: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/altitudeAccuracy)
     */
    readonly altitudeAccuracy: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/heading)
     */
    readonly heading: number | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/latitude)
     */
    readonly latitude: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/longitude)
     */
    readonly longitude: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/speed)
     */
    readonly speed: number | null;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationCoordinates/toJSON)
     */
    toJSON(): any;
}

declare var GeolocationCoordinates: {
    prototype: GeolocationCoordinates;
    new(): GeolocationCoordinates;
};

/**
 * The **`GeolocationPosition`** interface represents the position of the concerned device at a given time.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition)
 */
interface GeolocationPosition {
    /**
     * Type: GeolocationCoordinates
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/coords)
     */
    readonly coords: GeolocationCoordinates;
    /**
     * Type: EpochTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/timestamp)
     */
    readonly timestamp: EpochTimeStamp;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPosition/toJSON)
     */
    toJSON(): any;
}

declare var GeolocationPosition: {
    prototype: GeolocationPosition;
    new(): GeolocationPosition;
};

/**
 * The **`GeolocationPositionError`** interface represents the reason of an error occurring when using the geolocating device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError)
 */
interface GeolocationPositionError {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/code)
     */
    readonly code: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/GeolocationPositionError/message)
     */
    readonly message: string;
    /** Type: unsigned short */
    readonly PERMISSION_DENIED: 1;
    /** Type: unsigned short */
    readonly POSITION_UNAVAILABLE: 2;
    /** Type: unsigned short */
    readonly TIMEOUT: 3;
}

declare var GeolocationPositionError: {
    prototype: GeolocationPositionError;
    new(): GeolocationPositionError;
    /** Type: unsigned short */
    readonly PERMISSION_DENIED: 1;
    /** Type: unsigned short */
    readonly POSITION_UNAVAILABLE: 2;
    /** Type: unsigned short */
    readonly TIMEOUT: 3;
};

interface GlobalEventHandlersEventMap {
    "abort": UIEvent;
    "animationcancel": AnimationEvent;
    "animationend": AnimationEvent;
    "animationiteration": AnimationEvent;
    "animationstart": AnimationEvent;
    "auxclick": PointerEvent;
    "beforeinput": InputEvent;
    "beforetoggle": ToggleEvent;
    "blur": FocusEvent;
    "cancel": Event;
    "canplay": Event;
    "canplaythrough": Event;
    "change": Event;
    "click": MouseEvent;
    "close": Event;
    "compositionend": CompositionEvent;
    "compositionstart": CompositionEvent;
    "compositionupdate": CompositionEvent;
    "contextlost": Event;
    "contextmenu": PointerEvent;
    "contextrestored": Event;
    "copy": ClipboardEvent;
    "cuechange": Event;
    "cut": ClipboardEvent;
    "dblclick": MouseEvent;
    "drag": DragEvent;
    "dragend": DragEvent;
    "dragenter": DragEvent;
    "dragleave": DragEvent;
    "dragover": DragEvent;
    "dragstart": DragEvent;
    "drop": DragEvent;
    "durationchange": Event;
    "emptied": Event;
    "ended": Event;
    "error": ErrorEvent;
    "focus": FocusEvent;
    "focusin": FocusEvent;
    "focusout": FocusEvent;
    "formdata": FormDataEvent;
    "gotpointercapture": PointerEvent;
    "input": Event;
    "invalid": Event;
    "keydown": KeyboardEvent;
    "keypress": KeyboardEvent;
    "keyup": KeyboardEvent;
    "load": Event;
    "loadeddata": Event;
    "loadedmetadata": Event;
    "loadstart": Event;
    "lostpointercapture": PointerEvent;
    "mousedown": MouseEvent;
    "mouseenter": MouseEvent;
    "mouseleave": MouseEvent;
    "mousemove": MouseEvent;
    "mouseout": MouseEvent;
    "mouseover": MouseEvent;
    "mouseup": MouseEvent;
    "paste": ClipboardEvent;
    "pause": Event;
    "play": Event;
    "playing": Event;
    "pointercancel": PointerEvent;
    "pointerdown": PointerEvent;
    "pointerenter": PointerEvent;
    "pointerleave": PointerEvent;
    "pointermove": PointerEvent;
    "pointerout": PointerEvent;
    "pointerover": PointerEvent;
    "pointerup": PointerEvent;
    "progress": ProgressEvent;
    "ratechange": Event;
    "reset": Event;
    "resize": UIEvent;
    "scroll": Event;
    "scrollend": Event;
    "securitypolicyviolation": SecurityPolicyViolationEvent;
    "seeked": Event;
    "seeking": Event;
    "select": Event;
    "selectionchange": Event;
    "selectstart": Event;
    "slotchange": Event;
    "stalled": Event;
    "submit": SubmitEvent;
    "suspend": Event;
    "timeupdate": Event;
    "toggle": ToggleEvent;
    "touchcancel": TouchEvent;
    "touchend": TouchEvent;
    "touchmove": TouchEvent;
    "touchstart": TouchEvent;
    "transitioncancel": TransitionEvent;
    "transitionend": TransitionEvent;
    "transitionrun": TransitionEvent;
    "transitionstart": TransitionEvent;
    "volumechange": Event;
    "waiting": Event;
    "webkitanimationend": Event;
    "webkitanimationiteration": Event;
    "webkitanimationstart": Event;
    "webkittransitionend": Event;
    "wheel": WheelEvent;
}

interface GlobalEventHandlers {
    /**
     * Fires when the user aborts the download.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
     */
    onabort: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)
     */
    onanimationcancel: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
     */
    onanimationend: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
     */
    onanimationiteration: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
     */
    onanimationstart: ((this: GlobalEventHandlers, ev: AnimationEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)
     */
    onauxclick: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)
     */
    onbeforeinput: ((this: GlobalEventHandlers, ev: InputEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)
     */
    onbeforetoggle: ((this: GlobalEventHandlers, ev: ToggleEvent) => any) | null;
    /**
     * Fires when the object loses the input focus.
     * @param ev The focus event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
     */
    onblur: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)
     */
    oncancel: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when playback is possible, but would require further buffering.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
     */
    oncanplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)
     */
    oncanplaythrough: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the contents of the object or selection have changed.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
     */
    onchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user clicks the left mouse button on the object
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
     */
    onclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)
     */
    onclose: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextlost_event)
     */
    oncontextlost: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user clicks the right mouse button in the client area, opening the context menu.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
     */
    oncontextmenu: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextrestored_event)
     */
    oncontextrestored: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)
     */
    oncopy: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)
     */
    oncuechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)
     */
    oncut: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * Fires when the user double-clicks the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
     */
    ondblclick: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires on the source object continuously during a drag operation.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
     */
    ondrag: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the source object when the user releases the mouse at the close of a drag operation.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
     */
    ondragend: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the target element when the user drags the object to a valid drop target.
     * @param ev The drag event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
     */
    ondragenter: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
     * @param ev The drag event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
     */
    ondragleave: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the target element continuously while the user drags the object over a valid drop target.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
     */
    ondragover: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Fires on the source object when the user starts to drag a text selection or selected object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
     */
    ondragstart: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)
     */
    ondrop: ((this: GlobalEventHandlers, ev: DragEvent) => any) | null;
    /**
     * Occurs when the duration attribute is updated.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
     */
    ondurationchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the media element is reset to its initial state.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
     */
    onemptied: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the end of playback is reached.
     * @param ev The event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
     */
    onended: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when an error occurs during object loading.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
     */
    onerror: OnErrorEventHandler;
    /**
     * Fires when the object receives focus.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
     */
    onfocus: ((this: GlobalEventHandlers, ev: FocusEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)
     */
    onformdata: ((this: GlobalEventHandlers, ev: FormDataEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)
     */
    ongotpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)
     */
    oninput: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)
     */
    oninvalid: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user presses a key.
     * @param ev The keyboard event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
     */
    onkeydown: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * Fires when the user presses an alphanumeric key.
     * @param ev The event.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
     */
    onkeypress: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * Fires when the user releases a key.
     * @param ev The keyboard event
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
     */
    onkeyup: ((this: GlobalEventHandlers, ev: KeyboardEvent) => any) | null;
    /**
     * Fires immediately after the browser loads the object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/load_event)
     */
    onload: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when media data is loaded at the current playback position.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
     */
    onloadeddata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the duration and dimensions of the media have been determined.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
     */
    onloadedmetadata: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when Internet Explorer begins looking for media data.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
     */
    onloadstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/lostpointercapture_event)
     */
    onlostpointercapture: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Fires when the user clicks the object with either mouse button.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
     */
    onmousedown: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)
     */
    onmouseenter: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)
     */
    onmouseleave: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user moves the mouse over the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
     */
    onmousemove: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user moves the mouse pointer outside the boundaries of the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
     */
    onmouseout: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user moves the mouse pointer into the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
     */
    onmouseover: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Fires when the user releases a mouse button while the mouse is over the object.
     * @param ev The mouse event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
     */
    onmouseup: ((this: GlobalEventHandlers, ev: MouseEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)
     */
    onpaste: ((this: GlobalEventHandlers, ev: ClipboardEvent) => any) | null;
    /**
     * Occurs when playback is paused.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
     */
    onpause: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the play method is requested.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
     */
    onplay: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the audio or video has started playing.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
     */
    onplaying: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)
     */
    onpointercancel: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)
     */
    onpointerdown: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)
     */
    onpointerenter: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)
     */
    onpointerleave: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)
     */
    onpointermove: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)
     */
    onpointerout: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)
     */
    onpointerover: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)
     */
    onpointerup: ((this: GlobalEventHandlers, ev: PointerEvent) => any) | null;
    /**
     * Occurs to indicate progress while downloading media data.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
     */
    onprogress: ((this: GlobalEventHandlers, ev: ProgressEvent) => any) | null;
    /**
     * Occurs when the playback rate is increased or decreased.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
     */
    onratechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the user resets a form.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
     */
    onreset: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)
     */
    onresize: ((this: GlobalEventHandlers, ev: UIEvent) => any) | null;
    /**
     * Fires when the user repositions the scroll box in the scroll bar on the object.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
     */
    onscroll: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)
     */
    onscrollend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)
     */
    onsecuritypolicyviolation: ((this: GlobalEventHandlers, ev: SecurityPolicyViolationEvent) => any) | null;
    /**
     * Occurs when the seek operation ends.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
     */
    onseeked: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the current playback position is moved.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
     */
    onseeking: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Fires when the current selection changes.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
     */
    onselect: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)
     */
    onselectionchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)
     */
    onselectstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)
     */
    onslotchange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when the download has stopped.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
     */
    onstalled: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)
     */
    onsubmit: ((this: GlobalEventHandlers, ev: SubmitEvent) => any) | null;
    /**
     * Occurs if the load operation has been intentionally halted.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
     */
    onsuspend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs to indicate the current playback position.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
     */
    ontimeupdate: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/toggle_event)
     */
    ontoggle: ((this: GlobalEventHandlers, ev: ToggleEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)
     */
    ontouchcancel?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)
     */
    ontouchend?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)
     */
    ontouchmove?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)
     */
    ontouchstart?: ((this: GlobalEventHandlers, ev: TouchEvent) => any) | null | undefined;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)
     */
    ontransitioncancel: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
     */
    ontransitionend: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)
     */
    ontransitionrun: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)
     */
    ontransitionstart: ((this: GlobalEventHandlers, ev: TransitionEvent) => any) | null;
    /**
     * Occurs when the volume is changed, or playback is muted or unmuted.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
     */
    onvolumechange: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Occurs when playback stops because the next frame of a video resource is not available.
     * @param ev The event.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
     */
    onwaiting: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated This is a legacy alias of `onanimationend`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
     */
    onwebkitanimationend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated This is a legacy alias of `onanimationiteration`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
     */
    onwebkitanimationiteration: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated This is a legacy alias of `onanimationstart`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
     */
    onwebkitanimationstart: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated This is a legacy alias of `ontransitionend`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
     */
    onwebkittransitionend: ((this: GlobalEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)
     */
    onwheel: ((this: GlobalEventHandlers, ev: WheelEvent) => any) | null;
    addEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof GlobalEventHandlersEventMap>(type: K, listener: (this: GlobalEventHandlers, ev: GlobalEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/**
 * The **`HTMLAllCollection`** interface represents a collection of _all_ of the document's elements, accessible by index (like an array) and by the element's `id`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection)
 */
interface HTMLAllCollection {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/length)
     */
    readonly length: number;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/item)
     */
    item(nameOrIndex?: string): HTMLCollection | Element | null;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAllCollection/namedItem)
     */
    namedItem(name: string): HTMLCollection | Element | null;
    [index: number]: Element;
}

declare var HTMLAllCollection: {
    prototype: HTMLAllCollection;
    new(): HTMLAllCollection;
};

/**
 * The **`HTMLAnchorElement`** interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement)
 */
interface HTMLAnchorElement extends HTMLElement, HTMLHyperlinkElementUtils {
    /**
     * Sets or retrieves the character set used to encode the object.
     * @deprecated
     */
    charset: string;
    /**
     * Sets or retrieves the coordinates of the object.
     * @deprecated
     */
    coords: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/download)
     */
    download: string;
    /**
     * Sets or retrieves the language code of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hreflang)
     */
    hreflang: string;
    /**
     * Sets or retrieves the shape of the object.
     * @deprecated
     */
    name: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/ping)
     */
    ping: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/referrerPolicy)
     */
    referrerPolicy: string;
    /**
     * Sets or retrieves the relationship between the object and the destination of the link.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/rel)
     */
    rel: string;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/relList)
     */
    get relList(): DOMTokenList;
    set relList(value: string);
    /**
     * Sets or retrieves the relationship between the object and the destination of the link.
     * @deprecated
     */
    rev: string;
    /**
     * Sets or retrieves the shape of the object.
     * @deprecated
     */
    shape: string;
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/target)
     */
    target: string;
    /**
     * Retrieves or sets the text of the object as a string.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/text)
     */
    text: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/type)
     */
    type: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAnchorElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLAnchorElement: {
    prototype: HTMLAnchorElement;
    new(): HTMLAnchorElement;
};

/**
 * The **`HTMLAreaElement`** interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of area elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement)
 */
interface HTMLAreaElement extends HTMLElement, HTMLHyperlinkElementUtils {
    /**
     * Sets or retrieves a text alternative to the graphic.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/alt)
     */
    alt: string;
    /**
     * Sets or retrieves the coordinates of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/coords)
     */
    coords: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/download)
     */
    download: string;
    /**
     * Sets or gets whether clicks in this region cause action.
     * @deprecated
     */
    noHref: boolean;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/ping)
     */
    ping: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/referrerPolicy)
     */
    referrerPolicy: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/rel)
     */
    rel: string;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/relList)
     */
    get relList(): DOMTokenList;
    set relList(value: string);
    /**
     * Sets or retrieves the shape of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/shape)
     */
    shape: string;
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAreaElement/target)
     */
    target: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLAreaElement: {
    prototype: HTMLAreaElement;
    new(): HTMLAreaElement;
};

/**
 * The **`HTMLAudioElement`** interface provides access to the properties of audio elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAudioElement)
 */
interface HTMLAudioElement extends HTMLMediaElement {
    addEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLAudioElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLAudioElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLAudioElement: {
    prototype: HTMLAudioElement;
    new(): HTMLAudioElement;
};

/**
 * The **`HTMLBRElement`** interface represents an HTML line break element (br).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBRElement)
 */
interface HTMLBRElement extends HTMLElement {
    /**
     * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.
     * @deprecated
     */
    clear: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLBRElement: {
    prototype: HTMLBRElement;
    new(): HTMLBRElement;
};

/**
 * The **`HTMLBaseElement`** interface contains the base URI for a document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement)
 */
interface HTMLBaseElement extends HTMLElement {
    /**
     * Gets or sets the baseline URL on which relative links are based.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/href)
     */
    href: string;
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBaseElement/target)
     */
    target: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLBaseElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLBaseElement: {
    prototype: HTMLBaseElement;
    new(): HTMLBaseElement;
};

interface HTMLBodyElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {
}

/**
 * The **`HTMLBodyElement`** interface provides special properties (beyond those inherited from the regular HTMLElement interface) for manipulating body elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLBodyElement)
 */
interface HTMLBodyElement extends HTMLElement, WindowEventHandlers {
    /**
     * Type: DOMString
     * @deprecated
     */
    aLink: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    background: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    bgColor: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    link: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    text: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    vLink: string;
    addEventListener<K extends keyof HTMLBodyElementEventMap>(type: K, listener: (this: HTMLBodyElement, ev: HTMLBodyElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLBodyElementEventMap>(type: K, listener: (this: HTMLBodyElement, ev: HTMLBodyElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLBodyElement: {
    prototype: HTMLBodyElement;
    new(): HTMLBodyElement;
};

/**
 * The **`HTMLButtonElement`** interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating button elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement)
 */
interface HTMLButtonElement extends HTMLElement, PopoverInvokerElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/disabled)
     */
    disabled: boolean;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Overrides the action attribute (where the data on a form is sent) on the parent form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formAction)
     */
    formAction: string;
    /**
     * Used to override the encoding (formEnctype attribute) specified on the form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formEnctype)
     */
    formEnctype: string;
    /**
     * Overrides the submit method attribute previously specified on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formMethod)
     */
    formMethod: string;
    /**
     * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formNoValidate)
     */
    formNoValidate: boolean;
    /**
     * Overrides the target attribute on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/formTarget)
     */
    formTarget: string;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement>;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/name)
     */
    name: string;
    /**
     * Gets the classification and default behavior of the button.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/type)
     */
    type: "submit" | "reset" | "button";
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Returns a  ValidityState object that represents the validity states of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Sets or retrieves the default or selected value of the control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/value)
     */
    value: string;
    /**
     * Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Sets a custom error message that is displayed when a form is submitted.
     * @param error Sets a custom error message that is displayed when a form is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLButtonElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLButtonElement: {
    prototype: HTMLButtonElement;
    new(): HTMLButtonElement;
};

/**
 * The **`HTMLCanvasElement`** interface provides properties and methods for manipulating the layout and presentation of canvas elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement)
 */
interface HTMLCanvasElement extends HTMLElement {
    /**
     * Gets or sets the height of a canvas element on a document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/height)
     */
    height: number;
    /**
     * Gets or sets the width of a canvas element on a document.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/width)
     */
    width: number;
    /**
     * Type: MediaStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/captureStream)
     */
    captureStream(frameRequestRate?: number): MediaStream;
    /**
     * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.
     * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext("2d"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext("experimental-webgl");
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/getContext)
     */
    getContext(contextId: "2d", options?: CanvasRenderingContext2DSettings): CanvasRenderingContext2D | null;
    getContext(contextId: "bitmaprenderer", options?: ImageBitmapRenderingContextSettings): ImageBitmapRenderingContext | null;
    getContext(contextId: "webgl", options?: WebGLContextAttributes): WebGLRenderingContext | null;
    getContext(contextId: "webgl2", options?: WebGLContextAttributes): WebGL2RenderingContext | null;
    getContext(contextId: string, options?: any): RenderingContext | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toBlob)
     */
    toBlob(callback: BlobCallback, type?: string, quality?: number): void;
    /**
     * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.
     * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toDataURL)
     */
    toDataURL(type?: string, quality?: number): string;
    /**
     * Type: OffscreenCanvas
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/transferControlToOffscreen)
     */
    transferControlToOffscreen(): OffscreenCanvas;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLCanvasElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLCanvasElement: {
    prototype: HTMLCanvasElement;
    new(): HTMLCanvasElement;
};

/**
 * The **`HTMLCollection`** interface represents a generic collection (array-like object similar to Functions/arguments) of elements (in document order) and offers methods and properties for selecting from the list.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection)
 */
interface HTMLCollectionBase {
    /**
     * Sets or retrieves the number of objects in a collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/length)
     */
    readonly length: number;
    /**
     * Retrieves an object from various collections.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/item)
     */
    item(index: number): Element | null;
    [index: number]: Element;
}

interface HTMLCollection extends HTMLCollectionBase {
    /**
     * Retrieves a select object or an object from an options collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCollection/namedItem)
     */
    namedItem(name: string): Element | null;
}

declare var HTMLCollection: {
    prototype: HTMLCollection;
    new(): HTMLCollection;
};

interface HTMLCollectionOf<T extends Element> extends HTMLCollectionBase {
    item(index: number): T | null;
    namedItem(name: string): T | null;
    [index: number]: T;
}

/**
 * The **`HTMLDListElement`** interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list (dl) elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDListElement)
 */
interface HTMLDListElement extends HTMLElement {
    /**
     * Type: boolean
     * @deprecated
     */
    compact: boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLDListElement: {
    prototype: HTMLDListElement;
    new(): HTMLDListElement;
};

/**
 * The **`HTMLDataElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating data elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement)
 */
interface HTMLDataElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataElement/value)
     */
    value: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLDataElement: {
    prototype: HTMLDataElement;
    new(): HTMLDataElement;
};

/**
 * The **`HTMLDataListElement`** interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate datalist elements and their content.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement)
 */
interface HTMLDataListElement extends HTMLElement {
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDataListElement/options)
     */
    readonly options: HTMLCollectionOf<HTMLOptionElement>;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDataListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLDataListElement: {
    prototype: HTMLDataListElement;
    new(): HTMLDataListElement;
};

/**
 * The **`HTMLDetailsElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating details elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement)
 */
interface HTMLDetailsElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/name)
     */
    name: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDetailsElement/open)
     */
    open: boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDetailsElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLDetailsElement: {
    prototype: HTMLDetailsElement;
    new(): HTMLDetailsElement;
};

/**
 * The **`HTMLDialogElement`** interface provides methods to manipulate dialog elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement)
 */
interface HTMLDialogElement extends HTMLElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/open)
     */
    open: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/returnValue)
     */
    returnValue: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close)
     */
    close(returnValue?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/requestClose)
     */
    requestClose(returnValue?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/show)
     */
    show(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/showModal)
     */
    showModal(): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDialogElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLDialogElement: {
    prototype: HTMLDialogElement;
    new(): HTMLDialogElement;
};

/** @deprecated */
interface HTMLDirectoryElement extends HTMLElement {
    /**
     * Type: boolean
     * @deprecated
     */
    compact: boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDirectoryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDirectoryElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLDirectoryElement: {
    prototype: HTMLDirectoryElement;
    new(): HTMLDirectoryElement;
};

/**
 * The **`HTMLDivElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating div elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDivElement)
 */
interface HTMLDivElement extends HTMLElement {
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     */
    align: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLDivElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLDivElement: {
    prototype: HTMLDivElement;
    new(): HTMLDivElement;
};

/** @deprecated use Document */
interface HTMLDocument extends Document {
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: HTMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLDocument: {
    prototype: HTMLDocument;
    new(): HTMLDocument;
};

interface HTMLElementEventMap extends ElementEventMap, GlobalEventHandlersEventMap {
}

/**
 * The **`HTMLElement`** interface represents any HTML element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement)
 */
interface HTMLElement extends Element, ElementCSSInlineStyle, ElementContentEditable, GlobalEventHandlers, HTMLOrSVGElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKey)
     */
    accessKey: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/accessKeyLabel)
     */
    readonly accessKeyLabel: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocapitalize)
     */
    autocapitalize: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autocorrect)
     */
    autocorrect: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dir)
     */
    dir: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/draggable)
     */
    draggable: boolean;
    /**
     * Type: [object Object],[object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidden)
     */
    hidden: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/inert)
     */
    inert: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/innerText)
     */
    innerText: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/lang)
     */
    lang: string;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetHeight)
     */
    readonly offsetHeight: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetLeft)
     */
    readonly offsetLeft: number;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetParent)
     */
    readonly offsetParent: Element | null;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetTop)
     */
    readonly offsetTop: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/offsetWidth)
     */
    readonly offsetWidth: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/outerText)
     */
    outerText: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/popover)
     */
    popover: string | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/spellcheck)
     */
    spellcheck: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/title)
     */
    title: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/translate)
     */
    translate: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/writingSuggestions)
     */
    writingSuggestions: string;
    /**
     * Type: ElementInternals
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/attachInternals)
     */
    attachInternals(): ElementInternals;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/click)
     */
    click(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/hidePopover)
     */
    hidePopover(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/showPopover)
     */
    showPopover(): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/togglePopover)
     */
    togglePopover(options?: boolean): boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLElement: {
    prototype: HTMLElement;
    new(): HTMLElement;
};

/**
 * The **`HTMLEmbedElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating embed elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement)
 */
interface HTMLEmbedElement extends HTMLElement {
    /**
     * Type: DOMString
     * @deprecated
     */
    align: string;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/height)
     */
    height: string;
    /**
     * Sets or retrieves the name of the object.
     * @deprecated
     */
    name: string;
    /**
     * Sets or retrieves a URL to be loaded by the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/src)
     */
    src: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/type)
     */
    type: string;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/width)
     */
    width: string;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLEmbedElement/getSVGDocument)
     */
    getSVGDocument(): Document | null;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLEmbedElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLEmbedElement: {
    prototype: HTMLEmbedElement;
    new(): HTMLEmbedElement;
};

/**
 * The **`HTMLFieldSetElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of fieldset elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement)
 */
interface HTMLFieldSetElement extends HTMLElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/disabled)
     */
    disabled: boolean;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/elements)
     */
    readonly elements: HTMLCollection;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/name)
     */
    name: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/type)
     */
    readonly type: string;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Returns a  ValidityState object that represents the validity states of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Sets a custom error message that is displayed when a form is submitted.
     * @param error Sets a custom error message that is displayed when a form is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFieldSetElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFieldSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFieldSetElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLFieldSetElement: {
    prototype: HTMLFieldSetElement;
    new(): HTMLFieldSetElement;
};

/**
 * Implements the document object model (DOM) representation of the font element.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement)
 */
interface HTMLFontElement extends HTMLElement {
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/color)
     */
    color: string;
    /**
     * Sets or retrieves the current typeface family.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/face)
     */
    face: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFontElement/size)
     */
    size: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFontElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLFontElement: {
    prototype: HTMLFontElement;
    new(): HTMLFontElement;
};

/**
 * The **`HTMLFormControlsCollection`** interface represents a _collection_ of HTML _form control elements_, returned by the HTMLFormElement interface's HTMLFormElement.elements property.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection)
 */
interface HTMLFormControlsCollection extends HTMLCollectionBase {
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormControlsCollection/namedItem)
     */
    namedItem(name: string): RadioNodeList | Element | null;
}

declare var HTMLFormControlsCollection: {
    prototype: HTMLFormControlsCollection;
    new(): HTMLFormControlsCollection;
};

/**
 * The **`HTMLFormElement`** interface represents a form element in the DOM.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement)
 */
interface HTMLFormElement extends HTMLElement {
    /**
     * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/acceptCharset)
     */
    acceptCharset: string;
    /**
     * Sets or retrieves the URL to which the form content is sent for processing.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/action)
     */
    action: string;
    /**
     * Specifies whether autocomplete is applied to an editable text field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/autocomplete)
     */
    autocomplete: AutoFillBase;
    /**
     * Retrieves a collection, in source order, of all controls in a given form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/elements)
     */
    readonly elements: HTMLFormControlsCollection;
    /**
     * Sets or retrieves the MIME encoding for the form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/encoding)
     */
    encoding: string;
    /**
     * Sets or retrieves the encoding type for the form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/enctype)
     */
    enctype: string;
    /**
     * Sets or retrieves the number of objects in a collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/length)
     */
    readonly length: number;
    /**
     * Sets or retrieves how to send the form data to the server.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/method)
     */
    method: string;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/name)
     */
    name: string;
    /**
     * Designates a form that is not validated when submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/noValidate)
     */
    noValidate: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/rel)
     */
    rel: string;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/relList)
     */
    get relList(): DOMTokenList;
    set relList(value: string);
    /**
     * Sets or retrieves the window or frame at which to target content.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/target)
     */
    target: string;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/requestSubmit)
     */
    requestSubmit(submitter?: HTMLElement | null): void;
    /**
     * Fires when the user resets a form.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset)
     */
    reset(): void;
    /**
     * Fires when a FORM is about to be submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit)
     */
    submit(): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFormElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    [index: number]: Element;
    [name: string]: any;
}

declare var HTMLFormElement: {
    prototype: HTMLFormElement;
    new(): HTMLFormElement;
};

/** @deprecated */
interface HTMLFrameElement extends HTMLElement {
    /**
     * Retrieves the document object of the page or frame.
     * @deprecated
     */
    readonly contentDocument: Document | null;
    /**
     * Retrieves the object of the specified.
     * @deprecated
     */
    readonly contentWindow: WindowProxy | null;
    /**
     * Sets or retrieves whether to display a border for the frame.
     * @deprecated
     */
    frameBorder: string;
    /**
     * Sets or retrieves a URI to a long description of the object.
     * @deprecated
     */
    longDesc: string;
    /**
     * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
     * @deprecated
     */
    marginHeight: string;
    /**
     * Sets or retrieves the left and right margin widths before displaying the text in a frame.
     * @deprecated
     */
    marginWidth: string;
    /**
     * Sets or retrieves the frame name.
     * @deprecated
     */
    name: string;
    /**
     * Sets or retrieves whether the user can resize the frame.
     * @deprecated
     */
    noResize: boolean;
    /**
     * Sets or retrieves whether the frame can be scrolled.
     * @deprecated
     */
    scrolling: string;
    /**
     * Sets or retrieves a URL to be loaded by the object.
     * @deprecated
     */
    src: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLFrameElement: {
    prototype: HTMLFrameElement;
    new(): HTMLFrameElement;
};

interface HTMLFrameSetElementEventMap extends HTMLElementEventMap, WindowEventHandlersEventMap {
}

/**
 * The **`HTMLFrameSetElement`** interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating frameset elements.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFrameSetElement)
 */
interface HTMLFrameSetElement extends HTMLElement, WindowEventHandlers {
    /**
     * Sets or retrieves the frame widths of the object.
     * @deprecated
     */
    cols: string;
    /**
     * Sets or retrieves the frame heights of the object.
     * @deprecated
     */
    rows: string;
    addEventListener<K extends keyof HTMLFrameSetElementEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: HTMLFrameSetElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLFrameSetElementEventMap>(type: K, listener: (this: HTMLFrameSetElement, ev: HTMLFrameSetElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLFrameSetElement: {
    prototype: HTMLFrameSetElement;
    new(): HTMLFrameSetElement;
};

/**
 * The **`HTMLHRElement`** interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating hr elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHRElement)
 */
interface HTMLHRElement extends HTMLElement {
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     */
    align: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    color: string;
    /**
     * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.
     * @deprecated
     */
    noShade: boolean;
    /**
     * Type: DOMString
     * @deprecated
     */
    size: string;
    /**
     * Sets or retrieves the width of the object.
     * @deprecated
     */
    width: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHRElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLHRElement: {
    prototype: HTMLHRElement;
    new(): HTMLHRElement;
};

/**
 * The **`HTMLHeadElement`** interface contains the descriptive information, or metadata, for a document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadElement)
 */
interface HTMLHeadElement extends HTMLElement {
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLHeadElement: {
    prototype: HTMLHeadElement;
    new(): HTMLHeadElement;
};

/**
 * The **`HTMLHeadingElement`** interface represents the different heading elements, `<h1>` through `<h6>`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHeadingElement)
 */
interface HTMLHeadingElement extends HTMLElement {
    /**
     * Sets or retrieves a value that indicates the table alignment.
     * @deprecated
     */
    align: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHeadingElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLHeadingElement: {
    prototype: HTMLHeadingElement;
    new(): HTMLHeadingElement;
};

/**
 * The **`HTMLHtmlElement`** interface serves as the root node for a given HTML document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement)
 */
interface HTMLHtmlElement extends HTMLElement {
    /**
     * Sets or retrieves the DTD version that governs the current document.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLHtmlElement/version)
     */
    version: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLHtmlElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLHtmlElement: {
    prototype: HTMLHtmlElement;
    new(): HTMLHtmlElement;
};

interface HTMLHyperlinkElementUtils {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hash)
     */
    hash: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/host)
     */
    host: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/hostname)
     */
    hostname: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/href)
     */
    href: string;
    toString(): string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/origin)
     */
    readonly origin: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/password)
     */
    password: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/pathname)
     */
    pathname: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/port)
     */
    port: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/protocol)
     */
    protocol: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/search)
     */
    search: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLAnchorElement/username)
     */
    username: string;
}

/**
 * The **`HTMLIFrameElement`** interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement)
 */
interface HTMLIFrameElement extends HTMLElement {
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     */
    align: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allow)
     */
    allow: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/allowFullscreen)
     */
    allowFullscreen: boolean;
    /**
     * Retrieves the document object of the page or frame.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentDocument)
     */
    readonly contentDocument: Document | null;
    /**
     * Retrieves the object of the specified.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/contentWindow)
     */
    readonly contentWindow: WindowProxy | null;
    /**
     * Sets or retrieves whether to display a border for the frame.
     * @deprecated
     */
    frameBorder: string;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/height)
     */
    height: string;
    /**
     * Sets or retrieves the policy for loading iframe elements that are outside the viewport.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/loading)
     */
    loading: "eager" | "lazy";
    /**
     * Sets or retrieves a URI to a long description of the object.
     * @deprecated
     */
    longDesc: string;
    /**
     * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.
     * @deprecated
     */
    marginHeight: string;
    /**
     * Sets or retrieves the left and right margin widths before displaying the text in a frame.
     * @deprecated
     */
    marginWidth: string;
    /**
     * Sets or retrieves the frame name.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/name)
     */
    name: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/referrerPolicy)
     */
    referrerPolicy: ReferrerPolicy;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/sandbox)
     */
    get sandbox(): DOMTokenList;
    set sandbox(value: string);
    /**
     * Sets or retrieves whether the frame can be scrolled.
     * @deprecated
     */
    scrolling: string;
    /**
     * Sets or retrieves a URL to be loaded by the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/src)
     */
    src: string;
    /**
     * Sets or retrives the content of the page that is to contain.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/srcdoc)
     */
    srcdoc: string;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/width)
     */
    width: string;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLIFrameElement/getSVGDocument)
     */
    getSVGDocument(): Document | null;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLIFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLIFrameElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLIFrameElement: {
    prototype: HTMLIFrameElement;
    new(): HTMLIFrameElement;
};

/**
 * The **`HTMLImageElement`** interface represents an HTML img element, providing the properties and methods used to manipulate image elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)
 */
interface HTMLImageElement extends HTMLElement {
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/align)
     */
    align: string;
    /**
     * Sets or retrieves a text alternative to the graphic.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/alt)
     */
    alt: string;
    /**
     * Specifies the properties of a border drawn around an object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/border)
     */
    border: string;
    /**
     * Retrieves whether the object is fully loaded.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/complete)
     */
    readonly complete: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/crossOrigin)
     */
    crossOrigin: string | null;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/currentSrc)
     */
    readonly currentSrc: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decoding)
     */
    decoding: "async" | "sync" | "auto";
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/fetchPriority)
     */
    fetchPriority: "high" | "low" | "auto";
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/height)
     */
    height: number;
    /**
     * Sets or retrieves the width of the border to draw around the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/hspace)
     */
    hspace: number;
    /**
     * Sets or retrieves whether the image is a server-side image map.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/isMap)
     */
    isMap: boolean;
    /**
     * Sets or retrieves the policy for loading image elements that are outside the viewport.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/loading)
     */
    loading: "eager" | "lazy";
    /**
     * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/longDesc)
     */
    longDesc: string;
    /**
     * Type: USVString
     * @deprecated
     */
    lowsrc: string;
    /**
     * Sets or retrieves the name of the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/name)
     */
    name: string;
    /**
     * The original height of the image resource before sizing.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalHeight)
     */
    readonly naturalHeight: number;
    /**
     * The original width of the image resource before sizing.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/naturalWidth)
     */
    readonly naturalWidth: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/referrerPolicy)
     */
    referrerPolicy: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/sizes)
     */
    sizes: string;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/src)
     */
    src: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/srcset)
     */
    srcset: string;
    /**
     * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/useMap)
     */
    useMap: string;
    /**
     * Sets or retrieves the vertical margin for the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/vspace)
     */
    vspace: number;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/width)
     */
    width: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/x)
     */
    readonly x: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/y)
     */
    readonly y: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLImageElement/decode)
     */
    decode(): Promise<void>;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLImageElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLImageElement: {
    prototype: HTMLImageElement;
    new(): HTMLImageElement;
};

/**
 * The **`HTMLInputElement`** interface provides special properties and methods for manipulating the options, layout, and presentation of input elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement)
 */
interface HTMLInputElement extends HTMLElement, PopoverInvokerElement {
    /**
     * Sets or retrieves a comma-separated list of content types.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/accept)
     */
    accept: string;
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     */
    align: string;
    /**
     * Sets or retrieves a text alternative to the graphic.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/alt)
     */
    alt: string;
    /**
     * Specifies whether autocomplete is applied to an editable text field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/autocomplete)
     */
    autocomplete: AutoFill;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/capture)
     */
    capture: string;
    /**
     * Sets or retrieves the state of the check box or radio button.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checked)
     */
    checked: boolean;
    /**
     * Sets or retrieves the state of the check box or radio button.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultChecked)
     */
    defaultChecked: boolean;
    /**
     * Sets or retrieves the initial contents of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/defaultValue)
     */
    defaultValue: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/dirName)
     */
    dirName: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/disabled)
     */
    disabled: boolean;
    /**
     * Returns a FileList object on a file type input object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/files)
     */
    files: FileList | null;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Overrides the action attribute (where the data on a form is sent) on the parent form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formAction)
     */
    formAction: string;
    /**
     * Used to override the encoding (formEnctype attribute) specified on the form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formEnctype)
     */
    formEnctype: string;
    /**
     * Overrides the submit method attribute previously specified on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formMethod)
     */
    formMethod: string;
    /**
     * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a "save draft"-type submit option.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formNoValidate)
     */
    formNoValidate: boolean;
    /**
     * Overrides the target attribute on a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/formTarget)
     */
    formTarget: string;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/height)
     */
    height: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/indeterminate)
     */
    indeterminate: boolean;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement> | null;
    /**
     * Specifies the ID of a pre-defined datalist of options for an input element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/list)
     */
    readonly list: HTMLDataListElement | null;
    /**
     * Defines the maximum acceptable value for an input element with type="number".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/max)
     */
    max: string;
    /**
     * Sets or retrieves the maximum number of characters that the user can enter in a text control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/maxLength)
     */
    maxLength: number;
    /**
     * Defines the minimum acceptable value for an input element with type="number". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/min)
     */
    min: string;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/minLength)
     */
    minLength: number;
    /**
     * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/multiple)
     */
    multiple: boolean;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/name)
     */
    name: string;
    /**
     * Gets or sets a string containing a regular expression that the user's input must match.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/pattern)
     */
    pattern: string;
    /**
     * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/placeholder)
     */
    placeholder: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/readOnly)
     */
    readOnly: boolean;
    /**
     * When present, marks an element that can't be submitted without a value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/required)
     */
    required: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionDirection)
     */
    selectionDirection: "forward" | "backward" | "none" | null;
    /**
     * Gets or sets the end position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionEnd)
     */
    selectionEnd: number | null;
    /**
     * Gets or sets the starting position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/selectionStart)
     */
    selectionStart: number | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/size)
     */
    size: number;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/src)
     */
    src: string;
    /**
     * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/step)
     */
    step: string;
    /**
     * Returns the content type of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/type)
     */
    type: string;
    /**
     * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
     * @deprecated
     */
    useMap: string;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Returns a  ValidityState object that represents the validity states of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Returns the value of the data at the cursor's current position.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/value)
     */
    value: string;
    /**
     * Returns a Date object representing the form control's value, if applicable; otherwise, returns null. Can be set, to change the value. Throws an "InvalidStateError" DOMException if the control isn't date- or time-based.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsDate)
     */
    valueAsDate: Date | null;
    /**
     * Returns the input field value as a number.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/valueAsNumber)
     */
    valueAsNumber: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitEntries)
     */
    readonly webkitEntries: ReadonlyArray<FileSystemEntry>;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/webkitdirectory)
     */
    webkitdirectory: boolean;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/width)
     */
    width: number;
    /**
     * Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Makes the selection equal to the current object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select)
     */
    select(): void;
    /**
     * Sets a custom error message that is displayed when a form is submitted.
     * @param error Sets a custom error message that is displayed when a form is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setRangeText)
     */
    setRangeText(replacement: string): void;
    setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;
    /**
     * Sets the start and end positions of a selection in a text field.
     * @param start The offset into the text field for the start of the selection.
     * @param end The offset into the text field for the end of the selection.
     * @param direction The direction in which the selection is performed.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/setSelectionRange)
     */
    setSelectionRange(start: number | null, end: number | null, direction?: "forward" | "backward" | "none"): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/showPicker)
     */
    showPicker(): void;
    /**
     * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.
     * @param n Value to decrement the value by.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepDown)
     */
    stepDown(n?: number): void;
    /**
     * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.
     * @param n Value to increment the value by.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/stepUp)
     */
    stepUp(n?: number): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLInputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLInputElement: {
    prototype: HTMLInputElement;
    new(): HTMLInputElement;
};

/**
 * The **`HTMLLIElement`** interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement)
 */
interface HTMLLIElement extends HTMLElement {
    /**
     * Type: DOMString
     * @deprecated
     */
    type: string;
    /**
     * Sets or retrieves the value of a list item.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLIElement/value)
     */
    value: number;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLIElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLLIElement: {
    prototype: HTMLLIElement;
    new(): HTMLLIElement;
};

/**
 * The **`HTMLLabelElement`** interface gives access to properties specific to label elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement)
 */
interface HTMLLabelElement extends HTMLElement {
    /**
     * Type: HTMLElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/control)
     */
    readonly control: HTMLElement | null;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Sets or retrieves the object to which the given label object is assigned.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLabelElement/htmlFor)
     */
    htmlFor: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLabelElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLLabelElement: {
    prototype: HTMLLabelElement;
    new(): HTMLLabelElement;
};

/**
 * The **`HTMLLegendElement`** is an interface allowing to access properties of the legend elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement)
 */
interface HTMLLegendElement extends HTMLElement {
    /**
     * Type: DOMString
     * @deprecated
     */
    align: string;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLegendElement/form)
     */
    readonly form: HTMLFormElement | null;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLegendElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLLegendElement: {
    prototype: HTMLLegendElement;
    new(): HTMLLegendElement;
};

/**
 * The **`HTMLLinkElement`** interface represents reference information for external resources and the relationship of those resources to a document and vice versa (corresponds to `<link>` element; not to be confused with `<a>`, which is represented by `HTMLAnchorElement`).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement)
 */
interface HTMLLinkElement extends HTMLElement, LinkStyle {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/as)
     */
    as: string;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/blocking)
     */
    get blocking(): DOMTokenList;
    set blocking(value: string);
    /**
     * Sets or retrieves the character set used to encode the object.
     * @deprecated
     */
    charset: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/crossOrigin)
     */
    crossOrigin: string | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/disabled)
     */
    disabled: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/fetchPriority)
     */
    fetchPriority: "high" | "low" | "auto";
    /**
     * Sets or retrieves a destination URL or an anchor point.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/href)
     */
    href: string;
    /**
     * Sets or retrieves the language code of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/hreflang)
     */
    hreflang: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/imageSizes)
     */
    imageSizes: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/imageSrcset)
     */
    imageSrcset: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/integrity)
     */
    integrity: string;
    /**
     * Sets or retrieves the media type.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/media)
     */
    media: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/referrerPolicy)
     */
    referrerPolicy: string;
    /**
     * Sets or retrieves the relationship between the object and the destination of the link.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/rel)
     */
    rel: string;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/relList)
     */
    get relList(): DOMTokenList;
    set relList(value: string);
    /**
     * Sets or retrieves the relationship between the object and the destination of the link.
     * @deprecated
     */
    rev: string;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sizes)
     */
    get sizes(): DOMTokenList;
    set sizes(value: string);
    /**
     * Sets or retrieves the window or frame at which to target content.
     * @deprecated
     */
    target: string;
    /**
     * Sets or retrieves the MIME type of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/type)
     */
    type: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLLinkElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLLinkElement: {
    prototype: HTMLLinkElement;
    new(): HTMLLinkElement;
};

/**
 * The **`HTMLMapElement`** interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement)
 */
interface HTMLMapElement extends HTMLElement {
    /**
     * Retrieves a collection of the area objects defined for the given map object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/areas)
     */
    readonly areas: HTMLCollection;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMapElement/name)
     */
    name: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMapElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLMapElement: {
    prototype: HTMLMapElement;
    new(): HTMLMapElement;
};

/**
 * The **`HTMLMarqueeElement`** interface provides methods to manipulate marquee elements.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMarqueeElement)
 */
interface HTMLMarqueeElement extends HTMLElement {
    /**
     * Type: DOMString
     * @deprecated
     */
    behavior: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    bgColor: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    direction: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    height: string;
    /**
     * Type: unsigned long
     * @deprecated
     */
    hspace: number;
    /**
     * Type: long
     * @deprecated
     */
    loop: number;
    /**
     * Type: unsigned long
     * @deprecated
     */
    scrollAmount: number;
    /**
     * Type: unsigned long
     * @deprecated
     */
    scrollDelay: number;
    /**
     * Type: boolean
     * @deprecated
     */
    trueSpeed: boolean;
    /**
     * Type: unsigned long
     * @deprecated
     */
    vspace: number;
    /**
     * Type: DOMString
     * @deprecated
     */
    width: string;
    /**
     * Type: undefined
     * @deprecated
     */
    start(): void;
    /**
     * Type: undefined
     * @deprecated
     */
    stop(): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMarqueeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMarqueeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLMarqueeElement: {
    prototype: HTMLMarqueeElement;
    new(): HTMLMarqueeElement;
};

interface HTMLMediaElementEventMap extends HTMLElementEventMap {
    "encrypted": MediaEncryptedEvent;
    "waitingforkey": Event;
}

/**
 * The **`HTMLMediaElement`** interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement)
 */
interface HTMLMediaElement extends HTMLElement {
    /**
     * Gets or sets a value that indicates whether to start playing the media automatically.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/autoplay)
     */
    autoplay: boolean;
    /**
     * Gets a collection of buffered time ranges.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/buffered)
     */
    readonly buffered: TimeRanges;
    /**
     * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/controls)
     */
    controls: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/crossOrigin)
     */
    crossOrigin: string | null;
    /**
     * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentSrc)
     */
    readonly currentSrc: string;
    /**
     * Gets or sets the current playback position, in seconds.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/currentTime)
     */
    currentTime: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultMuted)
     */
    defaultMuted: boolean;
    /**
     * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/defaultPlaybackRate)
     */
    defaultPlaybackRate: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/disableRemotePlayback)
     */
    disableRemotePlayback: boolean;
    /**
     * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/duration)
     */
    readonly duration: number;
    /**
     * Gets information about whether the playback has ended or not.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended)
     */
    readonly ended: boolean;
    /**
     * Returns an object representing the current error state of the audio or video element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/error)
     */
    readonly error: MediaError | null;
    /**
     * Gets or sets a flag to specify whether playback should restart after it completes.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loop)
     */
    loop: boolean;
    /**
     * Type: MediaKeys
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/mediaKeys)
     */
    readonly mediaKeys: MediaKeys | null;
    /**
     * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/muted)
     */
    muted: boolean;
    /**
     * Gets the current network activity for the element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/networkState)
     */
    readonly networkState: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/encrypted_event)
     */
    onencrypted: ((this: HTMLMediaElement, ev: MediaEncryptedEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waitingforkey_event)
     */
    onwaitingforkey: ((this: HTMLMediaElement, ev: Event) => any) | null;
    /**
     * Gets a flag that specifies whether playback is paused.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/paused)
     */
    readonly paused: boolean;
    /**
     * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playbackRate)
     */
    playbackRate: number;
    /**
     * Gets TimeRanges for the current media resource that has been played.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/played)
     */
    readonly played: TimeRanges;
    /**
     * Gets or sets a value indicating what data should be preloaded, if any.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preload)
     */
    preload: "none" | "metadata" | "auto" | "";
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/preservesPitch)
     */
    preservesPitch: boolean;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/readyState)
     */
    readonly readyState: number;
    /**
     * Type: RemotePlayback
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/remote)
     */
    readonly remote: RemotePlayback;
    /**
     * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seekable)
     */
    readonly seekable: TimeRanges;
    /**
     * Gets a flag that indicates whether the client is currently moving to a new playback position in the media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking)
     */
    readonly seeking: boolean;
    /**
     * Type: DOMString
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/sinkId)
     */
    readonly sinkId: string;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/src)
     */
    src: string;
    /**
     * Type: MediaProvider
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/srcObject)
     */
    srcObject: MediaProvider | null;
    /**
     * Type: TextTrackList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/textTracks)
     */
    readonly textTracks: TextTrackList;
    /**
     * Gets or sets the volume level for audio portions of the media element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volume)
     */
    volume: number;
    /**
     * Type: TextTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/addTextTrack)
     */
    addTextTrack(kind: TextTrackKind, label?: string, language?: string): TextTrack;
    /**
     * Returns a string that specifies whether the client can play a given media resource type.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canPlayType)
     */
    canPlayType(type: string): CanPlayTypeResult;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/fastSeek)
     */
    fastSeek(time: number): void;
    /**
     * Resets the audio or video object and loads a new media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/load)
     */
    load(): void;
    /**
     * Pauses the current playback and sets paused to TRUE.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause)
     */
    pause(): void;
    /**
     * Loads and starts playback of a media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play)
     */
    play(): Promise<void>;
    /**
     * Type: [object Object]
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setMediaKeys)
     */
    setMediaKeys(mediaKeys: MediaKeys | null): Promise<void>;
    /**
     * Type: [object Object]
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/setSinkId)
     */
    setSinkId(sinkId: string): Promise<void>;
    /** Type: unsigned short */
    readonly NETWORK_EMPTY: 0;
    /** Type: unsigned short */
    readonly NETWORK_IDLE: 1;
    /** Type: unsigned short */
    readonly NETWORK_LOADING: 2;
    /** Type: unsigned short */
    readonly NETWORK_NO_SOURCE: 3;
    /** Type: unsigned short */
    readonly HAVE_NOTHING: 0;
    /** Type: unsigned short */
    readonly HAVE_METADATA: 1;
    /** Type: unsigned short */
    readonly HAVE_CURRENT_DATA: 2;
    /** Type: unsigned short */
    readonly HAVE_FUTURE_DATA: 3;
    /** Type: unsigned short */
    readonly HAVE_ENOUGH_DATA: 4;
    addEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLMediaElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLMediaElementEventMap>(type: K, listener: (this: HTMLMediaElement, ev: HTMLMediaElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLMediaElement: {
    prototype: HTMLMediaElement;
    new(): HTMLMediaElement;
    /** Type: unsigned short */
    readonly NETWORK_EMPTY: 0;
    /** Type: unsigned short */
    readonly NETWORK_IDLE: 1;
    /** Type: unsigned short */
    readonly NETWORK_LOADING: 2;
    /** Type: unsigned short */
    readonly NETWORK_NO_SOURCE: 3;
    /** Type: unsigned short */
    readonly HAVE_NOTHING: 0;
    /** Type: unsigned short */
    readonly HAVE_METADATA: 1;
    /** Type: unsigned short */
    readonly HAVE_CURRENT_DATA: 2;
    /** Type: unsigned short */
    readonly HAVE_FUTURE_DATA: 3;
    /** Type: unsigned short */
    readonly HAVE_ENOUGH_DATA: 4;
};

/**
 * The **`HTMLMenuElement`** interface provides additional properties (beyond those inherited from the HTMLElement interface) for manipulating a menu element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMenuElement)
 */
interface HTMLMenuElement extends HTMLElement {
    /**
     * Type: boolean
     * @deprecated
     */
    compact: boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMenuElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLMenuElement: {
    prototype: HTMLMenuElement;
    new(): HTMLMenuElement;
};

/**
 * The **`HTMLMetaElement`** interface contains descriptive metadata about a document provided in HTML as `<meta>` elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement)
 */
interface HTMLMetaElement extends HTMLElement {
    /**
     * Gets or sets meta-information to associate with httpEquiv or name.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/content)
     */
    content: string;
    /**
     * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/httpEquiv)
     */
    httpEquiv: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/media)
     */
    media: string;
    /**
     * Sets or retrieves the value specified in the content attribute of the meta object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/name)
     */
    name: string;
    /**
     * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMetaElement/scheme)
     */
    scheme: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMetaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLMetaElement: {
    prototype: HTMLMetaElement;
    new(): HTMLMetaElement;
};

/**
 * The HTML meter elements expose the **`HTMLMeterElement`** interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of meter elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement)
 */
interface HTMLMeterElement extends HTMLElement {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/high)
     */
    high: number;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement>;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/low)
     */
    low: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/max)
     */
    max: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/min)
     */
    min: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/optimum)
     */
    optimum: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMeterElement/value)
     */
    value: number;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLMeterElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLMeterElement: {
    prototype: HTMLMeterElement;
    new(): HTMLMeterElement;
};

/**
 * The **`HTMLModElement`** interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is del and ins.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement)
 */
interface HTMLModElement extends HTMLElement {
    /**
     * Sets or retrieves reference information about the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/cite)
     */
    cite: string;
    /**
     * Sets or retrieves the date and time of a modification to the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLModElement/dateTime)
     */
    dateTime: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLModElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLModElement: {
    prototype: HTMLModElement;
    new(): HTMLModElement;
};

/**
 * The **`HTMLOListElement`** interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement)
 */
interface HTMLOListElement extends HTMLElement {
    /**
     * Type: boolean
     * @deprecated
     */
    compact: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/reversed)
     */
    reversed: boolean;
    /**
     * The starting number.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/start)
     */
    start: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOListElement/type)
     */
    type: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLOListElement: {
    prototype: HTMLOListElement;
    new(): HTMLOListElement;
};

/**
 * The **`HTMLObjectElement`** interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of object element, representing external resources.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement)
 */
interface HTMLObjectElement extends HTMLElement {
    /**
     * Type: DOMString
     * @deprecated
     */
    align: string;
    /**
     * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.
     * @deprecated
     */
    archive: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    border: string;
    /**
     * Sets or retrieves the URL of the file containing the compiled Java class.
     * @deprecated
     */
    code: string;
    /**
     * Sets or retrieves the URL of the component.
     * @deprecated
     */
    codeBase: string;
    /**
     * Sets or retrieves the Internet media type for the code associated with the object.
     * @deprecated
     */
    codeType: string;
    /**
     * Retrieves the document object of the page or frame.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentDocument)
     */
    readonly contentDocument: Document | null;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/contentWindow)
     */
    readonly contentWindow: WindowProxy | null;
    /**
     * Sets or retrieves the URL that references the data of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/data)
     */
    data: string;
    /**
     * Type: boolean
     * @deprecated
     */
    declare: boolean;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Sets or retrieves the height of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/height)
     */
    height: string;
    /**
     * Type: unsigned long
     * @deprecated
     */
    hspace: number;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/name)
     */
    name: string;
    /**
     * Sets or retrieves a message to be displayed while an object is loading.
     * @deprecated
     */
    standby: string;
    /**
     * Sets or retrieves the MIME type of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/type)
     */
    type: string;
    /**
     * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/useMap)
     */
    useMap: string;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Returns a  ValidityState object that represents the validity states of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Type: unsigned long
     * @deprecated
     */
    vspace: number;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/width)
     */
    width: string;
    /**
     * Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/getSVGDocument)
     */
    getSVGDocument(): Document | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Sets a custom error message that is displayed when a form is submitted.
     * @param error Sets a custom error message that is displayed when a form is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLObjectElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLObjectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLObjectElement: {
    prototype: HTMLObjectElement;
    new(): HTMLObjectElement;
};

/**
 * The **`HTMLOptGroupElement`** interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of optgroup elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement)
 */
interface HTMLOptGroupElement extends HTMLElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/disabled)
     */
    disabled: boolean;
    /**
     * Sets or retrieves a value that you can use to implement your own label functionality for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptGroupElement/label)
     */
    label: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptGroupElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptGroupElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLOptGroupElement: {
    prototype: HTMLOptGroupElement;
    new(): HTMLOptGroupElement;
};

/**
 * The **`HTMLOptionElement`** interface represents option elements and inherits all properties and methods of the HTMLElement interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement)
 */
interface HTMLOptionElement extends HTMLElement {
    /**
     * Sets or retrieves the status of an option.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/defaultSelected)
     */
    defaultSelected: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/disabled)
     */
    disabled: boolean;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Sets or retrieves the ordinal position of an option in a list box.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/index)
     */
    readonly index: number;
    /**
     * Sets or retrieves a value that you can use to implement your own label functionality for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/label)
     */
    label: string;
    /**
     * Sets or retrieves whether the option in the list box is the default item.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/selected)
     */
    selected: boolean;
    /**
     * Sets or retrieves the text string specified by the option tag.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/text)
     */
    text: string;
    /**
     * Sets or retrieves the value which is returned to the server when the form control is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionElement/value)
     */
    value: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLOptionElement: {
    prototype: HTMLOptionElement;
    new(): HTMLOptionElement;
};

/**
 * The **`HTMLOptionsCollection`** interface represents a collection of `<option>` HTML elements (in document order) and offers methods and properties for selecting from the list as well as optionally altering its items.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection)
 */
interface HTMLOptionsCollection extends HTMLCollectionOf<HTMLOptionElement> {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/length)
     */
    length: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/selectedIndex)
     */
    selectedIndex: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/add)
     */
    add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOptionsCollection/remove)
     */
    remove(index: number): void;
}

declare var HTMLOptionsCollection: {
    prototype: HTMLOptionsCollection;
    new(): HTMLOptionsCollection;
};

interface HTMLOrSVGElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/autofocus)
     */
    autofocus: boolean;
    /**
     * Type: DOMStringMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dataset)
     */
    readonly dataset: DOMStringMap;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/nonce)
     */
    nonce?: string;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/tabIndex)
     */
    tabIndex: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/blur)
     */
    blur(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/focus)
     */
    focus(options?: FocusOptions): void;
}

/**
 * The **`HTMLOutputElement`** interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of output elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement)
 */
interface HTMLOutputElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/defaultValue)
     */
    defaultValue: string;
    /**
     * Type: HTMLFormElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/htmlFor)
     */
    get htmlFor(): DOMTokenList;
    set htmlFor(value: string);
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement>;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/name)
     */
    name: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/type)
     */
    readonly type: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Type: ValidityState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/value)
     */
    value: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLOutputElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLOutputElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLOutputElement: {
    prototype: HTMLOutputElement;
    new(): HTMLOutputElement;
};

/**
 * The **`HTMLParagraphElement`** interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating p elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParagraphElement)
 */
interface HTMLParagraphElement extends HTMLElement {
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     */
    align: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParagraphElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParagraphElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLParagraphElement: {
    prototype: HTMLParagraphElement;
    new(): HTMLParagraphElement;
};

/**
 * The **`HTMLParamElement`** interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating param elements, representing a pair of a key and a value that acts as a parameter for an object element.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLParamElement)
 */
interface HTMLParamElement extends HTMLElement {
    /**
     * Sets or retrieves the name of an input parameter for an element.
     * @deprecated
     */
    name: string;
    /**
     * Sets or retrieves the content type of the resource designated by the value attribute.
     * @deprecated
     */
    type: string;
    /**
     * Sets or retrieves the value of an input parameter for an element.
     * @deprecated
     */
    value: string;
    /**
     * Sets or retrieves the data type of the value attribute.
     * @deprecated
     */
    valueType: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLParamElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var HTMLParamElement: {
    prototype: HTMLParamElement;
    new(): HTMLParamElement;
};

/**
 * The **`HTMLPictureElement`** interface represents a picture HTML element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPictureElement)
 */
interface HTMLPictureElement extends HTMLElement {
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPictureElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLPictureElement: {
    prototype: HTMLPictureElement;
    new(): HTMLPictureElement;
};

/**
 * The **`HTMLPreElement`** interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text (pre).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLPreElement)
 */
interface HTMLPreElement extends HTMLElement {
    /**
     * Sets or gets a value that you can use to implement your own width functionality for the object.
     * @deprecated
     */
    width: number;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLPreElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLPreElement: {
    prototype: HTMLPreElement;
    new(): HTMLPreElement;
};

/**
 * The **`HTMLProgressElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of progress elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement)
 */
interface HTMLProgressElement extends HTMLElement {
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement>;
    /**
     * Defines the maximum, or "done" value for a progress element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/max)
     */
    max: number;
    /**
     * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/position)
     */
    readonly position: number;
    /**
     * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLProgressElement/value)
     */
    value: number;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLProgressElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLProgressElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLProgressElement: {
    prototype: HTMLProgressElement;
    new(): HTMLProgressElement;
};

/**
 * The **`HTMLQuoteElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like blockquote and q, but not the cite element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement)
 */
interface HTMLQuoteElement extends HTMLElement {
    /**
     * Sets or retrieves reference information about the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLQuoteElement/cite)
     */
    cite: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLQuoteElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLQuoteElement: {
    prototype: HTMLQuoteElement;
    new(): HTMLQuoteElement;
};

/**
 * HTML script elements expose the **`HTMLScriptElement`** interface, which provides special properties and methods for manipulating the behavior and execution of `<script>` elements (beyond the inherited HTMLElement interface).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement)
 */
interface HTMLScriptElement extends HTMLElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/async)
     */
    async: boolean;
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/blocking)
     */
    get blocking(): DOMTokenList;
    set blocking(value: string);
    /**
     * Sets or retrieves the character set used to encode the object.
     * @deprecated
     */
    charset: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/crossOrigin)
     */
    crossOrigin: string | null;
    /**
     * Sets or retrieves the status of the script.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/defer)
     */
    defer: boolean;
    /**
     * Sets or retrieves the event for which the script is written.
     * @deprecated
     */
    event: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/fetchPriority)
     */
    fetchPriority: "high" | "low" | "auto";
    /**
     * Sets or retrieves the object that is bound to the event script.
     * @deprecated
     */
    htmlFor: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/integrity)
     */
    integrity: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/noModule)
     */
    noModule: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/referrerPolicy)
     */
    referrerPolicy: string;
    /**
     * Retrieves the URL to an external file that contains the source code or data.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/src)
     */
    src: string;
    /**
     * Retrieves or sets the text of the object as a string.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/text)
     */
    text: string;
    /**
     * Sets or retrieves the MIME type for the associated scripting engine.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/type)
     */
    type: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLScriptElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLScriptElement: {
    prototype: HTMLScriptElement;
    new(): HTMLScriptElement;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLScriptElement/supports_static)
     */
    supports(type: string): boolean;
};

/**
 * The **`HTMLSelectElement`** interface represents a select HTML Element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement)
 */
interface HTMLSelectElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/autocomplete)
     */
    autocomplete: AutoFill;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/disabled)
     */
    disabled: boolean;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement>;
    /**
     * Sets or retrieves the number of objects in a collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/length)
     */
    length: number;
    /**
     * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/multiple)
     */
    multiple: boolean;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/name)
     */
    name: string;
    /**
     * Type: HTMLOptionsCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/options)
     */
    readonly options: HTMLOptionsCollection;
    /**
     * When present, marks an element that can't be submitted without a value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/required)
     */
    required: boolean;
    /**
     * Sets or retrieves the index of the selected option in a select object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedIndex)
     */
    selectedIndex: number;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/selectedOptions)
     */
    readonly selectedOptions: HTMLCollectionOf<HTMLOptionElement>;
    /**
     * Sets or retrieves the number of rows in the list box.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/size)
     */
    size: number;
    /**
     * Retrieves the type of select control based on the value of the MULTIPLE attribute.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/type)
     */
    readonly type: "select-one" | "select-multiple";
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Returns a  ValidityState object that represents the validity states of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Sets or retrieves the value which is returned to the server when the form control is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/value)
     */
    value: string;
    /**
     * Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Adds an element to the areas, controlRange, or options collection.
     * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.
     * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/add)
     */
    add(element: HTMLOptionElement | HTMLOptGroupElement, before?: HTMLElement | number | null): void;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Retrieves a select object or an object from an options collection.
     * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.
     * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/item)
     */
    item(index: number): HTMLOptionElement | null;
    /**
     * Retrieves a select object or an object from an options collection.
     * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/namedItem)
     */
    namedItem(name: string): HTMLOptionElement | null;
    /**
     * Removes an element from the collection.
     * @param index Number that specifies the zero-based index of the element to remove from the collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/remove)
     */
    remove(): void;
    remove(index: number): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Sets a custom error message that is displayed when a form is submitted.
     * @param error Sets a custom error message that is displayed when a form is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSelectElement/showPicker)
     */
    showPicker(): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSelectElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    [name: number]: HTMLOptionElement | HTMLOptGroupElement;
}

declare var HTMLSelectElement: {
    prototype: HTMLSelectElement;
    new(): HTMLSelectElement;
};

/**
 * The **`HTMLSlotElement`** interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML slot element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement)
 */
interface HTMLSlotElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/name)
     */
    name: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assign)
     */
    assign(...nodes: (Element | Text)[]): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedElements)
     */
    assignedElements(options?: AssignedNodesOptions): Element[];
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/assignedNodes)
     */
    assignedNodes(options?: AssignedNodesOptions): Node[];
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSlotElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLSlotElement: {
    prototype: HTMLSlotElement;
    new(): HTMLSlotElement;
};

/**
 * The **`HTMLSourceElement`** interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating source elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement)
 */
interface HTMLSourceElement extends HTMLElement {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/height)
     */
    height: number;
    /**
     * Gets or sets the intended media type of the media source.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/media)
     */
    media: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/sizes)
     */
    sizes: string;
    /**
     * The address or URL of the a media resource that is to be considered.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/src)
     */
    src: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/srcset)
     */
    srcset: string;
    /**
     * Gets or sets the MIME type of a media resource.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/type)
     */
    type: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSourceElement/width)
     */
    width: number;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSourceElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLSourceElement: {
    prototype: HTMLSourceElement;
    new(): HTMLSourceElement;
};

/**
 * The **`HTMLSpanElement`** interface represents a span element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSpanElement)
 */
interface HTMLSpanElement extends HTMLElement {
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLSpanElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLSpanElement: {
    prototype: HTMLSpanElement;
    new(): HTMLSpanElement;
};

/**
 * The **`HTMLStyleElement`** interface represents a style element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement)
 */
interface HTMLStyleElement extends HTMLElement, LinkStyle {
    /**
     * Type: DOMTokenList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/blocking)
     */
    get blocking(): DOMTokenList;
    set blocking(value: string);
    /**
     * Enables or disables the style sheet.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/disabled)
     */
    disabled: boolean;
    /**
     * Sets or retrieves the media type.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/media)
     */
    media: string;
    /**
     * Retrieves the CSS language in which the style sheet is written.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLStyleElement/type)
     */
    type: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLStyleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLStyleElement: {
    prototype: HTMLStyleElement;
    new(): HTMLStyleElement;
};

/**
 * The **`HTMLTableCaptionElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table caption elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement)
 */
interface HTMLTableCaptionElement extends HTMLElement {
    /**
     * Sets or retrieves the alignment of the caption or legend.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCaptionElement/align)
     */
    align: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCaptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCaptionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTableCaptionElement: {
    prototype: HTMLTableCaptionElement;
    new(): HTMLTableCaptionElement;
};

/**
 * The **`HTMLTableCellElement`** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header cells (th) or data cells (td), in an HTML document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement)
 */
interface HTMLTableCellElement extends HTMLElement {
    /**
     * Sets or retrieves abbreviated text for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/abbr)
     */
    abbr: string;
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/align)
     */
    align: string;
    /**
     * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.
     * @deprecated
     */
    axis: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/bgColor)
     */
    bgColor: string;
    /**
     * Retrieves the position of the object in the cells collection of a row.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/cellIndex)
     */
    readonly cellIndex: number;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/ch)
     */
    ch: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/chOff)
     */
    chOff: string;
    /**
     * Sets or retrieves the number columns in the table that the object should span.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/colSpan)
     */
    colSpan: number;
    /**
     * Sets or retrieves a list of header cells that provide information for the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/headers)
     */
    headers: string;
    /**
     * Sets or retrieves the height of the object.
     * @deprecated
     */
    height: string;
    /**
     * Sets or retrieves whether the browser automatically performs wordwrap.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/noWrap)
     */
    noWrap: boolean;
    /**
     * Sets or retrieves how many rows in a table the cell should span.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/rowSpan)
     */
    rowSpan: number;
    /**
     * Sets or retrieves the group of cells in a table to which the object's information applies.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/scope)
     */
    scope: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableCellElement/vAlign)
     */
    vAlign: string;
    /**
     * Sets or retrieves the width of the object.
     * @deprecated
     */
    width: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTableCellElement: {
    prototype: HTMLTableCellElement;
    new(): HTMLTableCellElement;
};

/**
 * The **`HTMLTableColElement`** interface provides properties for manipulating single or grouped table column elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement)
 */
interface HTMLTableColElement extends HTMLElement {
    /**
     * Sets or retrieves the alignment of the object relative to the display or table.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/align)
     */
    align: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/ch)
     */
    ch: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/chOff)
     */
    chOff: string;
    /**
     * Sets or retrieves the number of columns in the group.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/span)
     */
    span: number;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableColElement/vAlign)
     */
    vAlign: string;
    /**
     * Sets or retrieves the width of the object.
     * @deprecated
     */
    width: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableColElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableColElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTableColElement: {
    prototype: HTMLTableColElement;
    new(): HTMLTableColElement;
};

/** @deprecated prefer HTMLTableCellElement */
interface HTMLTableDataCellElement extends HTMLTableCellElement {
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableDataCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableDataCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/**
 * The **`HTMLTableElement`** interface provides special properties and methods (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement)
 */
interface HTMLTableElement extends HTMLElement {
    /**
     * Sets or retrieves a value that indicates the table alignment.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/align)
     */
    align: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/bgColor)
     */
    bgColor: string;
    /**
     * Sets or retrieves the width of the border to draw around the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/border)
     */
    border: string;
    /**
     * Retrieves the caption object of a table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/caption)
     */
    caption: HTMLTableCaptionElement | null;
    /**
     * Sets or retrieves the amount of space between the border of the cell and the content of the cell.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellPadding)
     */
    cellPadding: string;
    /**
     * Sets or retrieves the amount of space between cells in a table.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/cellSpacing)
     */
    cellSpacing: string;
    /**
     * Sets or retrieves the way the border frame around the table is displayed.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/frame)
     */
    frame: string;
    /**
     * Sets or retrieves the number of horizontal rows contained in the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rows)
     */
    readonly rows: HTMLCollectionOf<HTMLTableRowElement>;
    /**
     * Sets or retrieves which dividing lines (inner borders) are displayed.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/rules)
     */
    rules: string;
    /**
     * Sets or retrieves a description and/or structure of the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/summary)
     */
    summary: string;
    /**
     * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tBodies)
     */
    readonly tBodies: HTMLCollectionOf<HTMLTableSectionElement>;
    /**
     * Retrieves the tFoot object of the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tFoot)
     */
    tFoot: HTMLTableSectionElement | null;
    /**
     * Retrieves the tHead object of the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/tHead)
     */
    tHead: HTMLTableSectionElement | null;
    /**
     * Sets or retrieves the width of the object.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/width)
     */
    width: string;
    /**
     * Creates an empty caption element in the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createCaption)
     */
    createCaption(): HTMLTableCaptionElement;
    /**
     * Creates an empty tBody element in the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTBody)
     */
    createTBody(): HTMLTableSectionElement;
    /**
     * Creates an empty tFoot element in the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTFoot)
     */
    createTFoot(): HTMLTableSectionElement;
    /**
     * Returns the tHead element object if successful, or null otherwise.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/createTHead)
     */
    createTHead(): HTMLTableSectionElement;
    /**
     * Deletes the caption element and its contents from the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteCaption)
     */
    deleteCaption(): void;
    /**
     * Removes the specified row (tr) from the element and from the rows collection.
     * @param index Number that specifies the zero-based position in the rows collection of the row to remove.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteRow)
     */
    deleteRow(index: number): void;
    /**
     * Deletes the tFoot element and its contents from the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTFoot)
     */
    deleteTFoot(): void;
    /**
     * Deletes the tHead element and its contents from the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/deleteTHead)
     */
    deleteTHead(): void;
    /**
     * Creates a new row (tr) in the table, and adds the row to the rows collection.
     * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableElement/insertRow)
     */
    insertRow(index?: number): HTMLTableRowElement;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTableElement: {
    prototype: HTMLTableElement;
    new(): HTMLTableElement;
};

/** @deprecated prefer HTMLTableCellElement */
interface HTMLTableHeaderCellElement extends HTMLTableCellElement {
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableHeaderCellElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/**
 * The **`HTMLTableRowElement`** interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement)
 */
interface HTMLTableRowElement extends HTMLElement {
    /**
     * Sets or retrieves how the object is aligned with adjacent text.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/align)
     */
    align: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/bgColor)
     */
    bgColor: string;
    /**
     * Retrieves a collection of all cells in the table row.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/cells)
     */
    readonly cells: HTMLCollectionOf<HTMLTableCellElement>;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/ch)
     */
    ch: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/chOff)
     */
    chOff: string;
    /**
     * Retrieves the position of the object in the rows collection for the table.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/rowIndex)
     */
    readonly rowIndex: number;
    /**
     * Retrieves the position of the object in the collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/sectionRowIndex)
     */
    readonly sectionRowIndex: number;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/vAlign)
     */
    vAlign: string;
    /**
     * Removes the specified cell from the table row, as well as from the cells collection.
     * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/deleteCell)
     */
    deleteCell(index: number): void;
    /**
     * Creates a new cell in the table row, and adds the cell to the cells collection.
     * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableRowElement/insertCell)
     */
    insertCell(index?: number): HTMLTableCellElement;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableRowElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTableRowElement: {
    prototype: HTMLTableRowElement;
    new(): HTMLTableRowElement;
};

/**
 * The **`HTMLTableSectionElement`** interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies (thead, tfoot, and tbody, respectively) in an HTML table.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement)
 */
interface HTMLTableSectionElement extends HTMLElement {
    /**
     * Sets or retrieves a value that indicates the table alignment.
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/align)
     */
    align: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/ch)
     */
    ch: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/chOff)
     */
    chOff: string;
    /**
     * Sets or retrieves the number of horizontal rows contained in the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/rows)
     */
    readonly rows: HTMLCollectionOf<HTMLTableRowElement>;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/vAlign)
     */
    vAlign: string;
    /**
     * Removes the specified row (tr) from the element and from the rows collection.
     * @param index Number that specifies the zero-based position in the rows collection of the row to remove.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/deleteRow)
     */
    deleteRow(index: number): void;
    /**
     * Creates a new row (tr) in the table, and adds the row to the rows collection.
     * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTableSectionElement/insertRow)
     */
    insertRow(index?: number): HTMLTableRowElement;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableSectionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTableSectionElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTableSectionElement: {
    prototype: HTMLTableSectionElement;
    new(): HTMLTableSectionElement;
};

/**
 * The **`HTMLTemplateElement`** interface enables access to the contents of an HTML template element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement)
 */
interface HTMLTemplateElement extends HTMLElement {
    /**
     * Type: DocumentFragment
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/content)
     */
    readonly content: DocumentFragment;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootClonable)
     */
    shadowRootClonable: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootDelegatesFocus)
     */
    shadowRootDelegatesFocus: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootMode)
     */
    shadowRootMode: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTemplateElement/shadowRootSerializable)
     */
    shadowRootSerializable: boolean;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTemplateElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTemplateElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTemplateElement: {
    prototype: HTMLTemplateElement;
    new(): HTMLTemplateElement;
};

/**
 * The **`HTMLTextAreaElement`** interface provides properties and methods for manipulating the layout and presentation of textarea elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement)
 */
interface HTMLTextAreaElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/autocomplete)
     */
    autocomplete: AutoFill;
    /**
     * Sets or retrieves the width of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/cols)
     */
    cols: number;
    /**
     * Sets or retrieves the initial contents of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/defaultValue)
     */
    defaultValue: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/dirName)
     */
    dirName: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/disabled)
     */
    disabled: boolean;
    /**
     * Retrieves a reference to the form that the object is embedded in.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/form)
     */
    readonly form: HTMLFormElement | null;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/labels)
     */
    readonly labels: NodeListOf<HTMLLabelElement>;
    /**
     * Sets or retrieves the maximum number of characters that the user can enter in a text control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/maxLength)
     */
    maxLength: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/minLength)
     */
    minLength: number;
    /**
     * Sets or retrieves the name of the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/name)
     */
    name: string;
    /**
     * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/placeholder)
     */
    placeholder: string;
    /**
     * Sets or retrieves the value indicated whether the content of the object is read-only.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/readOnly)
     */
    readOnly: boolean;
    /**
     * When present, marks an element that can't be submitted without a value.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/required)
     */
    required: boolean;
    /**
     * Sets or retrieves the number of horizontal rows contained in the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/rows)
     */
    rows: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionDirection)
     */
    selectionDirection: "forward" | "backward" | "none";
    /**
     * Gets or sets the end position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionEnd)
     */
    selectionEnd: number;
    /**
     * Gets or sets the starting position or offset of a text selection.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/selectionStart)
     */
    selectionStart: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/textLength)
     */
    readonly textLength: number;
    /**
     * Retrieves the type of control.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/type)
     */
    readonly type: string;
    /**
     * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as "this is a required field". The result is that the user sees validation messages without actually submitting.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/validationMessage)
     */
    readonly validationMessage: string;
    /**
     * Returns a  ValidityState object that represents the validity states of an element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/validity)
     */
    readonly validity: ValidityState;
    /**
     * Retrieves or sets the text in the entry field of the textArea element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/value)
     */
    value: string;
    /**
     * Returns whether an element will successfully validate based on forms validation rules and constraints.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/willValidate)
     */
    readonly willValidate: boolean;
    /**
     * Sets or retrieves how to handle wordwrapping in the object.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/wrap)
     */
    wrap: string;
    /**
     * Returns whether a form will validate when it is submitted, without having to submit it.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/checkValidity)
     */
    checkValidity(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/reportValidity)
     */
    reportValidity(): boolean;
    /**
     * Highlights the input area of a form element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/select)
     */
    select(): void;
    /**
     * Sets a custom error message that is displayed when a form is submitted.
     * @param error Sets a custom error message that is displayed when a form is submitted.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/setCustomValidity)
     */
    setCustomValidity(error: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/setRangeText)
     */
    setRangeText(replacement: string): void;
    setRangeText(replacement: string, start: number, end: number, selectionMode?: SelectionMode): void;
    /**
     * Sets the start and end positions of a selection in a text field.
     * @param start The offset into the text field for the start of the selection.
     * @param end The offset into the text field for the end of the selection.
     * @param direction The direction in which the selection is performed.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTextAreaElement/setSelectionRange)
     */
    setSelectionRange(start: number | null, end: number | null, direction?: "forward" | "backward" | "none"): void;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTextAreaElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTextAreaElement: {
    prototype: HTMLTextAreaElement;
    new(): HTMLTextAreaElement;
};

/**
 * The **`HTMLTimeElement`** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating time elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement)
 */
interface HTMLTimeElement extends HTMLElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTimeElement/dateTime)
     */
    dateTime: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTimeElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTimeElement: {
    prototype: HTMLTimeElement;
    new(): HTMLTimeElement;
};

/**
 * The **`HTMLTitleElement`** interface is implemented by a document's title.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement)
 */
interface HTMLTitleElement extends HTMLElement {
    /**
     * Retrieves or sets the text of the object as a string.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTitleElement/text)
     */
    text: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTitleElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTitleElement: {
    prototype: HTMLTitleElement;
    new(): HTMLTitleElement;
};

/**
 * The **`HTMLTrackElement`** interface represents an HTML track element within the DOM.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement)
 */
interface HTMLTrackElement extends HTMLElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/default)
     */
    default: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/kind)
     */
    kind: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/label)
     */
    label: string;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/readyState)
     */
    readonly readyState: number;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/src)
     */
    src: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/srclang)
     */
    srclang: string;
    /**
     * Type: TextTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/track)
     */
    readonly track: TextTrack;
    /** Type: unsigned short */
    readonly NONE: 0;
    /** Type: unsigned short */
    readonly LOADING: 1;
    /** Type: unsigned short */
    readonly LOADED: 2;
    /** Type: unsigned short */
    readonly ERROR: 3;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLTrackElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLTrackElement: {
    prototype: HTMLTrackElement;
    new(): HTMLTrackElement;
    /** Type: unsigned short */
    readonly NONE: 0;
    /** Type: unsigned short */
    readonly LOADING: 1;
    /** Type: unsigned short */
    readonly LOADED: 2;
    /** Type: unsigned short */
    readonly ERROR: 3;
};

/**
 * The **`HTMLUListElement`** interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list (ul) elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUListElement)
 */
interface HTMLUListElement extends HTMLElement {
    /**
     * Type: boolean
     * @deprecated
     */
    compact: boolean;
    /**
     * Type: DOMString
     * @deprecated
     */
    type: string;
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUListElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLUListElement: {
    prototype: HTMLUListElement;
    new(): HTMLUListElement;
};

/**
 * The **`HTMLUnknownElement`** interface represents an invalid HTML element and derives from the HTMLElement interface, but without implementing any additional properties or methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLUnknownElement)
 */
interface HTMLUnknownElement extends HTMLElement {
    addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLUnknownElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLUnknownElement: {
    prototype: HTMLUnknownElement;
    new(): HTMLUnknownElement;
};

interface HTMLVideoElementEventMap extends HTMLMediaElementEventMap {
    "enterpictureinpicture": PictureInPictureEvent;
    "leavepictureinpicture": PictureInPictureEvent;
}

/**
 * Implemented by the video element, the **`HTMLVideoElement`** interface provides special properties and methods for manipulating video objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)
 */
interface HTMLVideoElement extends HTMLMediaElement {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/disablePictureInPicture)
     */
    disablePictureInPicture: boolean;
    /**
     * Gets or sets the height of the video element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/height)
     */
    height: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/enterpictureinpicture_event)
     */
    onenterpictureinpicture: ((this: HTMLVideoElement, ev: PictureInPictureEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/leavepictureinpicture_event)
     */
    onleavepictureinpicture: ((this: HTMLVideoElement, ev: PictureInPictureEvent) => any) | null;
    /** Gets or sets the playsinline of the video element. for example, On iPhone, video elements will now be allowed to play inline, and will not automatically enter fullscreen mode when playback begins. */
    playsInline: boolean;
    /**
     * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/poster)
     */
    poster: string;
    /**
     * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoHeight)
     */
    readonly videoHeight: number;
    /**
     * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/videoWidth)
     */
    readonly videoWidth: number;
    /**
     * Gets or sets the width of the video element.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/width)
     */
    width: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/cancelVideoFrameCallback)
     */
    cancelVideoFrameCallback(handle: number): void;
    /**
     * Type: VideoPlaybackQuality
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/getVideoPlaybackQuality)
     */
    getVideoPlaybackQuality(): VideoPlaybackQuality;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestPictureInPicture)
     */
    requestPictureInPicture(): Promise<PictureInPictureWindow>;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/requestVideoFrameCallback)
     */
    requestVideoFrameCallback(callback: VideoFrameRequestCallback): number;
    addEventListener<K extends keyof HTMLVideoElementEventMap>(type: K, listener: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof HTMLVideoElementEventMap>(type: K, listener: (this: HTMLVideoElement, ev: HTMLVideoElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var HTMLVideoElement: {
    prototype: HTMLVideoElement;
    new(): HTMLVideoElement;
};

/**
 * The **`HashChangeEvent`** interface represents events that fire when the fragment identifier of the URL has changed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent)
 */
interface HashChangeEvent extends Event {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/newURL)
     */
    readonly newURL: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HashChangeEvent/oldURL)
     */
    readonly oldURL: string;
}

declare var HashChangeEvent: {
    prototype: HashChangeEvent;
    new(type: string, eventInitDict?: HashChangeEventInit): HashChangeEvent;
};

/**
 * The **`Headers`** interface of the Fetch API allows you to perform various actions on HTTP request and response headers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers)
 */
interface Headers {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/append)
     */
    append(name: string, value: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/delete)
     */
    delete(name: string): void;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/get)
     */
    get(name: string): string | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/getSetCookie)
     */
    getSetCookie(): string[];
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/has)
     */
    has(name: string): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Headers/set)
     */
    set(name: string, value: string): void;
    forEach(callbackfn: (value: string, key: string, parent: Headers) => void, thisArg?: any): void;
}

declare var Headers: {
    prototype: Headers;
    new(init?: HeadersInit): Headers;
};

/**
 * The **`Highlight`** interface of the CSS Custom Highlight API is used to represent a collection of Range instances to be styled using the API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight)
 */
interface Highlight {
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/priority)
     */
    priority: number;
    /**
     * Type: HighlightType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Highlight/type)
     */
    type: HighlightType;
    forEach(callbackfn: (value: AbstractRange, key: AbstractRange, parent: Highlight) => void, thisArg?: any): void;
}

declare var Highlight: {
    prototype: Highlight;
    new(...initialRanges: AbstractRange[]): Highlight;
};

/**
 * The **`HighlightRegistry`** interface of the CSS Custom Highlight API is used to register Highlight objects to be styled using the API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HighlightRegistry)
 */
interface HighlightRegistry {
    forEach(callbackfn: (value: Highlight, key: string, parent: HighlightRegistry) => void, thisArg?: any): void;
}

declare var HighlightRegistry: {
    prototype: HighlightRegistry;
    new(): HighlightRegistry;
};

/**
 * The **`History`** interface of the History API allows manipulation of the browser _session history_, that is the pages visited in the tab or frame that the current page is loaded in.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History)
 */
interface History {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/length)
     */
    readonly length: number;
    /**
     * Type: ScrollRestoration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/scrollRestoration)
     */
    scrollRestoration: ScrollRestoration;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/state)
     */
    readonly state: any;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/back)
     */
    back(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/forward)
     */
    forward(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/go)
     */
    go(delta?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/pushState)
     */
    pushState(data: any, unused: string, url?: string | URL | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/History/replaceState)
     */
    replaceState(data: any, unused: string, url?: string | URL | null): void;
}

declare var History: {
    prototype: History;
    new(): History;
};

/**
 * The **`IDBCursor`** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor)
 */
interface IDBCursor {
    /**
     * Type: IDBCursorDirection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/direction)
     */
    readonly direction: IDBCursorDirection;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/key)
     */
    readonly key: IDBValidKey;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/primaryKey)
     */
    readonly primaryKey: IDBValidKey;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/request)
     */
    readonly request: IDBRequest;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/source)
     */
    readonly source: IDBObjectStore | IDBIndex;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/advance)
     */
    advance(count: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/continue)
     */
    continue(key?: IDBValidKey): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/continuePrimaryKey)
     */
    continuePrimaryKey(key: IDBValidKey, primaryKey: IDBValidKey): void;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/delete)
     */
    delete(): IDBRequest<undefined>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursor/update)
     */
    update(value: any): IDBRequest<IDBValidKey>;
}

declare var IDBCursor: {
    prototype: IDBCursor;
    new(): IDBCursor;
};

/**
 * The **`IDBCursorWithValue`** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue)
 */
interface IDBCursorWithValue extends IDBCursor {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBCursorWithValue/value)
     */
    readonly value: any;
}

declare var IDBCursorWithValue: {
    prototype: IDBCursorWithValue;
    new(): IDBCursorWithValue;
};

interface IDBDatabaseEventMap {
    "abort": Event;
    "close": Event;
    "error": Event;
    "versionchange": IDBVersionChangeEvent;
}

/**
 * The **`IDBDatabase`** interface of the IndexedDB API provides a connection to a database; you can use an `IDBDatabase` object to open a transaction on your database then create, manipulate, and delete objects (data) in that database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase)
 */
interface IDBDatabase extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/name)
     */
    readonly name: string;
    /**
     * Type: DOMStringList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/objectStoreNames)
     */
    readonly objectStoreNames: DOMStringList;
    /** Type: EventHandler */
    onabort: ((this: IDBDatabase, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close_event)
     */
    onclose: ((this: IDBDatabase, ev: Event) => any) | null;
    /** Type: EventHandler */
    onerror: ((this: IDBDatabase, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/versionchange_event)
     */
    onversionchange: ((this: IDBDatabase, ev: IDBVersionChangeEvent) => any) | null;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/version)
     */
    readonly version: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/close)
     */
    close(): void;
    /**
     * Type: IDBObjectStore
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/createObjectStore)
     */
    createObjectStore(name: string, options?: IDBObjectStoreParameters): IDBObjectStore;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/deleteObjectStore)
     */
    deleteObjectStore(name: string): void;
    /**
     * Type: IDBTransaction
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBDatabase/transaction)
     */
    transaction(storeNames: string | string[], mode?: IDBTransactionMode, options?: IDBTransactionOptions): IDBTransaction;
    addEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof IDBDatabaseEventMap>(type: K, listener: (this: IDBDatabase, ev: IDBDatabaseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var IDBDatabase: {
    prototype: IDBDatabase;
    new(): IDBDatabase;
};

/**
 * The **`IDBFactory`** interface of the IndexedDB API lets applications asynchronously access the indexed databases.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory)
 */
interface IDBFactory {
    /**
     * Type: short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/cmp)
     */
    cmp(first: any, second: any): number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/databases)
     */
    databases(): Promise<IDBDatabaseInfo[]>;
    /**
     * Type: IDBOpenDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/deleteDatabase)
     */
    deleteDatabase(name: string): IDBOpenDBRequest;
    /**
     * Type: IDBOpenDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBFactory/open)
     */
    open(name: string, version?: number): IDBOpenDBRequest;
}

declare var IDBFactory: {
    prototype: IDBFactory;
    new(): IDBFactory;
};

/**
 * `IDBIndex` interface of the IndexedDB API provides asynchronous access to an index in a database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex)
 */
interface IDBIndex {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/keyPath)
     */
    readonly keyPath: string | string[];
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/multiEntry)
     */
    readonly multiEntry: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/name)
     */
    name: string;
    /**
     * Type: IDBObjectStore
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/objectStore)
     */
    readonly objectStore: IDBObjectStore;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/unique)
     */
    readonly unique: boolean;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/count)
     */
    count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/get)
     */
    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAll)
     */
    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getAllKeys)
     */
    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/getKey)
     */
    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/openCursor)
     */
    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBIndex/openKeyCursor)
     */
    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;
}

declare var IDBIndex: {
    prototype: IDBIndex;
    new(): IDBIndex;
};

/**
 * The **`IDBKeyRange`** interface of the IndexedDB API represents a continuous interval over some data type that is used for keys.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange)
 */
interface IDBKeyRange {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lower)
     */
    readonly lower: any;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerOpen)
     */
    readonly lowerOpen: boolean;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upper)
     */
    readonly upper: any;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperOpen)
     */
    readonly upperOpen: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/includes)
     */
    includes(key: any): boolean;
}

declare var IDBKeyRange: {
    prototype: IDBKeyRange;
    new(): IDBKeyRange;
    /**
     * Type: IDBKeyRange
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/bound_static)
     */
    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;
    /**
     * Type: IDBKeyRange
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/lowerBound_static)
     */
    lowerBound(lower: any, open?: boolean): IDBKeyRange;
    /**
     * Type: IDBKeyRange
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/only_static)
     */
    only(value: any): IDBKeyRange;
    /**
     * Type: IDBKeyRange
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBKeyRange/upperBound_static)
     */
    upperBound(upper: any, open?: boolean): IDBKeyRange;
};

/**
 * The **`IDBObjectStore`** interface of the IndexedDB API represents an object store in a database.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore)
 */
interface IDBObjectStore {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/autoIncrement)
     */
    readonly autoIncrement: boolean;
    /**
     * Type: DOMStringList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/indexNames)
     */
    readonly indexNames: DOMStringList;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/keyPath)
     */
    readonly keyPath: string | string[] | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/name)
     */
    name: string;
    /**
     * Type: IDBTransaction
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/transaction)
     */
    readonly transaction: IDBTransaction;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/add)
     */
    add(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/clear)
     */
    clear(): IDBRequest<undefined>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/count)
     */
    count(query?: IDBValidKey | IDBKeyRange): IDBRequest<number>;
    /**
     * Type: IDBIndex
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/createIndex)
     */
    createIndex(name: string, keyPath: string | string[], options?: IDBIndexParameters): IDBIndex;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/delete)
     */
    delete(query: IDBValidKey | IDBKeyRange): IDBRequest<undefined>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/deleteIndex)
     */
    deleteIndex(name: string): void;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/get)
     */
    get(query: IDBValidKey | IDBKeyRange): IDBRequest<any>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAll)
     */
    getAll(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<any[]>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getAllKeys)
     */
    getAllKeys(query?: IDBValidKey | IDBKeyRange | null, count?: number): IDBRequest<IDBValidKey[]>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/getKey)
     */
    getKey(query: IDBValidKey | IDBKeyRange): IDBRequest<IDBValidKey | undefined>;
    /**
     * Type: IDBIndex
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/index)
     */
    index(name: string): IDBIndex;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openCursor)
     */
    openCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursorWithValue | null>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/openKeyCursor)
     */
    openKeyCursor(query?: IDBValidKey | IDBKeyRange | null, direction?: IDBCursorDirection): IDBRequest<IDBCursor | null>;
    /**
     * Type: IDBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBObjectStore/put)
     */
    put(value: any, key?: IDBValidKey): IDBRequest<IDBValidKey>;
}

declare var IDBObjectStore: {
    prototype: IDBObjectStore;
    new(): IDBObjectStore;
};

interface IDBOpenDBRequestEventMap extends IDBRequestEventMap {
    "blocked": IDBVersionChangeEvent;
    "upgradeneeded": IDBVersionChangeEvent;
}

/**
 * The **`IDBOpenDBRequest`** interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using IDBFactory.open and IDBFactory.deleteDatabase), using specific event handler attributes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest)
 */
interface IDBOpenDBRequest extends IDBRequest<IDBDatabase> {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/blocked_event)
     */
    onblocked: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBOpenDBRequest/upgradeneeded_event)
     */
    onupgradeneeded: ((this: IDBOpenDBRequest, ev: IDBVersionChangeEvent) => any) | null;
    addEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof IDBOpenDBRequestEventMap>(type: K, listener: (this: IDBOpenDBRequest, ev: IDBOpenDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var IDBOpenDBRequest: {
    prototype: IDBOpenDBRequest;
    new(): IDBOpenDBRequest;
};

interface IDBRequestEventMap {
    "error": Event;
    "success": Event;
}

/**
 * The **`IDBRequest`** interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest)
 */
interface IDBRequest<T = any> extends EventTarget {
    /**
     * Type: DOMException
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error)
     */
    readonly error: DOMException | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/error_event)
     */
    onerror: ((this: IDBRequest<T>, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/success_event)
     */
    onsuccess: ((this: IDBRequest<T>, ev: Event) => any) | null;
    /**
     * Type: IDBRequestReadyState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/readyState)
     */
    readonly readyState: IDBRequestReadyState;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/result)
     */
    readonly result: T;
    /**
     * Type: [object Object],[object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/source)
     */
    readonly source: IDBObjectStore | IDBIndex | IDBCursor;
    /**
     * Type: IDBTransaction
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBRequest/transaction)
     */
    readonly transaction: IDBTransaction | null;
    addEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof IDBRequestEventMap>(type: K, listener: (this: IDBRequest<T>, ev: IDBRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var IDBRequest: {
    prototype: IDBRequest;
    new(): IDBRequest;
};

interface IDBTransactionEventMap {
    "abort": Event;
    "complete": Event;
    "error": Event;
}

/**
 * The **`IDBTransaction`** interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction)
 */
interface IDBTransaction extends EventTarget {
    /**
     * Type: IDBDatabase
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/db)
     */
    readonly db: IDBDatabase;
    /**
     * Type: IDBTransactionDurability
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/durability)
     */
    readonly durability: IDBTransactionDurability;
    /**
     * Type: DOMException
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error)
     */
    readonly error: DOMException | null;
    /**
     * Type: IDBTransactionMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/mode)
     */
    readonly mode: IDBTransactionMode;
    /**
     * Type: DOMStringList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStoreNames)
     */
    readonly objectStoreNames: DOMStringList;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort_event)
     */
    onabort: ((this: IDBTransaction, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/complete_event)
     */
    oncomplete: ((this: IDBTransaction, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/error_event)
     */
    onerror: ((this: IDBTransaction, ev: Event) => any) | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/abort)
     */
    abort(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/commit)
     */
    commit(): void;
    /**
     * Type: IDBObjectStore
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBTransaction/objectStore)
     */
    objectStore(name: string): IDBObjectStore;
    addEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof IDBTransactionEventMap>(type: K, listener: (this: IDBTransaction, ev: IDBTransactionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var IDBTransaction: {
    prototype: IDBTransaction;
    new(): IDBTransaction;
};

/**
 * The **`IDBVersionChangeEvent`** interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.upgradeneeded_event event handler function.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent)
 */
interface IDBVersionChangeEvent extends Event {
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/newVersion)
     */
    readonly newVersion: number | null;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IDBVersionChangeEvent/oldVersion)
     */
    readonly oldVersion: number;
}

declare var IDBVersionChangeEvent: {
    prototype: IDBVersionChangeEvent;
    new(type: string, eventInitDict?: IDBVersionChangeEventInit): IDBVersionChangeEvent;
};

/**
 * The **`IIRFilterNode`** interface of the Web Audio API is a AudioNode processor which implements a general **infinite impulse response** (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode)
 */
interface IIRFilterNode extends AudioNode {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IIRFilterNode/getFrequencyResponse)
     */
    getFrequencyResponse(frequencyHz: Float32Array<ArrayBuffer>, magResponse: Float32Array<ArrayBuffer>, phaseResponse: Float32Array<ArrayBuffer>): void;
}

declare var IIRFilterNode: {
    prototype: IIRFilterNode;
    new(context: BaseAudioContext, options: IIRFilterOptions): IIRFilterNode;
};

/**
 * The `IdleDeadline` interface is used as the data type of the input parameter to idle callbacks established by calling Window.requestIdleCallback().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline)
 */
interface IdleDeadline {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/didTimeout)
     */
    readonly didTimeout: boolean;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IdleDeadline/timeRemaining)
     */
    timeRemaining(): DOMHighResTimeStamp;
}

declare var IdleDeadline: {
    prototype: IdleDeadline;
    new(): IdleDeadline;
};

/**
 * The **`ImageBitmap`** interface represents a bitmap image which can be drawn to a canvas without undue latency.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap)
 */
interface ImageBitmap {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/height)
     */
    readonly height: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/width)
     */
    readonly width: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmap/close)
     */
    close(): void;
}

declare var ImageBitmap: {
    prototype: ImageBitmap;
    new(): ImageBitmap;
};

/**
 * The **`ImageBitmapRenderingContext`** interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext)
 */
interface ImageBitmapRenderingContext {
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/canvas)
     */
    readonly canvas: HTMLCanvasElement | OffscreenCanvas;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageBitmapRenderingContext/transferFromImageBitmap)
     */
    transferFromImageBitmap(bitmap: ImageBitmap | null): void;
}

declare var ImageBitmapRenderingContext: {
    prototype: ImageBitmapRenderingContext;
    new(): ImageBitmapRenderingContext;
};

/**
 * The **`ImageCapture`** interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture)
 */
interface ImageCapture {
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture/track)
     */
    readonly track: MediaStreamTrack;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture/getPhotoCapabilities)
     */
    getPhotoCapabilities(): Promise<PhotoCapabilities>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture/getPhotoSettings)
     */
    getPhotoSettings(): Promise<PhotoSettings>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageCapture/takePhoto)
     */
    takePhoto(photoSettings?: PhotoSettings): Promise<Blob>;
}

declare var ImageCapture: {
    prototype: ImageCapture;
    new(videoTrack: MediaStreamTrack): ImageCapture;
};

/**
 * The **`ImageData`** interface represents the underlying pixel data of an area of a canvas element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData)
 */
interface ImageData {
    /**
     * Type: PredefinedColorSpace
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/colorSpace)
     */
    readonly colorSpace: PredefinedColorSpace;
    /**
     * Type: ImageDataArray
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/data)
     */
    readonly data: ImageDataArray;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/height)
     */
    readonly height: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageData/width)
     */
    readonly width: number;
}

declare var ImageData: {
    prototype: ImageData;
    new(sw: number, sh: number, settings?: ImageDataSettings): ImageData;
    new(data: ImageDataArray, sw: number, sh?: number, settings?: ImageDataSettings): ImageData;
};

/**
 * The **`ImageDecoder`** interface of the WebCodecs API provides a way to unpack and decode encoded image data.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder)
 */
interface ImageDecoder {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/complete)
     */
    readonly complete: boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/completed)
     */
    readonly completed: Promise<void>;
    /**
     * Type: ImageTrackList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/tracks)
     */
    readonly tracks: ImageTrackList;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/type)
     */
    readonly type: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/close)
     */
    close(): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/decode)
     */
    decode(options?: ImageDecodeOptions): Promise<ImageDecodeResult>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/reset)
     */
    reset(): void;
}

declare var ImageDecoder: {
    prototype: ImageDecoder;
    new(init: ImageDecoderInit): ImageDecoder;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageDecoder/isTypeSupported_static)
     */
    isTypeSupported(type: string): Promise<boolean>;
};

/**
 * The **`ImageTrack`** interface of the WebCodecs API represents an individual image track.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack)
 */
interface ImageTrack {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/animated)
     */
    readonly animated: boolean;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/frameCount)
     */
    readonly frameCount: number;
    /**
     * Type: unrestricted float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/repetitionCount)
     */
    readonly repetitionCount: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrack/selected)
     */
    selected: boolean;
}

declare var ImageTrack: {
    prototype: ImageTrack;
    new(): ImageTrack;
};

/**
 * The **`ImageTrackList`** interface of the WebCodecs API represents a list of image tracks.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList)
 */
interface ImageTrackList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/length)
     */
    readonly length: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/ready)
     */
    readonly ready: Promise<void>;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/selectedIndex)
     */
    readonly selectedIndex: number;
    /**
     * Type: ImageTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ImageTrackList/selectedTrack)
     */
    readonly selectedTrack: ImageTrack | null;
    [index: number]: ImageTrack;
}

declare var ImageTrackList: {
    prototype: ImageTrackList;
    new(): ImageTrackList;
};

interface ImportMeta {
    url: string;
    resolve(specifier: string): string;
}

/**
 * The **`InputDeviceInfo`** interface of the Media Capture and Streams API gives access to the capabilities of the input device that it represents.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo)
 */
interface InputDeviceInfo extends MediaDeviceInfo {
    /**
     * Type: MediaTrackCapabilities
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputDeviceInfo/getCapabilities)
     */
    getCapabilities(): MediaTrackCapabilities;
}

declare var InputDeviceInfo: {
    prototype: InputDeviceInfo;
    new(): InputDeviceInfo;
};

/**
 * The **`InputEvent`** interface represents an event notifying the user of editable content changes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent)
 */
interface InputEvent extends UIEvent {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/data)
     */
    readonly data: string | null;
    /**
     * Type: DataTransfer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/dataTransfer)
     */
    readonly dataTransfer: DataTransfer | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/inputType)
     */
    readonly inputType: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/isComposing)
     */
    readonly isComposing: boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/InputEvent/getTargetRanges)
     */
    getTargetRanges(): StaticRange[];
}

declare var InputEvent: {
    prototype: InputEvent;
    new(type: string, eventInitDict?: InputEventInit): InputEvent;
};

/**
 * The **`IntersectionObserver`** interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's viewport.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver)
 */
interface IntersectionObserver {
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/root)
     */
    readonly root: Element | Document | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/rootMargin)
     */
    readonly rootMargin: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/thresholds)
     */
    readonly thresholds: ReadonlyArray<number>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/disconnect)
     */
    disconnect(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/observe)
     */
    observe(target: Element): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/takeRecords)
     */
    takeRecords(): IntersectionObserverEntry[];
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserver/unobserve)
     */
    unobserve(target: Element): void;
}

declare var IntersectionObserver: {
    prototype: IntersectionObserver;
    new(callback: IntersectionObserverCallback, options?: IntersectionObserverInit): IntersectionObserver;
};

/**
 * The **`IntersectionObserverEntry`** interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry)
 */
interface IntersectionObserverEntry {
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/boundingClientRect)
     */
    readonly boundingClientRect: DOMRectReadOnly;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRatio)
     */
    readonly intersectionRatio: number;
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/intersectionRect)
     */
    readonly intersectionRect: DOMRectReadOnly;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/isIntersecting)
     */
    readonly isIntersecting: boolean;
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/rootBounds)
     */
    readonly rootBounds: DOMRectReadOnly | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/target)
     */
    readonly target: Element;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/IntersectionObserverEntry/time)
     */
    readonly time: DOMHighResTimeStamp;
}

declare var IntersectionObserverEntry: {
    prototype: IntersectionObserverEntry;
    new(): IntersectionObserverEntry;
};

/**
 * The **`KHR_parallel_shader_compile`** extension is part of the WebGL API and enables a non-blocking poll operation, so that compile/link status availability (`COMPLETION_STATUS_KHR`) can be queried without potentially incurring stalls.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KHR_parallel_shader_compile)
 */
interface KHR_parallel_shader_compile {
    /** Type: GLenum */
    readonly COMPLETION_STATUS_KHR: 0x91B1;
}

/**
 * **`KeyboardEvent`** objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent)
 */
interface KeyboardEvent extends UIEvent {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/altKey)
     */
    readonly altKey: boolean;
    /**
     * Type: unsigned long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/charCode)
     */
    readonly charCode: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/code)
     */
    readonly code: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/ctrlKey)
     */
    readonly ctrlKey: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/isComposing)
     */
    readonly isComposing: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/key)
     */
    readonly key: string;
    /**
     * Type: unsigned long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/keyCode)
     */
    readonly keyCode: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/location)
     */
    readonly location: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/metaKey)
     */
    readonly metaKey: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/repeat)
     */
    readonly repeat: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/shiftKey)
     */
    readonly shiftKey: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/getModifierState)
     */
    getModifierState(keyArg: string): boolean;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyboardEvent/initKeyboardEvent)
     */
    initKeyboardEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window | null, keyArg?: string, locationArg?: number, ctrlKey?: boolean, altKey?: boolean, shiftKey?: boolean, metaKey?: boolean): void;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_STANDARD: 0x00;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_LEFT: 0x01;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_RIGHT: 0x02;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_NUMPAD: 0x03;
}

declare var KeyboardEvent: {
    prototype: KeyboardEvent;
    new(type: string, eventInitDict?: KeyboardEventInit): KeyboardEvent;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_STANDARD: 0x00;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_LEFT: 0x01;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_RIGHT: 0x02;
    /** Type: unsigned long */
    readonly DOM_KEY_LOCATION_NUMPAD: 0x03;
};

/**
 * The **`KeyframeEffect`** interface of the Web Animations API lets us create sets of animatable properties and values, called **keyframes.** These can then be played using the Animation.Animation constructor.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect)
 */
interface KeyframeEffect extends AnimationEffect {
    /**
     * Type: CompositeOperation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/composite)
     */
    composite: CompositeOperation;
    /**
     * Type: IterationCompositeOperation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/iterationComposite)
     */
    iterationComposite: IterationCompositeOperation;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/pseudoElement)
     */
    pseudoElement: string | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/target)
     */
    target: Element | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/getKeyframes)
     */
    getKeyframes(): ComputedKeyframe[];
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/KeyframeEffect/setKeyframes)
     */
    setKeyframes(keyframes: Keyframe[] | PropertyIndexedKeyframes | null): void;
}

declare var KeyframeEffect: {
    prototype: KeyframeEffect;
    new(target: Element | null, keyframes: Keyframe[] | PropertyIndexedKeyframes | null, options?: number | KeyframeEffectOptions): KeyframeEffect;
    new(source: KeyframeEffect): KeyframeEffect;
};

/**
 * The `LargestContentfulPaint` interface provides timing information about the largest image or text paint before user input on a web page.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint)
 */
interface LargestContentfulPaint extends PerformanceEntry {
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/element)
     */
    readonly element: Element | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/id)
     */
    readonly id: string;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/loadTime)
     */
    readonly loadTime: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/renderTime)
     */
    readonly renderTime: DOMHighResTimeStamp;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/size)
     */
    readonly size: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/url)
     */
    readonly url: string;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LargestContentfulPaint/toJSON)
     */
    toJSON(): any;
}

declare var LargestContentfulPaint: {
    prototype: LargestContentfulPaint;
    new(): LargestContentfulPaint;
};

interface LinkStyle {
    /**
     * Type: CSSStyleSheet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLLinkElement/sheet)
     */
    readonly sheet: CSSStyleSheet | null;
}

/**
 * The **`Location`** interface represents the location (URL) of the object it is linked to.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location)
 */
interface Location {
    /**
     * Type: DOMStringList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/ancestorOrigins)
     */
    readonly ancestorOrigins: DOMStringList;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hash)
     */
    hash: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/host)
     */
    host: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/hostname)
     */
    hostname: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/href)
     */
    href: string;
    toString(): string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/origin)
     */
    readonly origin: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/pathname)
     */
    pathname: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/port)
     */
    port: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/protocol)
     */
    protocol: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/search)
     */
    search: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/assign)
     */
    assign(url: string | URL): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/reload)
     */
    reload(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Location/replace)
     */
    replace(url: string | URL): void;
}

declare var Location: {
    prototype: Location;
    new(): Location;
};

/**
 * The **`Lock`** interface of the Web Locks API provides the name and mode of a lock.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock)
 */
interface Lock {
    /**
     * Type: LockMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/mode)
     */
    readonly mode: LockMode;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Lock/name)
     */
    readonly name: string;
}

declare var Lock: {
    prototype: Lock;
    new(): Lock;
};

/**
 * The **`LockManager`** interface of the Web Locks API provides methods for requesting a new Lock object and querying for an existing `Lock` object.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager)
 */
interface LockManager {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/query)
     */
    query(): Promise<LockManagerSnapshot>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/LockManager/request)
     */
    request<T>(name: string, callback: LockGrantedCallback<T>): Promise<T>;
    request<T>(name: string, options: LockOptions, callback: LockGrantedCallback<T>): Promise<T>;
}

declare var LockManager: {
    prototype: LockManager;
    new(): LockManager;
};

interface MIDIAccessEventMap {
    "statechange": MIDIConnectionEvent;
}

/**
 * The **`MIDIAccess`** interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess)
 */
interface MIDIAccess extends EventTarget {
    /**
     * Type: MIDIInputMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/inputs)
     */
    readonly inputs: MIDIInputMap;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/statechange_event)
     */
    onstatechange: ((this: MIDIAccess, ev: MIDIConnectionEvent) => any) | null;
    /**
     * Type: MIDIOutputMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/outputs)
     */
    readonly outputs: MIDIOutputMap;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIAccess/sysexEnabled)
     */
    readonly sysexEnabled: boolean;
    addEventListener<K extends keyof MIDIAccessEventMap>(type: K, listener: (this: MIDIAccess, ev: MIDIAccessEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MIDIAccessEventMap>(type: K, listener: (this: MIDIAccess, ev: MIDIAccessEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MIDIAccess: {
    prototype: MIDIAccess;
    new(): MIDIAccess;
};

/**
 * The **`MIDIConnectionEvent`** interface of the Web MIDI API is the event passed to the MIDIAccess.statechange_event event of the MIDIAccess interface and the MIDIPort.statechange_event event of the MIDIPort interface.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent)
 */
interface MIDIConnectionEvent extends Event {
    /**
     * Type: MIDIPort
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIConnectionEvent/port)
     */
    readonly port: MIDIPort | null;
}

declare var MIDIConnectionEvent: {
    prototype: MIDIConnectionEvent;
    new(type: string, eventInitDict?: MIDIConnectionEventInit): MIDIConnectionEvent;
};

interface MIDIInputEventMap extends MIDIPortEventMap {
    "midimessage": MIDIMessageEvent;
}

/**
 * The **`MIDIInput`** interface of the Web MIDI API receives messages from a MIDI input port.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput)
 */
interface MIDIInput extends MIDIPort {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInput/midimessage_event)
     */
    onmidimessage: ((this: MIDIInput, ev: MIDIMessageEvent) => any) | null;
    addEventListener<K extends keyof MIDIInputEventMap>(type: K, listener: (this: MIDIInput, ev: MIDIInputEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MIDIInputEventMap>(type: K, listener: (this: MIDIInput, ev: MIDIInputEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MIDIInput: {
    prototype: MIDIInput;
    new(): MIDIInput;
};

/**
 * The **`MIDIInputMap`** read-only interface of the Web MIDI API provides the set of MIDI input ports that are currently available.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIInputMap)
 */
interface MIDIInputMap {
    forEach(callbackfn: (value: MIDIInput, key: string, parent: MIDIInputMap) => void, thisArg?: any): void;
}

declare var MIDIInputMap: {
    prototype: MIDIInputMap;
    new(): MIDIInputMap;
};

/**
 * The **`MIDIMessageEvent`** interface of the Web MIDI API represents the event passed to the MIDIInput.midimessage_event event of the MIDIInput interface.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent)
 */
interface MIDIMessageEvent extends Event {
    /**
     * Type: Uint8Array
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIMessageEvent/data)
     */
    readonly data: Uint8Array<ArrayBuffer> | null;
}

declare var MIDIMessageEvent: {
    prototype: MIDIMessageEvent;
    new(type: string, eventInitDict?: MIDIMessageEventInit): MIDIMessageEvent;
};

/**
 * The **`MIDIOutput`** interface of the Web MIDI API provides methods to add messages to the queue of an output device, and to clear the queue of messages.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput)
 */
interface MIDIOutput extends MIDIPort {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutput/send)
     */
    send(data: number[], timestamp?: DOMHighResTimeStamp): void;
    addEventListener<K extends keyof MIDIPortEventMap>(type: K, listener: (this: MIDIOutput, ev: MIDIPortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MIDIPortEventMap>(type: K, listener: (this: MIDIOutput, ev: MIDIPortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MIDIOutput: {
    prototype: MIDIOutput;
    new(): MIDIOutput;
};

/**
 * The **`MIDIOutputMap`** read-only interface of the Web MIDI API provides the set of MIDI output ports that are currently available.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIOutputMap)
 */
interface MIDIOutputMap {
    forEach(callbackfn: (value: MIDIOutput, key: string, parent: MIDIOutputMap) => void, thisArg?: any): void;
}

declare var MIDIOutputMap: {
    prototype: MIDIOutputMap;
    new(): MIDIOutputMap;
};

interface MIDIPortEventMap {
    "statechange": MIDIConnectionEvent;
}

/**
 * The **`MIDIPort`** interface of the Web MIDI API represents a MIDI input or output port.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort)
 */
interface MIDIPort extends EventTarget {
    /**
     * Type: MIDIPortConnectionState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/connection)
     */
    readonly connection: MIDIPortConnectionState;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/id)
     */
    readonly id: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/manufacturer)
     */
    readonly manufacturer: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/name)
     */
    readonly name: string | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/statechange_event)
     */
    onstatechange: ((this: MIDIPort, ev: MIDIConnectionEvent) => any) | null;
    /**
     * Type: MIDIPortDeviceState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/state)
     */
    readonly state: MIDIPortDeviceState;
    /**
     * Type: MIDIPortType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/type)
     */
    readonly type: MIDIPortType;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/version)
     */
    readonly version: string | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/close)
     */
    close(): Promise<MIDIPort>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MIDIPort/open)
     */
    open(): Promise<MIDIPort>;
    addEventListener<K extends keyof MIDIPortEventMap>(type: K, listener: (this: MIDIPort, ev: MIDIPortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MIDIPortEventMap>(type: K, listener: (this: MIDIPort, ev: MIDIPortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MIDIPort: {
    prototype: MIDIPort;
    new(): MIDIPort;
};

interface MathMLElementEventMap extends ElementEventMap, GlobalEventHandlersEventMap {
}

/**
 * The **`MathMLElement`** interface represents any MathML element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MathMLElement)
 */
interface MathMLElement extends Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement {
    addEventListener<K extends keyof MathMLElementEventMap>(type: K, listener: (this: MathMLElement, ev: MathMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MathMLElementEventMap>(type: K, listener: (this: MathMLElement, ev: MathMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MathMLElement: {
    prototype: MathMLElement;
    new(): MathMLElement;
};

/**
 * The **`MediaCapabilities`** interface of the Media Capabilities API provides information about the decoding abilities of the device, system and browser.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities)
 */
interface MediaCapabilities {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/decodingInfo)
     */
    decodingInfo(configuration: MediaDecodingConfiguration): Promise<MediaCapabilitiesDecodingInfo>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaCapabilities/encodingInfo)
     */
    encodingInfo(configuration: MediaEncodingConfiguration): Promise<MediaCapabilitiesEncodingInfo>;
}

declare var MediaCapabilities: {
    prototype: MediaCapabilities;
    new(): MediaCapabilities;
};

/**
 * The **`MediaDeviceInfo`** interface of the Media Capture and Streams API contains information that describes a single media input or output device.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo)
 */
interface MediaDeviceInfo {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/deviceId)
     */
    readonly deviceId: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/groupId)
     */
    readonly groupId: string;
    /**
     * Type: MediaDeviceKind
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/kind)
     */
    readonly kind: MediaDeviceKind;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/label)
     */
    readonly label: string;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDeviceInfo/toJSON)
     */
    toJSON(): any;
}

declare var MediaDeviceInfo: {
    prototype: MediaDeviceInfo;
    new(): MediaDeviceInfo;
};

interface MediaDevicesEventMap {
    "devicechange": Event;
}

/**
 * The **`MediaDevices`** interface of the Media Capture and Streams API provides access to connected media input devices like cameras and microphones, as well as screen sharing.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices)
 */
interface MediaDevices extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/devicechange_event)
     */
    ondevicechange: ((this: MediaDevices, ev: Event) => any) | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/enumerateDevices)
     */
    enumerateDevices(): Promise<MediaDeviceInfo[]>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getDisplayMedia)
     */
    getDisplayMedia(options?: DisplayMediaStreamOptions): Promise<MediaStream>;
    /**
     * Type: MediaTrackSupportedConstraints
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getSupportedConstraints)
     */
    getSupportedConstraints(): MediaTrackSupportedConstraints;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaDevices/getUserMedia)
     */
    getUserMedia(constraints?: MediaStreamConstraints): Promise<MediaStream>;
    addEventListener<K extends keyof MediaDevicesEventMap>(type: K, listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaDevicesEventMap>(type: K, listener: (this: MediaDevices, ev: MediaDevicesEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaDevices: {
    prototype: MediaDevices;
    new(): MediaDevices;
};

/**
 * The `MediaElementAudioSourceNode` interface represents an audio source consisting of an HTML audio or video element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode)
 */
interface MediaElementAudioSourceNode extends AudioNode {
    /**
     * Type: HTMLMediaElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaElementAudioSourceNode/mediaElement)
     */
    readonly mediaElement: HTMLMediaElement;
}

declare var MediaElementAudioSourceNode: {
    prototype: MediaElementAudioSourceNode;
    new(context: AudioContext, options: MediaElementAudioSourceOptions): MediaElementAudioSourceNode;
};

/**
 * The **`MediaEncryptedEvent`** interface of the Encrypted Media Extensions API contains the information associated with an HTMLMediaElement/encrypted_event event sent to a HTMLMediaElement when some initialization data is encountered in the media.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent)
 */
interface MediaEncryptedEvent extends Event {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initData)
     */
    readonly initData: ArrayBuffer | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaEncryptedEvent/initDataType)
     */
    readonly initDataType: string;
}

declare var MediaEncryptedEvent: {
    prototype: MediaEncryptedEvent;
    new(type: string, eventInitDict?: MediaEncryptedEventInit): MediaEncryptedEvent;
};

/**
 * The **`MediaError`** interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as audio or video.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError)
 */
interface MediaError {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/code)
     */
    readonly code: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaError/message)
     */
    readonly message: string;
    /** Type: unsigned short */
    readonly MEDIA_ERR_ABORTED: 1;
    /** Type: unsigned short */
    readonly MEDIA_ERR_NETWORK: 2;
    /** Type: unsigned short */
    readonly MEDIA_ERR_DECODE: 3;
    /** Type: unsigned short */
    readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4;
}

declare var MediaError: {
    prototype: MediaError;
    new(): MediaError;
    /** Type: unsigned short */
    readonly MEDIA_ERR_ABORTED: 1;
    /** Type: unsigned short */
    readonly MEDIA_ERR_NETWORK: 2;
    /** Type: unsigned short */
    readonly MEDIA_ERR_DECODE: 3;
    /** Type: unsigned short */
    readonly MEDIA_ERR_SRC_NOT_SUPPORTED: 4;
};

/**
 * The **`MediaKeyMessageEvent`** interface of the Encrypted Media Extensions API contains the content and related data when the content decryption module generates a message for the session.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent)
 */
interface MediaKeyMessageEvent extends Event {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/message)
     */
    readonly message: ArrayBuffer;
    /**
     * Type: MediaKeyMessageType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyMessageEvent/messageType)
     */
    readonly messageType: MediaKeyMessageType;
}

declare var MediaKeyMessageEvent: {
    prototype: MediaKeyMessageEvent;
    new(type: string, eventInitDict: MediaKeyMessageEventInit): MediaKeyMessageEvent;
};

interface MediaKeySessionEventMap {
    "keystatuseschange": Event;
    "message": MediaKeyMessageEvent;
}

/**
 * The **`MediaKeySession`** interface of the Encrypted Media Extensions API represents a context for message exchange with a content decryption module (CDM).
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession)
 */
interface MediaKeySession extends EventTarget {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/closed)
     */
    readonly closed: Promise<MediaKeySessionClosedReason>;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/expiration)
     */
    readonly expiration: number;
    /**
     * Type: MediaKeyStatusMap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keyStatuses)
     */
    readonly keyStatuses: MediaKeyStatusMap;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/keystatuseschange_event)
     */
    onkeystatuseschange: ((this: MediaKeySession, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/message_event)
     */
    onmessage: ((this: MediaKeySession, ev: MediaKeyMessageEvent) => any) | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/sessionId)
     */
    readonly sessionId: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/close)
     */
    close(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/generateRequest)
     */
    generateRequest(initDataType: string, initData: BufferSource): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/load)
     */
    load(sessionId: string): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/remove)
     */
    remove(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySession/update)
     */
    update(response: BufferSource): Promise<void>;
    addEventListener<K extends keyof MediaKeySessionEventMap>(type: K, listener: (this: MediaKeySession, ev: MediaKeySessionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaKeySessionEventMap>(type: K, listener: (this: MediaKeySession, ev: MediaKeySessionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaKeySession: {
    prototype: MediaKeySession;
    new(): MediaKeySession;
};

/**
 * The **`MediaKeyStatusMap`** interface of the Encrypted Media Extensions API is a read-only map of media key statuses by key IDs.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap)
 */
interface MediaKeyStatusMap {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/size)
     */
    readonly size: number;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/get)
     */
    get(keyId: BufferSource): MediaKeyStatus | undefined;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeyStatusMap/has)
     */
    has(keyId: BufferSource): boolean;
    forEach(callbackfn: (value: MediaKeyStatus, key: BufferSource, parent: MediaKeyStatusMap) => void, thisArg?: any): void;
}

declare var MediaKeyStatusMap: {
    prototype: MediaKeyStatusMap;
    new(): MediaKeyStatusMap;
};

/**
 * The **`MediaKeySystemAccess`** interface of the Encrypted Media Extensions API provides access to a Key System for decryption and/or a content protection provider.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess)
 */
interface MediaKeySystemAccess {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/keySystem)
     */
    readonly keySystem: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/createMediaKeys)
     */
    createMediaKeys(): Promise<MediaKeys>;
    /**
     * Type: MediaKeySystemConfiguration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeySystemAccess/getConfiguration)
     */
    getConfiguration(): MediaKeySystemConfiguration;
}

declare var MediaKeySystemAccess: {
    prototype: MediaKeySystemAccess;
    new(): MediaKeySystemAccess;
};

/**
 * The **`MediaKeys`** interface of Encrypted Media Extensions API represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys)
 */
interface MediaKeys {
    /**
     * Type: MediaKeySession
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/createSession)
     */
    createSession(sessionType?: MediaKeySessionType): MediaKeySession;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/getStatusForPolicy)
     */
    getStatusForPolicy(policy?: MediaKeysPolicy): Promise<MediaKeyStatus>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaKeys/setServerCertificate)
     */
    setServerCertificate(serverCertificate: BufferSource): Promise<boolean>;
}

declare var MediaKeys: {
    prototype: MediaKeys;
    new(): MediaKeys;
};

/**
 * The **`MediaList`** interface represents the media queries of a stylesheet, e.g., those set using a link element's `media` attribute.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList)
 */
interface MediaList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/length)
     */
    readonly length: number;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/mediaText)
     */
    mediaText: string;
    toString(): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/appendMedium)
     */
    appendMedium(medium: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/deleteMedium)
     */
    deleteMedium(medium: string): void;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaList/item)
     */
    item(index: number): string | null;
    [index: number]: string;
}

declare var MediaList: {
    prototype: MediaList;
    new(): MediaList;
};

/**
 * The **`MediaMetadata`** interface of the Media Session API allows a web page to provide rich media metadata for display in a platform UI.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata)
 */
interface MediaMetadata {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/album)
     */
    album: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artist)
     */
    artist: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/artwork)
     */
    artwork: ReadonlyArray<MediaImage>;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaMetadata/title)
     */
    title: string;
}

declare var MediaMetadata: {
    prototype: MediaMetadata;
    new(init?: MediaMetadataInit): MediaMetadata;
};

interface MediaQueryListEventMap {
    "change": MediaQueryListEvent;
}

/**
 * A **`MediaQueryList`** object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList)
 */
interface MediaQueryList extends EventTarget {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/matches)
     */
    readonly matches: boolean;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/media)
     */
    readonly media: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/change_event)
     */
    onchange: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/addListener)
     */
    addListener(callback: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null): void;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryList/removeListener)
     */
    removeListener(callback: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | null): void;
    addEventListener<K extends keyof MediaQueryListEventMap>(type: K, listener: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaQueryListEventMap>(type: K, listener: (this: MediaQueryList, ev: MediaQueryListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaQueryList: {
    prototype: MediaQueryList;
    new(): MediaQueryList;
};

/**
 * The `MediaQueryListEvent` object stores information on the changes that have happened to a MediaQueryList object — instances are available as the event object on a function referenced by a MediaQueryList.change_event event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent)
 */
interface MediaQueryListEvent extends Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/matches)
     */
    readonly matches: boolean;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaQueryListEvent/media)
     */
    readonly media: string;
}

declare var MediaQueryListEvent: {
    prototype: MediaQueryListEvent;
    new(type: string, eventInitDict?: MediaQueryListEventInit): MediaQueryListEvent;
};

interface MediaRecorderEventMap {
    "dataavailable": BlobEvent;
    "error": ErrorEvent;
    "pause": Event;
    "resume": Event;
    "start": Event;
    "stop": Event;
}

/**
 * The **`MediaRecorder`** interface of the MediaStream Recording API provides functionality to easily record media.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder)
 */
interface MediaRecorder extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/audioBitsPerSecond)
     */
    readonly audioBitsPerSecond: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/mimeType)
     */
    readonly mimeType: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/dataavailable_event)
     */
    ondataavailable: ((this: MediaRecorder, ev: BlobEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/error_event)
     */
    onerror: ((this: MediaRecorder, ev: ErrorEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause_event)
     */
    onpause: ((this: MediaRecorder, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume_event)
     */
    onresume: ((this: MediaRecorder, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start_event)
     */
    onstart: ((this: MediaRecorder, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop_event)
     */
    onstop: ((this: MediaRecorder, ev: Event) => any) | null;
    /**
     * Type: RecordingState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/state)
     */
    readonly state: RecordingState;
    /**
     * Type: MediaStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stream)
     */
    readonly stream: MediaStream;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/videoBitsPerSecond)
     */
    readonly videoBitsPerSecond: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/pause)
     */
    pause(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/requestData)
     */
    requestData(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/resume)
     */
    resume(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/start)
     */
    start(timeslice?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/stop)
     */
    stop(): void;
    addEventListener<K extends keyof MediaRecorderEventMap>(type: K, listener: (this: MediaRecorder, ev: MediaRecorderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaRecorderEventMap>(type: K, listener: (this: MediaRecorder, ev: MediaRecorderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaRecorder: {
    prototype: MediaRecorder;
    new(stream: MediaStream, options?: MediaRecorderOptions): MediaRecorder;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaRecorder/isTypeSupported_static)
     */
    isTypeSupported(type: string): boolean;
};

/**
 * The **`MediaSession`** interface of the Media Session API allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession)
 */
interface MediaSession {
    /**
     * Type: MediaMetadata
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/metadata)
     */
    metadata: MediaMetadata | null;
    /**
     * Type: MediaSessionPlaybackState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/playbackState)
     */
    playbackState: MediaSessionPlaybackState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setActionHandler)
     */
    setActionHandler(action: MediaSessionAction, handler: MediaSessionActionHandler | null): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setCameraActive)
     */
    setCameraActive(active: boolean): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setMicrophoneActive)
     */
    setMicrophoneActive(active: boolean): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSession/setPositionState)
     */
    setPositionState(state?: MediaPositionState): void;
}

declare var MediaSession: {
    prototype: MediaSession;
    new(): MediaSession;
};

interface MediaSourceEventMap {
    "sourceclose": Event;
    "sourceended": Event;
    "sourceopen": Event;
}

/**
 * The **`MediaSource`** interface of the Media Source Extensions API represents a source of media data for an HTMLMediaElement object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource)
 */
interface MediaSource extends EventTarget {
    /**
     * Type: SourceBufferList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/activeSourceBuffers)
     */
    readonly activeSourceBuffers: SourceBufferList;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/duration)
     */
    duration: number;
    /** Type: EventHandler */
    onsourceclose: ((this: MediaSource, ev: Event) => any) | null;
    /** Type: EventHandler */
    onsourceended: ((this: MediaSource, ev: Event) => any) | null;
    /** Type: EventHandler */
    onsourceopen: ((this: MediaSource, ev: Event) => any) | null;
    /**
     * Type: ReadyState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/readyState)
     */
    readonly readyState: ReadyState;
    /**
     * Type: SourceBufferList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/sourceBuffers)
     */
    readonly sourceBuffers: SourceBufferList;
    /**
     * Type: SourceBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/addSourceBuffer)
     */
    addSourceBuffer(type: string): SourceBuffer;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/clearLiveSeekableRange)
     */
    clearLiveSeekableRange(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/endOfStream)
     */
    endOfStream(error?: EndOfStreamError): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/removeSourceBuffer)
     */
    removeSourceBuffer(sourceBuffer: SourceBuffer): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/setLiveSeekableRange)
     */
    setLiveSeekableRange(start: number, end: number): void;
    addEventListener<K extends keyof MediaSourceEventMap>(type: K, listener: (this: MediaSource, ev: MediaSourceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaSourceEventMap>(type: K, listener: (this: MediaSource, ev: MediaSourceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaSource: {
    prototype: MediaSource;
    new(): MediaSource;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/canConstructInDedicatedWorker_static)
     */
    readonly canConstructInDedicatedWorker: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSource/isTypeSupported_static)
     */
    isTypeSupported(type: string): boolean;
};

/**
 * The **`MediaSourceHandle`** interface of the Media Source Extensions API is a proxy for a MediaSource that can be transferred from a dedicated worker back to the main thread and attached to a media element via its HTMLMediaElement.srcObject property.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaSourceHandle)
 */
interface MediaSourceHandle {
}

declare var MediaSourceHandle: {
    prototype: MediaSourceHandle;
    new(): MediaSourceHandle;
};

interface MediaStreamEventMap {
    "addtrack": MediaStreamTrackEvent;
    "removetrack": MediaStreamTrackEvent;
}

/**
 * The **`MediaStream`** interface of the Media Capture and Streams API represents a stream of media content.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream)
 */
interface MediaStream extends EventTarget {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/active)
     */
    readonly active: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/id)
     */
    readonly id: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addtrack_event)
     */
    onaddtrack: ((this: MediaStream, ev: MediaStreamTrackEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removetrack_event)
     */
    onremovetrack: ((this: MediaStream, ev: MediaStreamTrackEvent) => any) | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/addTrack)
     */
    addTrack(track: MediaStreamTrack): void;
    /**
     * Type: MediaStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/clone)
     */
    clone(): MediaStream;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getAudioTracks)
     */
    getAudioTracks(): MediaStreamTrack[];
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getTrackById)
     */
    getTrackById(trackId: string): MediaStreamTrack | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getTracks)
     */
    getTracks(): MediaStreamTrack[];
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/getVideoTracks)
     */
    getVideoTracks(): MediaStreamTrack[];
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStream/removeTrack)
     */
    removeTrack(track: MediaStreamTrack): void;
    addEventListener<K extends keyof MediaStreamEventMap>(type: K, listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaStreamEventMap>(type: K, listener: (this: MediaStream, ev: MediaStreamEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaStream: {
    prototype: MediaStream;
    new(): MediaStream;
    new(stream: MediaStream): MediaStream;
    new(tracks: MediaStreamTrack[]): MediaStream;
};

/**
 * The `MediaStreamAudioDestinationNode` interface represents an audio destination consisting of a WebRTC MediaStream with a single `AudioMediaStreamTrack`, which can be used in a similar way to a `MediaStream` obtained from MediaDevices.getUserMedia.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode)
 */
interface MediaStreamAudioDestinationNode extends AudioNode {
    /**
     * Type: MediaStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioDestinationNode/stream)
     */
    readonly stream: MediaStream;
}

declare var MediaStreamAudioDestinationNode: {
    prototype: MediaStreamAudioDestinationNode;
    new(context: AudioContext, options?: AudioNodeOptions): MediaStreamAudioDestinationNode;
};

/**
 * The **`MediaStreamAudioSourceNode`** interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode)
 */
interface MediaStreamAudioSourceNode extends AudioNode {
    /**
     * Type: MediaStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamAudioSourceNode/mediaStream)
     */
    readonly mediaStream: MediaStream;
}

declare var MediaStreamAudioSourceNode: {
    prototype: MediaStreamAudioSourceNode;
    new(context: AudioContext, options: MediaStreamAudioSourceOptions): MediaStreamAudioSourceNode;
};

interface MediaStreamTrackEventMap {
    "ended": Event;
    "mute": Event;
    "unmute": Event;
}

/**
 * The **`MediaStreamTrack`** interface of the Media Capture and Streams API represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack)
 */
interface MediaStreamTrack extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/contentHint)
     */
    contentHint: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/enabled)
     */
    enabled: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/id)
     */
    readonly id: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/kind)
     */
    readonly kind: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/label)
     */
    readonly label: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/muted)
     */
    readonly muted: boolean;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/ended_event)
     */
    onended: ((this: MediaStreamTrack, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/mute_event)
     */
    onmute: ((this: MediaStreamTrack, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/unmute_event)
     */
    onunmute: ((this: MediaStreamTrack, ev: Event) => any) | null;
    /**
     * Type: MediaStreamTrackState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/readyState)
     */
    readonly readyState: MediaStreamTrackState;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/applyConstraints)
     */
    applyConstraints(constraints?: MediaTrackConstraints): Promise<void>;
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/clone)
     */
    clone(): MediaStreamTrack;
    /**
     * Type: MediaTrackCapabilities
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getCapabilities)
     */
    getCapabilities(): MediaTrackCapabilities;
    /**
     * Type: MediaTrackConstraints
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getConstraints)
     */
    getConstraints(): MediaTrackConstraints;
    /**
     * Type: MediaTrackSettings
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/getSettings)
     */
    getSettings(): MediaTrackSettings;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrack/stop)
     */
    stop(): void;
    addEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MediaStreamTrackEventMap>(type: K, listener: (this: MediaStreamTrack, ev: MediaStreamTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MediaStreamTrack: {
    prototype: MediaStreamTrack;
    new(): MediaStreamTrack;
};

/**
 * The **`MediaStreamTrackEvent`** interface of the Media Capture and Streams API represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Capture and Streams API methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent)
 */
interface MediaStreamTrackEvent extends Event {
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MediaStreamTrackEvent/track)
     */
    readonly track: MediaStreamTrack;
}

declare var MediaStreamTrackEvent: {
    prototype: MediaStreamTrackEvent;
    new(type: string, eventInitDict: MediaStreamTrackEventInit): MediaStreamTrackEvent;
};

/**
 * The **`MessageChannel`** interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel)
 */
interface MessageChannel {
    /**
     * Type: MessagePort
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port1)
     */
    readonly port1: MessagePort;
    /**
     * Type: MessagePort
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageChannel/port2)
     */
    readonly port2: MessagePort;
}

declare var MessageChannel: {
    prototype: MessageChannel;
    new(): MessageChannel;
};

/**
 * The **`MessageEvent`** interface represents a message received by a target object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent)
 */
interface MessageEvent<T = any> extends Event {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/data)
     */
    readonly data: T;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/lastEventId)
     */
    readonly lastEventId: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/origin)
     */
    readonly origin: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/ports)
     */
    readonly ports: ReadonlyArray<MessagePort>;
    /**
     * Type: MessageEventSource
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessageEvent/source)
     */
    readonly source: MessageEventSource | null;
    /**
     * Type: undefined
     * @deprecated
     */
    initMessageEvent(type: string, bubbles?: boolean, cancelable?: boolean, data?: any, origin?: string, lastEventId?: string, source?: MessageEventSource | null, ports?: MessagePort[]): void;
}

declare var MessageEvent: {
    prototype: MessageEvent;
    new<T>(type: string, eventInitDict?: MessageEventInit<T>): MessageEvent<T>;
};

interface MessageEventTargetEventMap {
    "message": MessageEvent;
    "messageerror": MessageEvent;
}

interface MessageEventTarget<T> {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/message_event)
     */
    onmessage: ((this: T, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/messageerror_event)
     */
    onmessageerror: ((this: T, ev: MessageEvent) => any) | null;
    addEventListener<K extends keyof MessageEventTargetEventMap>(type: K, listener: (this: T, ev: MessageEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MessageEventTargetEventMap>(type: K, listener: (this: T, ev: MessageEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface MessagePortEventMap extends MessageEventTargetEventMap {
    "message": MessageEvent;
    "messageerror": MessageEvent;
}

/**
 * The **`MessagePort`** interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort)
 */
interface MessagePort extends EventTarget, MessageEventTarget<MessagePort> {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/postMessage)
     */
    postMessage(message: any, transfer: Transferable[]): void;
    postMessage(message: any, options?: StructuredSerializeOptions): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MessagePort/start)
     */
    start(): void;
    addEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof MessagePortEventMap>(type: K, listener: (this: MessagePort, ev: MessagePortEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var MessagePort: {
    prototype: MessagePort;
    new(): MessagePort;
};

/**
 * The **`MimeType`** interface provides contains information about a MIME type associated with a particular plugin.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeType)
 */
interface MimeType {
    /**
     * Type: DOMString
     * @deprecated
     */
    readonly description: string;
    /**
     * Type: Plugin
     * @deprecated
     */
    readonly enabledPlugin: Plugin;
    /**
     * Type: DOMString
     * @deprecated
     */
    readonly suffixes: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    readonly type: string;
}

/** @deprecated */
declare var MimeType: {
    prototype: MimeType;
    new(): MimeType;
};

/**
 * The **`MimeTypeArray`** interface returns an array of MimeType instances, each of which contains information about a supported browser plugins.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MimeTypeArray)
 */
interface MimeTypeArray {
    /**
     * Type: unsigned long
     * @deprecated
     */
    readonly length: number;
    /**
     * Type: MimeType
     * @deprecated
     */
    item(index: number): MimeType | null;
    /**
     * Type: MimeType
     * @deprecated
     */
    namedItem(name: string): MimeType | null;
    [index: number]: MimeType;
}

/** @deprecated */
declare var MimeTypeArray: {
    prototype: MimeTypeArray;
    new(): MimeTypeArray;
};

/**
 * The **`MouseEvent`** interface represents events that occur due to the user interacting with a pointing device (such as a mouse).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent)
 */
interface MouseEvent extends UIEvent {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/altKey)
     */
    readonly altKey: boolean;
    /**
     * Type: short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/button)
     */
    readonly button: number;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/buttons)
     */
    readonly buttons: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientX)
     */
    readonly clientX: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/clientY)
     */
    readonly clientY: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/ctrlKey)
     */
    readonly ctrlKey: boolean;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerX)
     */
    readonly layerX: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/layerY)
     */
    readonly layerY: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/metaKey)
     */
    readonly metaKey: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementX)
     */
    readonly movementX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/movementY)
     */
    readonly movementY: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetX)
     */
    readonly offsetX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/offsetY)
     */
    readonly offsetY: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageX)
     */
    readonly pageX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/pageY)
     */
    readonly pageY: number;
    /**
     * Type: EventTarget
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/relatedTarget)
     */
    readonly relatedTarget: EventTarget | null;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenX)
     */
    readonly screenX: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/screenY)
     */
    readonly screenY: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/shiftKey)
     */
    readonly shiftKey: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/x)
     */
    readonly x: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/y)
     */
    readonly y: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/getModifierState)
     */
    getModifierState(keyArg: string): boolean;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MouseEvent/initMouseEvent)
     */
    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget | null): void;
}

declare var MouseEvent: {
    prototype: MouseEvent;
    new(type: string, eventInitDict?: MouseEventInit): MouseEvent;
};

/**
 * The **`MutationObserver`** interface provides the ability to watch for changes being made to the DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver)
 */
interface MutationObserver {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/disconnect)
     */
    disconnect(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/observe)
     */
    observe(target: Node, options?: MutationObserverInit): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationObserver/takeRecords)
     */
    takeRecords(): MutationRecord[];
}

declare var MutationObserver: {
    prototype: MutationObserver;
    new(callback: MutationCallback): MutationObserver;
};

/**
 * The **`MutationRecord`** is a read-only interface that represents an individual DOM mutation observed by a MutationObserver.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord)
 */
interface MutationRecord {
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/addedNodes)
     */
    readonly addedNodes: NodeList;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeName)
     */
    readonly attributeName: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/attributeNamespace)
     */
    readonly attributeNamespace: string | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/nextSibling)
     */
    readonly nextSibling: Node | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/oldValue)
     */
    readonly oldValue: string | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/previousSibling)
     */
    readonly previousSibling: Node | null;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/removedNodes)
     */
    readonly removedNodes: NodeList;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/target)
     */
    readonly target: Node;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/MutationRecord/type)
     */
    readonly type: MutationRecordType;
}

declare var MutationRecord: {
    prototype: MutationRecord;
    new(): MutationRecord;
};

/**
 * The **`NamedNodeMap`** interface represents a collection of Attr objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap)
 */
interface NamedNodeMap {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/length)
     */
    readonly length: number;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItem)
     */
    getNamedItem(qualifiedName: string): Attr | null;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/getNamedItemNS)
     */
    getNamedItemNS(namespace: string | null, localName: string): Attr | null;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/item)
     */
    item(index: number): Attr | null;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItem)
     */
    removeNamedItem(qualifiedName: string): Attr;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/removeNamedItemNS)
     */
    removeNamedItemNS(namespace: string | null, localName: string): Attr;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItem)
     */
    setNamedItem(attr: Attr): Attr | null;
    /**
     * Type: Attr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NamedNodeMap/setNamedItemNS)
     */
    setNamedItemNS(attr: Attr): Attr | null;
    [index: number]: Attr;
}

declare var NamedNodeMap: {
    prototype: NamedNodeMap;
    new(): NamedNodeMap;
};

/**
 * The **`NavigationActivation`** interface of the Navigation API represents a recent cross-document navigation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation)
 */
interface NavigationActivation {
    /**
     * Type: NavigationHistoryEntry
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/entry)
     */
    readonly entry: NavigationHistoryEntry;
    /**
     * Type: NavigationHistoryEntry
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/from)
     */
    readonly from: NavigationHistoryEntry | null;
    /**
     * Type: NavigationType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationActivation/navigationType)
     */
    readonly navigationType: NavigationType;
}

declare var NavigationActivation: {
    prototype: NavigationActivation;
    new(): NavigationActivation;
};

interface NavigationHistoryEntryEventMap {
    "dispose": Event;
}

/**
 * The **`NavigationHistoryEntry`** interface of the Navigation API represents a single navigation history entry.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry)
 */
interface NavigationHistoryEntry extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/id)
     */
    readonly id: string;
    /**
     * Type: long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/index)
     */
    readonly index: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/key)
     */
    readonly key: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/dispose_event)
     */
    ondispose: ((this: NavigationHistoryEntry, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/sameDocument)
     */
    readonly sameDocument: boolean;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/url)
     */
    readonly url: string | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationHistoryEntry/getState)
     */
    getState(): any;
    addEventListener<K extends keyof NavigationHistoryEntryEventMap>(type: K, listener: (this: NavigationHistoryEntry, ev: NavigationHistoryEntryEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof NavigationHistoryEntryEventMap>(type: K, listener: (this: NavigationHistoryEntry, ev: NavigationHistoryEntryEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var NavigationHistoryEntry: {
    prototype: NavigationHistoryEntry;
    new(): NavigationHistoryEntry;
};

/**
 * The **`NavigationPreloadManager`** interface of the Service Worker API provides methods for managing the preloading of resources in parallel with service worker bootup.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager)
 */
interface NavigationPreloadManager {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/disable)
     */
    disable(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/enable)
     */
    enable(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/getState)
     */
    getState(): Promise<NavigationPreloadState>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigationPreloadManager/setHeaderValue)
     */
    setHeaderValue(value: string): Promise<void>;
}

declare var NavigationPreloadManager: {
    prototype: NavigationPreloadManager;
    new(): NavigationPreloadManager;
};

/**
 * The **`Navigator`** interface represents the state and the identity of the user agent.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator)
 */
interface Navigator extends NavigatorAutomationInformation, NavigatorBadge, NavigatorConcurrentHardware, NavigatorContentUtils, NavigatorCookies, NavigatorID, NavigatorLanguage, NavigatorLocks, NavigatorOnLine, NavigatorPlugins, NavigatorStorage {
    /**
     * Type: Clipboard
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clipboard)
     */
    readonly clipboard: Clipboard;
    /**
     * Type: CredentialsContainer
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/credentials)
     */
    readonly credentials: CredentialsContainer;
    readonly doNotTrack: string | null;
    /**
     * Type: Geolocation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/geolocation)
     */
    readonly geolocation: Geolocation;
    /**
     * Type: NavigatorLogin
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/login)
     */
    readonly login: NavigatorLogin;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/maxTouchPoints)
     */
    readonly maxTouchPoints: number;
    /**
     * Type: MediaCapabilities
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaCapabilities)
     */
    readonly mediaCapabilities: MediaCapabilities;
    /**
     * Type: MediaDevices
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaDevices)
     */
    readonly mediaDevices: MediaDevices;
    /**
     * Type: MediaSession
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mediaSession)
     */
    readonly mediaSession: MediaSession;
    /**
     * Type: Permissions
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/permissions)
     */
    readonly permissions: Permissions;
    /**
     * Type: ServiceWorkerContainer
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/serviceWorker)
     */
    readonly serviceWorker: ServiceWorkerContainer;
    /**
     * Type: UserActivation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userActivation)
     */
    readonly userActivation: UserActivation;
    /**
     * Type: WakeLock
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/wakeLock)
     */
    readonly wakeLock: WakeLock;
    /**
     * Type: boolean
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/canShare)
     */
    canShare(data?: ShareData): boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/getGamepads)
     */
    getGamepads(): (Gamepad | null)[];
    /**
     * Type: [object Object]
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/requestMIDIAccess)
     */
    requestMIDIAccess(options?: MIDIOptions): Promise<MIDIAccess>;
    /**
     * Type: [object Object]
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/requestMediaKeySystemAccess)
     */
    requestMediaKeySystemAccess(keySystem: string, supportedConfigurations: MediaKeySystemConfiguration[]): Promise<MediaKeySystemAccess>;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/sendBeacon)
     */
    sendBeacon(url: string | URL, data?: BodyInit | null): boolean;
    /**
     * Type: [object Object]
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/share)
     */
    share(data?: ShareData): Promise<void>;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vibrate)
     */
    vibrate(pattern: VibratePattern): boolean;
}

declare var Navigator: {
    prototype: Navigator;
    new(): Navigator;
};

interface NavigatorAutomationInformation {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/webdriver)
     */
    readonly webdriver: boolean;
}

/** Available only in secure contexts. */
interface NavigatorBadge {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/clearAppBadge)
     */
    clearAppBadge(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/setAppBadge)
     */
    setAppBadge(contents?: number): Promise<void>;
}

interface NavigatorConcurrentHardware {
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/hardwareConcurrency)
     */
    readonly hardwareConcurrency: number;
}

interface NavigatorContentUtils {
    /**
     * Type: undefined
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/registerProtocolHandler)
     */
    registerProtocolHandler(scheme: string, url: string | URL): void;
}

interface NavigatorCookies {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/cookieEnabled)
     */
    readonly cookieEnabled: boolean;
}

interface NavigatorID {
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appCodeName)
     */
    readonly appCodeName: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appName)
     */
    readonly appName: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/appVersion)
     */
    readonly appVersion: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/platform)
     */
    readonly platform: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/product)
     */
    readonly product: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/productSub)
     */
    readonly productSub: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/userAgent)
     */
    readonly userAgent: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendor)
     */
    readonly vendor: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/vendorSub)
     */
    readonly vendorSub: string;
}

interface NavigatorLanguage {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/language)
     */
    readonly language: string;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/languages)
     */
    readonly languages: ReadonlyArray<string>;
}

/** Available only in secure contexts. */
interface NavigatorLocks {
    /**
     * Type: LockManager
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/locks)
     */
    readonly locks: LockManager;
}

/**
 * The **`NavigatorLogin`** interface of the Federated Credential Management (FedCM) API defines login functionality for federated identity providers (IdPs).
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigatorLogin)
 */
interface NavigatorLogin {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NavigatorLogin/setStatus)
     */
    setStatus(status: LoginStatus): Promise<void>;
}

declare var NavigatorLogin: {
    prototype: NavigatorLogin;
    new(): NavigatorLogin;
};

interface NavigatorOnLine {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/onLine)
     */
    readonly onLine: boolean;
}

interface NavigatorPlugins {
    /**
     * Type: MimeTypeArray
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/mimeTypes)
     */
    readonly mimeTypes: MimeTypeArray;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/pdfViewerEnabled)
     */
    readonly pdfViewerEnabled: boolean;
    /**
     * Type: PluginArray
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/plugins)
     */
    readonly plugins: PluginArray;
    /**
     * Type: boolean
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/javaEnabled)
     */
    javaEnabled(): boolean;
}

/** Available only in secure contexts. */
interface NavigatorStorage {
    /**
     * Type: StorageManager
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Navigator/storage)
     */
    readonly storage: StorageManager;
}

/**
 * The DOM **`Node`** interface is an abstract base class upon which many other DOM API objects are based, thus letting those object types to be used similarly and often interchangeably.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node)
 */
interface Node extends EventTarget {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/baseURI)
     */
    readonly baseURI: string;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/childNodes)
     */
    readonly childNodes: NodeListOf<ChildNode>;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/firstChild)
     */
    readonly firstChild: ChildNode | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isConnected)
     */
    readonly isConnected: boolean;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lastChild)
     */
    readonly lastChild: ChildNode | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nextSibling)
     */
    readonly nextSibling: ChildNode | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeName)
     */
    readonly nodeName: string;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeType)
     */
    readonly nodeType: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/nodeValue)
     */
    nodeValue: string | null;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/ownerDocument)
     */
    readonly ownerDocument: Document | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentElement)
     */
    readonly parentElement: HTMLElement | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/parentNode)
     */
    readonly parentNode: ParentNode | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/previousSibling)
     */
    readonly previousSibling: ChildNode | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/textContent)
     */
    textContent: string | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/appendChild)
     */
    appendChild<T extends Node>(node: T): T;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/cloneNode)
     */
    cloneNode(subtree?: boolean): Node;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/compareDocumentPosition)
     */
    compareDocumentPosition(other: Node): number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/contains)
     */
    contains(other: Node | null): boolean;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/getRootNode)
     */
    getRootNode(options?: GetRootNodeOptions): Node;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/hasChildNodes)
     */
    hasChildNodes(): boolean;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/insertBefore)
     */
    insertBefore<T extends Node>(node: T, child: Node | null): T;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isDefaultNamespace)
     */
    isDefaultNamespace(namespace: string | null): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isEqualNode)
     */
    isEqualNode(otherNode: Node | null): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/isSameNode)
     */
    isSameNode(otherNode: Node | null): boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupNamespaceURI)
     */
    lookupNamespaceURI(prefix: string | null): string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/lookupPrefix)
     */
    lookupPrefix(namespace: string | null): string | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/normalize)
     */
    normalize(): void;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/removeChild)
     */
    removeChild<T extends Node>(child: T): T;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/replaceChild)
     */
    replaceChild<T extends Node>(node: Node, child: T): T;
    /** Type: unsigned short */
    readonly ELEMENT_NODE: 1;
    /** Type: unsigned short */
    readonly ATTRIBUTE_NODE: 2;
    /** Type: unsigned short */
    readonly TEXT_NODE: 3;
    /** Type: unsigned short */
    readonly CDATA_SECTION_NODE: 4;
    /** Type: unsigned short */
    readonly ENTITY_REFERENCE_NODE: 5;
    /** Type: unsigned short */
    readonly ENTITY_NODE: 6;
    /** Type: unsigned short */
    readonly PROCESSING_INSTRUCTION_NODE: 7;
    /** Type: unsigned short */
    readonly COMMENT_NODE: 8;
    /** Type: unsigned short */
    readonly DOCUMENT_NODE: 9;
    /** Type: unsigned short */
    readonly DOCUMENT_TYPE_NODE: 10;
    /** Type: unsigned short */
    readonly DOCUMENT_FRAGMENT_NODE: 11;
    /** Type: unsigned short */
    readonly NOTATION_NODE: 12;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_DISCONNECTED: 0x01;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_PRECEDING: 0x02;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_FOLLOWING: 0x04;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_CONTAINS: 0x08;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_CONTAINED_BY: 0x10;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 0x20;
}

declare var Node: {
    prototype: Node;
    new(): Node;
    /** Type: unsigned short */
    readonly ELEMENT_NODE: 1;
    /** Type: unsigned short */
    readonly ATTRIBUTE_NODE: 2;
    /** Type: unsigned short */
    readonly TEXT_NODE: 3;
    /** Type: unsigned short */
    readonly CDATA_SECTION_NODE: 4;
    /** Type: unsigned short */
    readonly ENTITY_REFERENCE_NODE: 5;
    /** Type: unsigned short */
    readonly ENTITY_NODE: 6;
    /** Type: unsigned short */
    readonly PROCESSING_INSTRUCTION_NODE: 7;
    /** Type: unsigned short */
    readonly COMMENT_NODE: 8;
    /** Type: unsigned short */
    readonly DOCUMENT_NODE: 9;
    /** Type: unsigned short */
    readonly DOCUMENT_TYPE_NODE: 10;
    /** Type: unsigned short */
    readonly DOCUMENT_FRAGMENT_NODE: 11;
    /** Type: unsigned short */
    readonly NOTATION_NODE: 12;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_DISCONNECTED: 0x01;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_PRECEDING: 0x02;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_FOLLOWING: 0x04;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_CONTAINS: 0x08;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_CONTAINED_BY: 0x10;
    /** Type: unsigned short */
    readonly DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 0x20;
};

/**
 * The **`NodeIterator`** interface represents an iterator to traverse nodes of a DOM subtree in document order.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator)
 */
interface NodeIterator {
    /**
     * Type: NodeFilter
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/filter)
     */
    readonly filter: NodeFilter | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/pointerBeforeReferenceNode)
     */
    readonly pointerBeforeReferenceNode: boolean;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/referenceNode)
     */
    readonly referenceNode: Node;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/root)
     */
    readonly root: Node;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/whatToShow)
     */
    readonly whatToShow: number;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/detach)
     */
    detach(): void;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/nextNode)
     */
    nextNode(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeIterator/previousNode)
     */
    previousNode(): Node | null;
}

declare var NodeIterator: {
    prototype: NodeIterator;
    new(): NodeIterator;
};

/**
 * **`NodeList`** objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList)
 */
interface NodeList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/length)
     */
    readonly length: number;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/NodeList/item)
     */
    item(index: number): Node | null;
    /**
     * Performs the specified action for each node in an list.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    forEach(callbackfn: (value: Node, key: number, parent: NodeList) => void, thisArg?: any): void;
    [index: number]: Node;
}

declare var NodeList: {
    prototype: NodeList;
    new(): NodeList;
};

interface NodeListOf<TNode extends Node> extends NodeList {
    item(index: number): TNode;
    /**
     * Performs the specified action for each node in an list.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the list.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
     */
    forEach(callbackfn: (value: TNode, key: number, parent: NodeListOf<TNode>) => void, thisArg?: any): void;
    [index: number]: TNode;
}

interface NonDocumentTypeChildNode {
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/nextElementSibling)
     */
    readonly nextElementSibling: Element | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CharacterData/previousElementSibling)
     */
    readonly previousElementSibling: Element | null;
}

interface NonElementParentNode {
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/getElementById)
     */
    getElementById(elementId: string): Element | null;
}

interface NotificationEventMap {
    "click": Event;
    "close": Event;
    "error": Event;
    "show": Event;
}

/**
 * The **`Notification`** interface of the Notifications API is used to configure and display desktop notifications to the user.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification)
 */
interface Notification extends EventTarget {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/badge)
     */
    readonly badge: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/body)
     */
    readonly body: string;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/data)
     */
    readonly data: any;
    /**
     * Type: NotificationDirection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/dir)
     */
    readonly dir: NotificationDirection;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/icon)
     */
    readonly icon: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/lang)
     */
    readonly lang: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/click_event)
     */
    onclick: ((this: Notification, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close_event)
     */
    onclose: ((this: Notification, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/error_event)
     */
    onerror: ((this: Notification, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/show_event)
     */
    onshow: ((this: Notification, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/requireInteraction)
     */
    readonly requireInteraction: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/silent)
     */
    readonly silent: boolean | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/tag)
     */
    readonly tag: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/title)
     */
    readonly title: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/close)
     */
    close(): void;
    addEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof NotificationEventMap>(type: K, listener: (this: Notification, ev: NotificationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var Notification: {
    prototype: Notification;
    new(title: string, options?: NotificationOptions): Notification;
    /**
     * Type: NotificationPermission
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/permission_static)
     */
    readonly permission: NotificationPermission;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Notification/requestPermission_static)
     */
    requestPermission(deprecatedCallback?: NotificationPermissionCallback): Promise<NotificationPermission>;
};

/**
 * The **`OES_draw_buffers_indexed`** extension is part of the WebGL API and enables the use of different blend options when writing to multiple color buffers simultaneously.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed)
 */
interface OES_draw_buffers_indexed {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationSeparateiOES)
     */
    blendEquationSeparateiOES(buf: GLuint, modeRGB: GLenum, modeAlpha: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendEquationiOES)
     */
    blendEquationiOES(buf: GLuint, mode: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFuncSeparateiOES)
     */
    blendFuncSeparateiOES(buf: GLuint, srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/blendFunciOES)
     */
    blendFunciOES(buf: GLuint, src: GLenum, dst: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/colorMaskiOES)
     */
    colorMaskiOES(buf: GLuint, r: GLboolean, g: GLboolean, b: GLboolean, a: GLboolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/disableiOES)
     */
    disableiOES(target: GLenum, index: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_draw_buffers_indexed/enableiOES)
     */
    enableiOES(target: GLenum, index: GLuint): void;
}

/**
 * The **`OES_element_index_uint`** extension is part of the WebGL API and adds support for `gl.UNSIGNED_INT` types to WebGLRenderingContext.drawElements().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_element_index_uint)
 */
interface OES_element_index_uint {
}

/**
 * The `OES_fbo_render_mipmap` extension is part of the WebGL API and makes it possible to attach any level of a texture to a framebuffer object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_fbo_render_mipmap)
 */
interface OES_fbo_render_mipmap {
}

/**
 * The **`OES_standard_derivatives`** extension is part of the WebGL API and adds the GLSL derivative functions `dFdx`, `dFdy`, and `fwidth`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_standard_derivatives)
 */
interface OES_standard_derivatives {
    /** Type: GLenum */
    readonly FRAGMENT_SHADER_DERIVATIVE_HINT_OES: 0x8B8B;
}

/**
 * The **`OES_texture_float`** extension is part of the WebGL API and exposes floating-point pixel types for textures.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float)
 */
interface OES_texture_float {
}

/**
 * The **`OES_texture_float_linear`** extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_float_linear)
 */
interface OES_texture_float_linear {
}

/**
 * The **`OES_texture_half_float`** extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float)
 */
interface OES_texture_half_float {
    /** Type: GLenum */
    readonly HALF_FLOAT_OES: 0x8D61;
}

/**
 * The **`OES_texture_half_float_linear`** extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_texture_half_float_linear)
 */
interface OES_texture_half_float_linear {
}

/**
 * The **OES_vertex_array_object** extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object)
 */
interface OES_vertex_array_object {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/bindVertexArrayOES)
     */
    bindVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;
    /**
     * Type: WebGLVertexArrayObjectOES
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/createVertexArrayOES)
     */
    createVertexArrayOES(): WebGLVertexArrayObjectOES;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/deleteVertexArrayOES)
     */
    deleteVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): void;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OES_vertex_array_object/isVertexArrayOES)
     */
    isVertexArrayOES(arrayObject: WebGLVertexArrayObjectOES | null): GLboolean;
    /** Type: GLenum */
    readonly VERTEX_ARRAY_BINDING_OES: 0x85B5;
}

/**
 * The `OVR_multiview2` extension is part of the WebGL API and adds support for rendering into multiple views simultaneously.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2)
 */
interface OVR_multiview2 {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OVR_multiview2/framebufferTextureMultiviewOVR)
     */
    framebufferTextureMultiviewOVR(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, baseViewIndex: GLint, numViews: GLsizei): void;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR: 0x9630;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR: 0x9632;
    /** Type: GLenum */
    readonly MAX_VIEWS_OVR: 0x9631;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR: 0x9633;
}

/**
 * The Web Audio API `OfflineAudioCompletionEvent` interface represents events that occur when the processing of an OfflineAudioContext is terminated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent)
 */
interface OfflineAudioCompletionEvent extends Event {
    /**
     * Type: AudioBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioCompletionEvent/renderedBuffer)
     */
    readonly renderedBuffer: AudioBuffer;
}

declare var OfflineAudioCompletionEvent: {
    prototype: OfflineAudioCompletionEvent;
    new(type: string, eventInitDict: OfflineAudioCompletionEventInit): OfflineAudioCompletionEvent;
};

interface OfflineAudioContextEventMap extends BaseAudioContextEventMap {
    "complete": OfflineAudioCompletionEvent;
}

/**
 * The `OfflineAudioContext` interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext)
 */
interface OfflineAudioContext extends BaseAudioContext {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/length)
     */
    readonly length: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/complete_event)
     */
    oncomplete: ((this: OfflineAudioContext, ev: OfflineAudioCompletionEvent) => any) | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/resume)
     */
    resume(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/startRendering)
     */
    startRendering(): Promise<AudioBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OfflineAudioContext/suspend)
     */
    suspend(suspendTime: number): Promise<void>;
    addEventListener<K extends keyof OfflineAudioContextEventMap>(type: K, listener: (this: OfflineAudioContext, ev: OfflineAudioContextEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof OfflineAudioContextEventMap>(type: K, listener: (this: OfflineAudioContext, ev: OfflineAudioContextEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var OfflineAudioContext: {
    prototype: OfflineAudioContext;
    new(contextOptions: OfflineAudioContextOptions): OfflineAudioContext;
    new(numberOfChannels: number, length: number, sampleRate: number): OfflineAudioContext;
};

interface OffscreenCanvasEventMap {
    "contextlost": Event;
    "contextrestored": Event;
}

/**
 * When using the canvas element or the Canvas API, rendering, animation, and user interaction usually happen on the main execution thread of a web application.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas)
 */
interface OffscreenCanvas extends EventTarget {
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/height)
     */
    height: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/contextlost_event)
     */
    oncontextlost: ((this: OffscreenCanvas, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/contextrestored_event)
     */
    oncontextrestored: ((this: OffscreenCanvas, ev: Event) => any) | null;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/width)
     */
    width: number;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/convertToBlob)
     */
    convertToBlob(options?: ImageEncodeOptions): Promise<Blob>;
    /**
     * Type: OffscreenRenderingContext
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/getContext)
     */
    getContext(contextId: "2d", options?: any): OffscreenCanvasRenderingContext2D | null;
    getContext(contextId: "bitmaprenderer", options?: any): ImageBitmapRenderingContext | null;
    getContext(contextId: "webgl", options?: any): WebGLRenderingContext | null;
    getContext(contextId: "webgl2", options?: any): WebGL2RenderingContext | null;
    getContext(contextId: OffscreenRenderingContextId, options?: any): OffscreenRenderingContext | null;
    /**
     * Type: ImageBitmap
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvas/transferToImageBitmap)
     */
    transferToImageBitmap(): ImageBitmap;
    addEventListener<K extends keyof OffscreenCanvasEventMap>(type: K, listener: (this: OffscreenCanvas, ev: OffscreenCanvasEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof OffscreenCanvasEventMap>(type: K, listener: (this: OffscreenCanvas, ev: OffscreenCanvasEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var OffscreenCanvas: {
    prototype: OffscreenCanvas;
    new(width: number, height: number): OffscreenCanvas;
};

/**
 * The **`OffscreenCanvasRenderingContext2D`** interface is a CanvasRenderingContext2D rendering context for drawing to the bitmap of an `OffscreenCanvas` object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OffscreenCanvasRenderingContext2D)
 */
interface OffscreenCanvasRenderingContext2D extends CanvasCompositing, CanvasDrawImage, CanvasDrawPath, CanvasFillStrokeStyles, CanvasFilters, CanvasImageData, CanvasImageSmoothing, CanvasPath, CanvasPathDrawingStyles, CanvasRect, CanvasShadowStyles, CanvasState, CanvasText, CanvasTextDrawingStyles, CanvasTransform {
    /**
     * Type: OffscreenCanvas
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/canvas)
     */
    readonly canvas: OffscreenCanvas;
}

declare var OffscreenCanvasRenderingContext2D: {
    prototype: OffscreenCanvasRenderingContext2D;
    new(): OffscreenCanvasRenderingContext2D;
};

/**
 * The **`OscillatorNode`** interface represents a periodic waveform, such as a sine wave.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode)
 */
interface OscillatorNode extends AudioScheduledSourceNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/detune)
     */
    readonly detune: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/frequency)
     */
    readonly frequency: AudioParam;
    /**
     * Type: OscillatorType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/type)
     */
    type: OscillatorType;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OscillatorNode/setPeriodicWave)
     */
    setPeriodicWave(periodicWave: PeriodicWave): void;
    addEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AudioScheduledSourceNodeEventMap>(type: K, listener: (this: OscillatorNode, ev: AudioScheduledSourceNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var OscillatorNode: {
    prototype: OscillatorNode;
    new(context: BaseAudioContext, options?: OscillatorOptions): OscillatorNode;
};

/**
 * The **`OverconstrainedError`** interface of the Media Capture and Streams API indicates that the set of desired capabilities for the current MediaStreamTrack cannot currently be met.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError)
 */
interface OverconstrainedError extends DOMException {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/OverconstrainedError/constraint)
     */
    readonly constraint: string;
}

declare var OverconstrainedError: {
    prototype: OverconstrainedError;
    new(constraint: string, message?: string): OverconstrainedError;
};

/**
 * The **`PageRevealEvent`** event object is made available inside handler functions for the Window.pagereveal_event event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageRevealEvent)
 */
interface PageRevealEvent extends Event {
    /**
     * Type: ViewTransition
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageRevealEvent/viewTransition)
     */
    readonly viewTransition: ViewTransition | null;
}

declare var PageRevealEvent: {
    prototype: PageRevealEvent;
    new(type: string, eventInitDict?: PageRevealEventInit): PageRevealEvent;
};

/**
 * The **`PageSwapEvent`** event object is made available inside handler functions for the Window.pageswap_event event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent)
 */
interface PageSwapEvent extends Event {
    /**
     * Type: NavigationActivation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent/activation)
     */
    readonly activation: NavigationActivation | null;
    /**
     * Type: ViewTransition
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageSwapEvent/viewTransition)
     */
    readonly viewTransition: ViewTransition | null;
}

declare var PageSwapEvent: {
    prototype: PageSwapEvent;
    new(type: string, eventInitDict?: PageSwapEventInit): PageSwapEvent;
};

/**
 * The **`PageTransitionEvent`** event object is available inside handler functions for the `pageshow` and `pagehide` events, fired when a document is being loaded or unloaded.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent)
 */
interface PageTransitionEvent extends Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PageTransitionEvent/persisted)
     */
    readonly persisted: boolean;
}

declare var PageTransitionEvent: {
    prototype: PageTransitionEvent;
    new(type: string, eventInitDict?: PageTransitionEventInit): PageTransitionEvent;
};

/**
 * The `PannerNode` interface defines an audio-processing object that represents the location, direction, and behavior of an audio source signal in a simulated physical space.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode)
 */
interface PannerNode extends AudioNode {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneInnerAngle)
     */
    coneInnerAngle: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterAngle)
     */
    coneOuterAngle: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/coneOuterGain)
     */
    coneOuterGain: number;
    /**
     * Type: DistanceModelType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/distanceModel)
     */
    distanceModel: DistanceModelType;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/maxDistance)
     */
    maxDistance: number;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationX)
     */
    readonly orientationX: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationY)
     */
    readonly orientationY: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/orientationZ)
     */
    readonly orientationZ: AudioParam;
    /**
     * Type: PanningModelType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/panningModel)
     */
    panningModel: PanningModelType;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionX)
     */
    readonly positionX: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionY)
     */
    readonly positionY: AudioParam;
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/positionZ)
     */
    readonly positionZ: AudioParam;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/refDistance)
     */
    refDistance: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/rolloffFactor)
     */
    rolloffFactor: number;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/setOrientation)
     */
    setOrientation(x: number, y: number, z: number): void;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PannerNode/setPosition)
     */
    setPosition(x: number, y: number, z: number): void;
}

declare var PannerNode: {
    prototype: PannerNode;
    new(context: BaseAudioContext, options?: PannerOptions): PannerNode;
};

interface ParentNode extends Node {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/childElementCount)
     */
    readonly childElementCount: number;
    /**
     * Type: HTMLCollection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/children)
     */
    readonly children: HTMLCollection;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/firstElementChild)
     */
    readonly firstElementChild: Element | null;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/lastElementChild)
     */
    readonly lastElementChild: Element | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/append)
     */
    append(...nodes: (Node | string)[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/prepend)
     */
    prepend(...nodes: (Node | string)[]): void;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelector)
     */
    querySelector<K extends keyof HTMLElementTagNameMap>(selectors: K): HTMLElementTagNameMap[K] | null;
    querySelector<K extends keyof SVGElementTagNameMap>(selectors: K): SVGElementTagNameMap[K] | null;
    querySelector<K extends keyof MathMLElementTagNameMap>(selectors: K): MathMLElementTagNameMap[K] | null;
    /** @deprecated */
    querySelector<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): HTMLElementDeprecatedTagNameMap[K] | null;
    querySelector<E extends Element = Element>(selectors: string): E | null;
    /**
     * Type: NodeList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/querySelectorAll)
     */
    querySelectorAll<K extends keyof HTMLElementTagNameMap>(selectors: K): NodeListOf<HTMLElementTagNameMap[K]>;
    querySelectorAll<K extends keyof SVGElementTagNameMap>(selectors: K): NodeListOf<SVGElementTagNameMap[K]>;
    querySelectorAll<K extends keyof MathMLElementTagNameMap>(selectors: K): NodeListOf<MathMLElementTagNameMap[K]>;
    /** @deprecated */
    querySelectorAll<K extends keyof HTMLElementDeprecatedTagNameMap>(selectors: K): NodeListOf<HTMLElementDeprecatedTagNameMap[K]>;
    querySelectorAll<E extends Element = Element>(selectors: string): NodeListOf<E>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/replaceChildren)
     */
    replaceChildren(...nodes: (Node | string)[]): void;
}

/**
 * The **`Path2D`** interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D)
 */
interface Path2D extends CanvasPath {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Path2D/addPath)
     */
    addPath(path: Path2D, transform?: DOMMatrix2DInit): void;
}

declare var Path2D: {
    prototype: Path2D;
    new(path?: Path2D | string): Path2D;
};

/**
 * The **`ContactAddress`** interface of the Contact Picker API represents a physical address.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress)
 */
interface PaymentAddress {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/addressLine)
     */
    readonly addressLine: ReadonlyArray<string>;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/city)
     */
    readonly city: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/country)
     */
    readonly country: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/dependentLocality)
     */
    readonly dependentLocality: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/organization)
     */
    readonly organization: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/phone)
     */
    readonly phone: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/postalCode)
     */
    readonly postalCode: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/recipient)
     */
    readonly recipient: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/region)
     */
    readonly region: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/sortingCode)
     */
    readonly sortingCode: string;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ContactAddress/toJSON)
     */
    toJSON(): any;
}

declare var PaymentAddress: {
    prototype: PaymentAddress;
    new(): PaymentAddress;
};

/**
 * The **`PaymentMethodChangeEvent`** interface of the Payment Request API describes the PaymentRequest/paymentmethodchange_event event which is fired by some payment handlers when the user switches payment instruments (e.g., a user selects a 'store' card to make a purchase while using Apple Pay).
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent)
 */
interface PaymentMethodChangeEvent extends PaymentRequestUpdateEvent {
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodDetails)
     */
    readonly methodDetails: any;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentMethodChangeEvent/methodName)
     */
    readonly methodName: string;
}

declare var PaymentMethodChangeEvent: {
    prototype: PaymentMethodChangeEvent;
    new(type: string, eventInitDict?: PaymentMethodChangeEventInit): PaymentMethodChangeEvent;
};

interface PaymentRequestEventMap {
    "paymentmethodchange": PaymentMethodChangeEvent;
    "shippingaddresschange": PaymentRequestUpdateEvent;
    "shippingoptionchange": PaymentRequestUpdateEvent;
}

/**
 * The Payment Request API's **`PaymentRequest`** interface is the primary access point into the API, and lets web content and apps accept payments from the end user on behalf of the operator of the site or the publisher of the app.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest)
 */
interface PaymentRequest extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/id)
     */
    readonly id: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/paymentmethodchange_event)
     */
    onpaymentmethodchange: ((this: PaymentRequest, ev: PaymentMethodChangeEvent) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingaddresschange_event)
     */
    onshippingaddresschange: ((this: PaymentRequest, ev: PaymentRequestUpdateEvent) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingoptionchange_event)
     */
    onshippingoptionchange: ((this: PaymentRequest, ev: PaymentRequestUpdateEvent) => any) | null;
    /**
     * Type: ContactAddress
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingAddress)
     */
    readonly shippingAddress: PaymentAddress | null;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingOption)
     */
    readonly shippingOption: string | null;
    /**
     * Type: PaymentShippingType
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/shippingType)
     */
    readonly shippingType: PaymentShippingType | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/abort)
     */
    abort(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/canMakePayment)
     */
    canMakePayment(): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequest/show)
     */
    show(detailsPromise?: PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>): Promise<PaymentResponse>;
    addEventListener<K extends keyof PaymentRequestEventMap>(type: K, listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof PaymentRequestEventMap>(type: K, listener: (this: PaymentRequest, ev: PaymentRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var PaymentRequest: {
    prototype: PaymentRequest;
    new(methodData: PaymentMethodData[], details: PaymentDetailsInit, options?: PaymentOptions): PaymentRequest;
};

/**
 * The **`PaymentRequestUpdateEvent`** interface is used for events sent to a PaymentRequest instance when changes are made to shipping-related information for a pending PaymentRequest.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent)
 */
interface PaymentRequestUpdateEvent extends Event {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentRequestUpdateEvent/updateWith)
     */
    updateWith(detailsPromise: PaymentDetailsUpdate | PromiseLike<PaymentDetailsUpdate>): void;
}

declare var PaymentRequestUpdateEvent: {
    prototype: PaymentRequestUpdateEvent;
    new(type: string, eventInitDict?: PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent;
};

interface PaymentResponseEventMap {
    "payerdetailchange": PaymentRequestUpdateEvent;
}

/**
 * The **`PaymentResponse`** interface of the Payment Request API is returned after a user selects a payment method and approves a payment request.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse)
 */
interface PaymentResponse extends EventTarget {
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/details)
     */
    readonly details: any;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/methodName)
     */
    readonly methodName: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerdetailchange_event)
     */
    onpayerdetailchange: ((this: PaymentResponse, ev: PaymentRequestUpdateEvent) => any) | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerEmail)
     */
    readonly payerEmail: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerName)
     */
    readonly payerName: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/payerPhone)
     */
    readonly payerPhone: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/requestId)
     */
    readonly requestId: string;
    /**
     * Type: ContactAddress
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/shippingAddress)
     */
    readonly shippingAddress: PaymentAddress | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/shippingOption)
     */
    readonly shippingOption: string | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/complete)
     */
    complete(result?: PaymentComplete): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/retry)
     */
    retry(errorFields?: PaymentValidationErrors): Promise<void>;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PaymentResponse/toJSON)
     */
    toJSON(): any;
    addEventListener<K extends keyof PaymentResponseEventMap>(type: K, listener: (this: PaymentResponse, ev: PaymentResponseEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof PaymentResponseEventMap>(type: K, listener: (this: PaymentResponse, ev: PaymentResponseEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var PaymentResponse: {
    prototype: PaymentResponse;
    new(): PaymentResponse;
};

interface PerformanceEventMap {
    "resourcetimingbufferfull": Event;
}

/**
 * The **`Performance`** interface provides access to performance-related information for the current page.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance)
 */
interface Performance extends EventTarget {
    /**
     * Type: EventCounts
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/eventCounts)
     */
    readonly eventCounts: EventCounts;
    /**
     * Type: PerformanceNavigation
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/navigation)
     */
    readonly navigation: PerformanceNavigation;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/resourcetimingbufferfull_event)
     */
    onresourcetimingbufferfull: ((this: Performance, ev: Event) => any) | null;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timeOrigin)
     */
    readonly timeOrigin: DOMHighResTimeStamp;
    /**
     * Type: PerformanceTiming
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/timing)
     */
    readonly timing: PerformanceTiming;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearMarks)
     */
    clearMarks(markName?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearMeasures)
     */
    clearMeasures(measureName?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/clearResourceTimings)
     */
    clearResourceTimings(): void;
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntries)
     */
    getEntries(): PerformanceEntryList;
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByName)
     */
    getEntriesByName(name: string, type?: string): PerformanceEntryList;
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/getEntriesByType)
     */
    getEntriesByType(type: string): PerformanceEntryList;
    /**
     * Type: PerformanceMark
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/mark)
     */
    mark(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;
    /**
     * Type: PerformanceMeasure
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/measure)
     */
    measure(measureName: string, startOrMeasureOptions?: string | PerformanceMeasureOptions, endMark?: string): PerformanceMeasure;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/now)
     */
    now(): DOMHighResTimeStamp;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/setResourceTimingBufferSize)
     */
    setResourceTimingBufferSize(maxSize: number): void;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Performance/toJSON)
     */
    toJSON(): any;
    addEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof PerformanceEventMap>(type: K, listener: (this: Performance, ev: PerformanceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var Performance: {
    prototype: Performance;
    new(): Performance;
};

/**
 * The **`PerformanceEntry`** object encapsulates a single performance metric that is part of the browser's performance timeline.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry)
 */
interface PerformanceEntry {
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/duration)
     */
    readonly duration: DOMHighResTimeStamp;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/entryType)
     */
    readonly entryType: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/name)
     */
    readonly name: string;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/startTime)
     */
    readonly startTime: DOMHighResTimeStamp;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEntry/toJSON)
     */
    toJSON(): any;
}

declare var PerformanceEntry: {
    prototype: PerformanceEntry;
    new(): PerformanceEntry;
};

/**
 * The `PerformanceEventTiming` interface of the Event Timing API provides insights into the latency of certain event types triggered by user interaction.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming)
 */
interface PerformanceEventTiming extends PerformanceEntry {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/cancelable)
     */
    readonly cancelable: boolean;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingEnd)
     */
    readonly processingEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/processingStart)
     */
    readonly processingStart: DOMHighResTimeStamp;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/target)
     */
    readonly target: Node | null;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceEventTiming/toJSON)
     */
    toJSON(): any;
}

declare var PerformanceEventTiming: {
    prototype: PerformanceEventTiming;
    new(): PerformanceEventTiming;
};

/**
 * **`PerformanceMark`** is an interface for PerformanceEntry objects with an PerformanceEntry.entryType of `'mark'`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark)
 */
interface PerformanceMark extends PerformanceEntry {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMark/detail)
     */
    readonly detail: any;
}

declare var PerformanceMark: {
    prototype: PerformanceMark;
    new(markName: string, markOptions?: PerformanceMarkOptions): PerformanceMark;
};

/**
 * **`PerformanceMeasure`** is an _abstract_ interface for PerformanceEntry objects with an PerformanceEntry.entryType of `'measure'`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure)
 */
interface PerformanceMeasure extends PerformanceEntry {
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceMeasure/detail)
     */
    readonly detail: any;
}

declare var PerformanceMeasure: {
    prototype: PerformanceMeasure;
    new(): PerformanceMeasure;
};

/**
 * The legacy **`PerformanceNavigation`** interface represents information about how the navigation to the current document was done.
 * @deprecated This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation)
 */
interface PerformanceNavigation {
    /**
     * Type: unsigned short
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/redirectCount)
     */
    readonly redirectCount: number;
    /**
     * Type: unsigned short
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/type)
     */
    readonly type: number;
    /**
     * Type: object
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigation/toJSON)
     */
    toJSON(): any;
    /** Type: unsigned short */
    readonly TYPE_NAVIGATE: 0;
    /** Type: unsigned short */
    readonly TYPE_RELOAD: 1;
    /** Type: unsigned short */
    readonly TYPE_BACK_FORWARD: 2;
    /** Type: unsigned short */
    readonly TYPE_RESERVED: 255;
}

/** @deprecated */
declare var PerformanceNavigation: {
    prototype: PerformanceNavigation;
    new(): PerformanceNavigation;
    /** Type: unsigned short */
    readonly TYPE_NAVIGATE: 0;
    /** Type: unsigned short */
    readonly TYPE_RELOAD: 1;
    /** Type: unsigned short */
    readonly TYPE_BACK_FORWARD: 2;
    /** Type: unsigned short */
    readonly TYPE_RESERVED: 255;
};

/**
 * The **`PerformanceNavigationTiming`** interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming)
 */
interface PerformanceNavigationTiming extends PerformanceResourceTiming {
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domComplete)
     */
    readonly domComplete: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventEnd)
     */
    readonly domContentLoadedEventEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domContentLoadedEventStart)
     */
    readonly domContentLoadedEventStart: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/domInteractive)
     */
    readonly domInteractive: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventEnd)
     */
    readonly loadEventEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/loadEventStart)
     */
    readonly loadEventStart: DOMHighResTimeStamp;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/redirectCount)
     */
    readonly redirectCount: number;
    /**
     * Type: NavigationTimingType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/type)
     */
    readonly type: NavigationTimingType;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventEnd)
     */
    readonly unloadEventEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/unloadEventStart)
     */
    readonly unloadEventStart: DOMHighResTimeStamp;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceNavigationTiming/toJSON)
     */
    toJSON(): any;
}

declare var PerformanceNavigationTiming: {
    prototype: PerformanceNavigationTiming;
    new(): PerformanceNavigationTiming;
};

/**
 * The **`PerformanceObserver`** interface is used to observe performance measurement events and be notified of new PerformanceEntry as they are recorded in the browser's _performance timeline_.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver)
 */
interface PerformanceObserver {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/disconnect)
     */
    disconnect(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/observe)
     */
    observe(options?: PerformanceObserverInit): void;
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/takeRecords)
     */
    takeRecords(): PerformanceEntryList;
}

declare var PerformanceObserver: {
    prototype: PerformanceObserver;
    new(callback: PerformanceObserverCallback): PerformanceObserver;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserver/supportedEntryTypes_static)
     */
    readonly supportedEntryTypes: ReadonlyArray<string>;
};

/**
 * The **`PerformanceObserverEntryList`** interface is a list of PerformanceEntry that were explicitly observed via the PerformanceObserver.observe method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList)
 */
interface PerformanceObserverEntryList {
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntries)
     */
    getEntries(): PerformanceEntryList;
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByName)
     */
    getEntriesByName(name: string, type?: string): PerformanceEntryList;
    /**
     * Type: PerformanceEntryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceObserverEntryList/getEntriesByType)
     */
    getEntriesByType(type: string): PerformanceEntryList;
}

declare var PerformanceObserverEntryList: {
    prototype: PerformanceObserverEntryList;
    new(): PerformanceObserverEntryList;
};

/**
 * The **`PerformancePaintTiming`** interface provides timing information about 'paint' (also called 'render') operations during web page construction.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformancePaintTiming)
 */
interface PerformancePaintTiming extends PerformanceEntry {
}

declare var PerformancePaintTiming: {
    prototype: PerformancePaintTiming;
    new(): PerformancePaintTiming;
};

/**
 * The **`PerformanceResourceTiming`** interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming)
 */
interface PerformanceResourceTiming extends PerformanceEntry {
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectEnd)
     */
    readonly connectEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/connectStart)
     */
    readonly connectStart: DOMHighResTimeStamp;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/decodedBodySize)
     */
    readonly decodedBodySize: number;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupEnd)
     */
    readonly domainLookupEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/domainLookupStart)
     */
    readonly domainLookupStart: DOMHighResTimeStamp;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/encodedBodySize)
     */
    readonly encodedBodySize: number;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/fetchStart)
     */
    readonly fetchStart: DOMHighResTimeStamp;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/initiatorType)
     */
    readonly initiatorType: string;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/nextHopProtocol)
     */
    readonly nextHopProtocol: string;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectEnd)
     */
    readonly redirectEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/redirectStart)
     */
    readonly redirectStart: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/requestStart)
     */
    readonly requestStart: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseEnd)
     */
    readonly responseEnd: DOMHighResTimeStamp;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStart)
     */
    readonly responseStart: DOMHighResTimeStamp;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/responseStatus)
     */
    readonly responseStatus: number;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/secureConnectionStart)
     */
    readonly secureConnectionStart: DOMHighResTimeStamp;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/serverTiming)
     */
    readonly serverTiming: ReadonlyArray<PerformanceServerTiming>;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/transferSize)
     */
    readonly transferSize: number;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/workerStart)
     */
    readonly workerStart: DOMHighResTimeStamp;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceResourceTiming/toJSON)
     */
    toJSON(): any;
}

declare var PerformanceResourceTiming: {
    prototype: PerformanceResourceTiming;
    new(): PerformanceResourceTiming;
};

/**
 * The **`PerformanceServerTiming`** interface surfaces server metrics that are sent with the response in the Server-Timing HTTP header.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming)
 */
interface PerformanceServerTiming {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/description)
     */
    readonly description: string;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/duration)
     */
    readonly duration: DOMHighResTimeStamp;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/name)
     */
    readonly name: string;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceServerTiming/toJSON)
     */
    toJSON(): any;
}

declare var PerformanceServerTiming: {
    prototype: PerformanceServerTiming;
    new(): PerformanceServerTiming;
};

/**
 * The **`PerformanceTiming`** interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page.
 * @deprecated This interface is deprecated in the Navigation Timing Level 2 specification. Please use the PerformanceNavigationTiming interface instead.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming)
 */
interface PerformanceTiming {
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectEnd)
     */
    readonly connectEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/connectStart)
     */
    readonly connectStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domComplete)
     */
    readonly domComplete: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventEnd)
     */
    readonly domContentLoadedEventEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domContentLoadedEventStart)
     */
    readonly domContentLoadedEventStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domInteractive)
     */
    readonly domInteractive: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domLoading)
     */
    readonly domLoading: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupEnd)
     */
    readonly domainLookupEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/domainLookupStart)
     */
    readonly domainLookupStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/fetchStart)
     */
    readonly fetchStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventEnd)
     */
    readonly loadEventEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/loadEventStart)
     */
    readonly loadEventStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/navigationStart)
     */
    readonly navigationStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectEnd)
     */
    readonly redirectEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/redirectStart)
     */
    readonly redirectStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/requestStart)
     */
    readonly requestStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseEnd)
     */
    readonly responseEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/responseStart)
     */
    readonly responseStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/secureConnectionStart)
     */
    readonly secureConnectionStart: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventEnd)
     */
    readonly unloadEventEnd: number;
    /**
     * Type: unsigned long long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/unloadEventStart)
     */
    readonly unloadEventStart: number;
    /**
     * Type: object
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PerformanceTiming/toJSON)
     */
    toJSON(): any;
}

/** @deprecated */
declare var PerformanceTiming: {
    prototype: PerformanceTiming;
    new(): PerformanceTiming;
};

/**
 * The **`PeriodicWave`** interface defines a periodic waveform that can be used to shape the output of an OscillatorNode.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PeriodicWave)
 */
interface PeriodicWave {
}

declare var PeriodicWave: {
    prototype: PeriodicWave;
    new(context: BaseAudioContext, options?: PeriodicWaveOptions): PeriodicWave;
};

interface PermissionStatusEventMap {
    "change": Event;
}

/**
 * The **`PermissionStatus`** interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus)
 */
interface PermissionStatus extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/name)
     */
    readonly name: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/change_event)
     */
    onchange: ((this: PermissionStatus, ev: Event) => any) | null;
    /**
     * Type: PermissionState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PermissionStatus/state)
     */
    readonly state: PermissionState;
    addEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof PermissionStatusEventMap>(type: K, listener: (this: PermissionStatus, ev: PermissionStatusEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var PermissionStatus: {
    prototype: PermissionStatus;
    new(): PermissionStatus;
};

/**
 * The **`Permissions`** interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions - Permissions.query - : Returns the user permission status for a given API.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions)
 */
interface Permissions {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Permissions/query)
     */
    query(permissionDesc: PermissionDescriptor): Promise<PermissionStatus>;
}

declare var Permissions: {
    prototype: Permissions;
    new(): Permissions;
};

/**
 * The **`PictureInPictureEvent`** interface represents picture-in-picture-related events, including HTMLVideoElement/enterpictureinpicture_event, HTMLVideoElement/leavepictureinpicture_event and PictureInPictureWindow/resize_event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent)
 */
interface PictureInPictureEvent extends Event {
    /**
     * Type: PictureInPictureWindow
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureEvent/pictureInPictureWindow)
     */
    readonly pictureInPictureWindow: PictureInPictureWindow;
}

declare var PictureInPictureEvent: {
    prototype: PictureInPictureEvent;
    new(type: string, eventInitDict: PictureInPictureEventInit): PictureInPictureEvent;
};

interface PictureInPictureWindowEventMap {
    "resize": Event;
}

/**
 * The **`PictureInPictureWindow`** interface represents an object able to programmatically obtain the **`width`** and **`height`** and **`resize event`** of the floating video window.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow)
 */
interface PictureInPictureWindow extends EventTarget {
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/height)
     */
    readonly height: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/resize_event)
     */
    onresize: ((this: PictureInPictureWindow, ev: Event) => any) | null;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PictureInPictureWindow/width)
     */
    readonly width: number;
    addEventListener<K extends keyof PictureInPictureWindowEventMap>(type: K, listener: (this: PictureInPictureWindow, ev: PictureInPictureWindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof PictureInPictureWindowEventMap>(type: K, listener: (this: PictureInPictureWindow, ev: PictureInPictureWindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var PictureInPictureWindow: {
    prototype: PictureInPictureWindow;
    new(): PictureInPictureWindow;
};

/**
 * The `Plugin` interface provides information about a browser plugin.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Plugin)
 */
interface Plugin {
    /**
     * Type: DOMString
     * @deprecated
     */
    readonly description: string;
    /**
     * Type: DOMString
     * @deprecated
     */
    readonly filename: string;
    /**
     * Type: unsigned long
     * @deprecated
     */
    readonly length: number;
    /**
     * Type: DOMString
     * @deprecated
     */
    readonly name: string;
    /**
     * Type: MimeType
     * @deprecated
     */
    item(index: number): MimeType | null;
    /**
     * Type: MimeType
     * @deprecated
     */
    namedItem(name: string): MimeType | null;
    [index: number]: MimeType;
}

/** @deprecated */
declare var Plugin: {
    prototype: Plugin;
    new(): Plugin;
};

/**
 * The `PluginArray` interface is used to store a list of Plugin objects; it's returned by the Navigator.plugins property.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PluginArray)
 */
interface PluginArray {
    /**
     * Type: unsigned long
     * @deprecated
     */
    readonly length: number;
    /**
     * Type: Plugin
     * @deprecated
     */
    item(index: number): Plugin | null;
    /**
     * Type: Plugin
     * @deprecated
     */
    namedItem(name: string): Plugin | null;
    /**
     * Type: undefined
     * @deprecated
     */
    refresh(): void;
    [index: number]: Plugin;
}

/** @deprecated */
declare var PluginArray: {
    prototype: PluginArray;
    new(): PluginArray;
};

/**
 * The **`PointerEvent`** interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent)
 */
interface PointerEvent extends MouseEvent {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/altitudeAngle)
     */
    readonly altitudeAngle: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/azimuthAngle)
     */
    readonly azimuthAngle: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/height)
     */
    readonly height: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/isPrimary)
     */
    readonly isPrimary: boolean;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerId)
     */
    readonly pointerId: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pointerType)
     */
    readonly pointerType: string;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/pressure)
     */
    readonly pressure: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tangentialPressure)
     */
    readonly tangentialPressure: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltX)
     */
    readonly tiltX: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/tiltY)
     */
    readonly tiltY: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/twist)
     */
    readonly twist: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/width)
     */
    readonly width: number;
    /**
     * Type: [object Object]
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/getCoalescedEvents)
     */
    getCoalescedEvents(): PointerEvent[];
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PointerEvent/getPredictedEvents)
     */
    getPredictedEvents(): PointerEvent[];
}

declare var PointerEvent: {
    prototype: PointerEvent;
    new(type: string, eventInitDict?: PointerEventInit): PointerEvent;
};

/**
 * **`PopStateEvent`** is an interface for the Window/popstate_event event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent)
 */
interface PopStateEvent extends Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/hasUAVisualTransition)
     */
    readonly hasUAVisualTransition: boolean;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PopStateEvent/state)
     */
    readonly state: any;
}

declare var PopStateEvent: {
    prototype: PopStateEvent;
    new(type: string, eventInitDict?: PopStateEventInit): PopStateEvent;
};

interface PopoverInvokerElement {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetAction)
     */
    popoverTargetAction: string;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLButtonElement/popoverTargetElement)
     */
    popoverTargetElement: Element | null;
}

/**
 * The **`ProcessingInstruction`** interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction)
 */
interface ProcessingInstruction extends CharacterData, LinkStyle {
    readonly ownerDocument: Document;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProcessingInstruction/target)
     */
    readonly target: string;
}

declare var ProcessingInstruction: {
    prototype: ProcessingInstruction;
    new(): ProcessingInstruction;
};

/**
 * The **`ProgressEvent`** interface represents events measuring progress of an underlying process, like an HTTP request (for an `XMLHttpRequest`, or the loading of the underlying resource of an img, audio, video, style or link).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent)
 */
interface ProgressEvent<T extends EventTarget = EventTarget> extends Event {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/lengthComputable)
     */
    readonly lengthComputable: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/loaded)
     */
    readonly loaded: number;
    readonly target: T | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ProgressEvent/total)
     */
    readonly total: number;
}

declare var ProgressEvent: {
    prototype: ProgressEvent;
    new(type: string, eventInitDict?: ProgressEventInit): ProgressEvent;
};

/**
 * The **`PromiseRejectionEvent`** interface represents events which are sent to the global script context when JavaScript Promises are rejected.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent)
 */
interface PromiseRejectionEvent extends Event {
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/promise)
     */
    readonly promise: Promise<any>;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PromiseRejectionEvent/reason)
     */
    readonly reason: any;
}

declare var PromiseRejectionEvent: {
    prototype: PromiseRejectionEvent;
    new(type: string, eventInitDict: PromiseRejectionEventInit): PromiseRejectionEvent;
};

/**
 * The **`PublicKeyCredential`** interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential)
 */
interface PublicKeyCredential extends Credential {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/authenticatorAttachment)
     */
    readonly authenticatorAttachment: string | null;
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/rawId)
     */
    readonly rawId: ArrayBuffer;
    /**
     * Type: AuthenticatorResponse
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/response)
     */
    readonly response: AuthenticatorResponse;
    /**
     * Type: AuthenticationExtensionsClientOutputs
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/getClientExtensionResults)
     */
    getClientExtensionResults(): AuthenticationExtensionsClientOutputs;
    /**
     * Type: PublicKeyCredentialJSON
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/toJSON)
     */
    toJSON(): PublicKeyCredentialJSON;
}

declare var PublicKeyCredential: {
    prototype: PublicKeyCredential;
    new(): PublicKeyCredential;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/getClientCapabilities_static)
     */
    getClientCapabilities(): Promise<PublicKeyCredentialClientCapabilities>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isConditionalMediationAvailable_static)
     */
    isConditionalMediationAvailable(): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/isUserVerifyingPlatformAuthenticatorAvailable_static)
     */
    isUserVerifyingPlatformAuthenticatorAvailable(): Promise<boolean>;
    /**
     * Type: PublicKeyCredentialCreationOptions
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/parseCreationOptionsFromJSON_static)
     */
    parseCreationOptionsFromJSON(options: PublicKeyCredentialCreationOptionsJSON): PublicKeyCredentialCreationOptions;
    /**
     * Type: PublicKeyCredentialRequestOptions
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PublicKeyCredential/parseRequestOptionsFromJSON_static)
     */
    parseRequestOptionsFromJSON(options: PublicKeyCredentialRequestOptionsJSON): PublicKeyCredentialRequestOptions;
};

/**
 * The **`PushManager`** interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager)
 */
interface PushManager {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/getSubscription)
     */
    getSubscription(): Promise<PushSubscription | null>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/permissionState)
     */
    permissionState(options?: PushSubscriptionOptionsInit): Promise<PermissionState>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/subscribe)
     */
    subscribe(options?: PushSubscriptionOptionsInit): Promise<PushSubscription>;
}

declare var PushManager: {
    prototype: PushManager;
    new(): PushManager;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushManager/supportedContentEncodings_static)
     */
    readonly supportedContentEncodings: ReadonlyArray<string>;
};

/**
 * The `PushSubscription` interface of the Push API provides a subscription's URL endpoint along with the public key and secrets that should be used for encrypting push messages to this subscription.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription)
 */
interface PushSubscription {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/endpoint)
     */
    readonly endpoint: string;
    /**
     * Type: EpochTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/expirationTime)
     */
    readonly expirationTime: EpochTimeStamp | null;
    /**
     * Type: PushSubscriptionOptions
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/options)
     */
    readonly options: PushSubscriptionOptions;
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/getKey)
     */
    getKey(name: PushEncryptionKeyName): ArrayBuffer | null;
    /**
     * Type: PushSubscriptionJSON
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/toJSON)
     */
    toJSON(): PushSubscriptionJSON;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscription/unsubscribe)
     */
    unsubscribe(): Promise<boolean>;
}

declare var PushSubscription: {
    prototype: PushSubscription;
    new(): PushSubscription;
};

/**
 * The **`PushSubscriptionOptions`** interface of the Push API represents the options associated with a push subscription.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions)
 */
interface PushSubscriptionOptions {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/applicationServerKey)
     */
    readonly applicationServerKey: ArrayBuffer | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/PushSubscriptionOptions/userVisibleOnly)
     */
    readonly userVisibleOnly: boolean;
}

declare var PushSubscriptionOptions: {
    prototype: PushSubscriptionOptions;
    new(): PushSubscriptionOptions;
};

/**
 * The **`RTCCertificate`** interface of the WebRTC API provides an object representing a certificate that an RTCPeerConnection uses to authenticate.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate)
 */
interface RTCCertificate {
    /**
     * Type: EpochTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/expires)
     */
    readonly expires: EpochTimeStamp;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCCertificate/getFingerprints)
     */
    getFingerprints(): RTCDtlsFingerprint[];
}

declare var RTCCertificate: {
    prototype: RTCCertificate;
    new(): RTCCertificate;
};

interface RTCDTMFSenderEventMap {
    "tonechange": RTCDTMFToneChangeEvent;
}

/**
 * The **`RTCDTMFSender`** interface provides a mechanism for transmitting DTMF codes on a WebRTC RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender)
 */
interface RTCDTMFSender extends EventTarget {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/canInsertDTMF)
     */
    readonly canInsertDTMF: boolean;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/tonechange_event)
     */
    ontonechange: ((this: RTCDTMFSender, ev: RTCDTMFToneChangeEvent) => any) | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/toneBuffer)
     */
    readonly toneBuffer: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFSender/insertDTMF)
     */
    insertDTMF(tones: string, duration?: number, interToneGap?: number): void;
    addEventListener<K extends keyof RTCDTMFSenderEventMap>(type: K, listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RTCDTMFSenderEventMap>(type: K, listener: (this: RTCDTMFSender, ev: RTCDTMFSenderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RTCDTMFSender: {
    prototype: RTCDTMFSender;
    new(): RTCDTMFSender;
};

/**
 * The **`RTCDTMFToneChangeEvent`** interface represents events sent to indicate that DTMF tones have started or finished playing.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent)
 */
interface RTCDTMFToneChangeEvent extends Event {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDTMFToneChangeEvent/tone)
     */
    readonly tone: string;
}

declare var RTCDTMFToneChangeEvent: {
    prototype: RTCDTMFToneChangeEvent;
    new(type: string, eventInitDict?: RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent;
};

interface RTCDataChannelEventMap {
    "bufferedamountlow": Event;
    "close": Event;
    "closing": Event;
    "error": RTCErrorEvent;
    "message": MessageEvent;
    "open": Event;
}

/**
 * The **`RTCDataChannel`** interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel)
 */
interface RTCDataChannel extends EventTarget {
    /**
     * Type: BinaryType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/binaryType)
     */
    binaryType: BinaryType;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmount)
     */
    readonly bufferedAmount: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedAmountLowThreshold)
     */
    bufferedAmountLowThreshold: number;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/id)
     */
    readonly id: number | null;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/label)
     */
    readonly label: string;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxPacketLifeTime)
     */
    readonly maxPacketLifeTime: number | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/maxRetransmits)
     */
    readonly maxRetransmits: number | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/negotiated)
     */
    readonly negotiated: boolean;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/bufferedamountlow_event)
     */
    onbufferedamountlow: ((this: RTCDataChannel, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close_event)
     */
    onclose: ((this: RTCDataChannel, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/closing_event)
     */
    onclosing: ((this: RTCDataChannel, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/error_event)
     */
    onerror: ((this: RTCDataChannel, ev: RTCErrorEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/message_event)
     */
    onmessage: ((this: RTCDataChannel, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/open_event)
     */
    onopen: ((this: RTCDataChannel, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/ordered)
     */
    readonly ordered: boolean;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/protocol)
     */
    readonly protocol: string;
    /**
     * Type: RTCDataChannelState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/readyState)
     */
    readonly readyState: RTCDataChannelState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannel/send)
     */
    send(data: string): void;
    send(data: Blob): void;
    send(data: ArrayBuffer): void;
    send(data: ArrayBufferView<ArrayBuffer>): void;
    addEventListener<K extends keyof RTCDataChannelEventMap>(type: K, listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RTCDataChannelEventMap>(type: K, listener: (this: RTCDataChannel, ev: RTCDataChannelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RTCDataChannel: {
    prototype: RTCDataChannel;
    new(): RTCDataChannel;
};

/**
 * The **`RTCDataChannelEvent`** interface represents an event related to a specific RTCDataChannel.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent)
 */
interface RTCDataChannelEvent extends Event {
    /**
     * Type: RTCDataChannel
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDataChannelEvent/channel)
     */
    readonly channel: RTCDataChannel;
}

declare var RTCDataChannelEvent: {
    prototype: RTCDataChannelEvent;
    new(type: string, eventInitDict: RTCDataChannelEventInit): RTCDataChannelEvent;
};

interface RTCDtlsTransportEventMap {
    "error": RTCErrorEvent;
    "statechange": Event;
}

/**
 * The **`RTCDtlsTransport`** interface provides access to information about the Datagram Transport Layer Security (**DTLS**) transport over which a RTCPeerConnection's RTP and RTCP packets are sent and received by its RTCRtpSender and RTCRtpReceiver objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport)
 */
interface RTCDtlsTransport extends EventTarget {
    /**
     * Type: RTCIceTransport
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/iceTransport)
     */
    readonly iceTransport: RTCIceTransport;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/error_event)
     */
    onerror: ((this: RTCDtlsTransport, ev: RTCErrorEvent) => any) | null;
    /** Type: EventHandler */
    onstatechange: ((this: RTCDtlsTransport, ev: Event) => any) | null;
    /**
     * Type: RTCDtlsTransportState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCDtlsTransport/state)
     */
    readonly state: RTCDtlsTransportState;
    /** Type: [object Object] */
    getRemoteCertificates(): ArrayBuffer[];
    addEventListener<K extends keyof RTCDtlsTransportEventMap>(type: K, listener: (this: RTCDtlsTransport, ev: RTCDtlsTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RTCDtlsTransportEventMap>(type: K, listener: (this: RTCDtlsTransport, ev: RTCDtlsTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RTCDtlsTransport: {
    prototype: RTCDtlsTransport;
    new(): RTCDtlsTransport;
};

/**
 * The **`RTCEncodedAudioFrame`** of the WebRTC API represents an encoded audio frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame)
 */
interface RTCEncodedAudioFrame {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/data)
     */
    data: ArrayBuffer;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/timestamp) */
    readonly timestamp: number;
    /**
     * Type: RTCEncodedAudioFrameMetadata
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedAudioFrame/getMetadata)
     */
    getMetadata(): RTCEncodedAudioFrameMetadata;
}

declare var RTCEncodedAudioFrame: {
    prototype: RTCEncodedAudioFrame;
    new(): RTCEncodedAudioFrame;
};

/**
 * The **`RTCEncodedVideoFrame`** of the WebRTC API represents an encoded video frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame)
 */
interface RTCEncodedVideoFrame {
    /**
     * Type: ArrayBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/data)
     */
    data: ArrayBuffer;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/timestamp) */
    readonly timestamp: number;
    /**
     * Type: RTCEncodedVideoFrameType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/type)
     */
    readonly type: RTCEncodedVideoFrameType;
    /**
     * Type: RTCEncodedVideoFrameMetadata
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCEncodedVideoFrame/getMetadata)
     */
    getMetadata(): RTCEncodedVideoFrameMetadata;
}

declare var RTCEncodedVideoFrame: {
    prototype: RTCEncodedVideoFrame;
    new(): RTCEncodedVideoFrame;
};

/**
 * The **`RTCError`** interface describes an error which has occurred while handling WebRTC operations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError)
 */
interface RTCError extends DOMException {
    /**
     * Type: RTCErrorDetailType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/errorDetail)
     */
    readonly errorDetail: RTCErrorDetailType;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/receivedAlert)
     */
    readonly receivedAlert: number | null;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sctpCauseCode)
     */
    readonly sctpCauseCode: number | null;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sdpLineNumber)
     */
    readonly sdpLineNumber: number | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCError/sentAlert)
     */
    readonly sentAlert: number | null;
}

declare var RTCError: {
    prototype: RTCError;
    new(init: RTCErrorInit, message?: string): RTCError;
};

/**
 * The WebRTC API's **`RTCErrorEvent`** interface represents an error sent to a WebRTC object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent)
 */
interface RTCErrorEvent extends Event {
    /**
     * Type: RTCError
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCErrorEvent/error)
     */
    readonly error: RTCError;
}

declare var RTCErrorEvent: {
    prototype: RTCErrorEvent;
    new(type: string, eventInitDict: RTCErrorEventInit): RTCErrorEvent;
};

/**
 * The **`RTCIceCandidate`** interface—part of the WebRTC API—represents a candidate Interactive Connectivity Establishment (ICE) configuration which may be used to establish an RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate)
 */
interface RTCIceCandidate {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/address)
     */
    readonly address: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/candidate)
     */
    readonly candidate: string;
    /**
     * Type: RTCIceComponent
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/component)
     */
    readonly component: RTCIceComponent | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/foundation)
     */
    readonly foundation: string | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/port)
     */
    readonly port: number | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/priority)
     */
    readonly priority: number | null;
    /**
     * Type: RTCIceProtocol
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/protocol)
     */
    readonly protocol: RTCIceProtocol | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedAddress)
     */
    readonly relatedAddress: string | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/relatedPort)
     */
    readonly relatedPort: number | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMLineIndex)
     */
    readonly sdpMLineIndex: number | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/sdpMid)
     */
    readonly sdpMid: string | null;
    /**
     * Type: RTCIceTcpCandidateType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/tcpType)
     */
    readonly tcpType: RTCIceTcpCandidateType | null;
    /**
     * Type: RTCIceCandidateType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/type)
     */
    readonly type: RTCIceCandidateType | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/usernameFragment)
     */
    readonly usernameFragment: string | null;
    /**
     * Type: RTCIceCandidateInit
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceCandidate/toJSON)
     */
    toJSON(): RTCIceCandidateInit;
}

declare var RTCIceCandidate: {
    prototype: RTCIceCandidate;
    new(candidateInitDict?: RTCLocalIceCandidateInit): RTCIceCandidate;
};

/** The **`RTCIceCandidatePair`** dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints. */
interface RTCIceCandidatePair {
    /** Type: RTCIceCandidate */
    local: RTCIceCandidate;
    /** Type: RTCIceCandidate */
    remote: RTCIceCandidate;
}

interface RTCIceTransportEventMap {
    "gatheringstatechange": Event;
    "selectedcandidatepairchange": Event;
    "statechange": Event;
}

/**
 * The **`RTCIceTransport`** interface provides access to information about the ICE transport layer over which the data is being sent and received.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport)
 */
interface RTCIceTransport extends EventTarget {
    /**
     * Type: RTCIceGathererState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringState)
     */
    readonly gatheringState: RTCIceGathererState;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/gatheringstatechange_event)
     */
    ongatheringstatechange: ((this: RTCIceTransport, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/selectedcandidatepairchange_event)
     */
    onselectedcandidatepairchange: ((this: RTCIceTransport, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/statechange_event)
     */
    onstatechange: ((this: RTCIceTransport, ev: Event) => any) | null;
    /**
     * Type: RTCIceTransportState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/state)
     */
    readonly state: RTCIceTransportState;
    /**
     * Type: RTCIceCandidatePair
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCIceTransport/getSelectedCandidatePair)
     */
    getSelectedCandidatePair(): RTCIceCandidatePair | null;
    addEventListener<K extends keyof RTCIceTransportEventMap>(type: K, listener: (this: RTCIceTransport, ev: RTCIceTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RTCIceTransportEventMap>(type: K, listener: (this: RTCIceTransport, ev: RTCIceTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RTCIceTransport: {
    prototype: RTCIceTransport;
    new(): RTCIceTransport;
};

interface RTCPeerConnectionEventMap {
    "connectionstatechange": Event;
    "datachannel": RTCDataChannelEvent;
    "icecandidate": RTCPeerConnectionIceEvent;
    "icecandidateerror": RTCPeerConnectionIceErrorEvent;
    "iceconnectionstatechange": Event;
    "icegatheringstatechange": Event;
    "negotiationneeded": Event;
    "signalingstatechange": Event;
    "track": RTCTrackEvent;
}

/**
 * The **`RTCPeerConnection`** interface represents a WebRTC connection between the local computer and a remote peer.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection)
 */
interface RTCPeerConnection extends EventTarget {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/canTrickleIceCandidates)
     */
    readonly canTrickleIceCandidates: boolean | null;
    /**
     * Type: RTCPeerConnectionState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionState)
     */
    readonly connectionState: RTCPeerConnectionState;
    /**
     * Type: RTCSessionDescription
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentLocalDescription)
     */
    readonly currentLocalDescription: RTCSessionDescription | null;
    /**
     * Type: RTCSessionDescription
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/currentRemoteDescription)
     */
    readonly currentRemoteDescription: RTCSessionDescription | null;
    /**
     * Type: RTCIceConnectionState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceConnectionState)
     */
    readonly iceConnectionState: RTCIceConnectionState;
    /**
     * Type: RTCIceGatheringState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceGatheringState)
     */
    readonly iceGatheringState: RTCIceGatheringState;
    /**
     * Type: RTCSessionDescription
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/localDescription)
     */
    readonly localDescription: RTCSessionDescription | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/connectionstatechange_event)
     */
    onconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/datachannel_event)
     */
    ondatachannel: ((this: RTCPeerConnection, ev: RTCDataChannelEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidate_event)
     */
    onicecandidate: ((this: RTCPeerConnection, ev: RTCPeerConnectionIceEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icecandidateerror_event)
     */
    onicecandidateerror: ((this: RTCPeerConnection, ev: RTCPeerConnectionIceErrorEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/iceconnectionstatechange_event)
     */
    oniceconnectionstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/icegatheringstatechange_event)
     */
    onicegatheringstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/negotiationneeded_event)
     */
    onnegotiationneeded: ((this: RTCPeerConnection, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingstatechange_event)
     */
    onsignalingstatechange: ((this: RTCPeerConnection, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/track_event)
     */
    ontrack: ((this: RTCPeerConnection, ev: RTCTrackEvent) => any) | null;
    /**
     * Type: RTCSessionDescription
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingLocalDescription)
     */
    readonly pendingLocalDescription: RTCSessionDescription | null;
    /**
     * Type: RTCSessionDescription
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/pendingRemoteDescription)
     */
    readonly pendingRemoteDescription: RTCSessionDescription | null;
    /**
     * Type: RTCSessionDescription
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/remoteDescription)
     */
    readonly remoteDescription: RTCSessionDescription | null;
    /**
     * Type: RTCSctpTransport
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/sctp)
     */
    readonly sctp: RTCSctpTransport | null;
    /**
     * Type: RTCSignalingState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/signalingState)
     */
    readonly signalingState: RTCSignalingState;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addIceCandidate)
     */
    addIceCandidate(candidate?: RTCIceCandidateInit | null): Promise<void>;
    /** @deprecated */
    addIceCandidate(candidate: RTCIceCandidateInit | null, successCallback: VoidFunction, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    /**
     * Type: RTCRtpSender
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTrack)
     */
    addTrack(track: MediaStreamTrack, ...streams: MediaStream[]): RTCRtpSender;
    /**
     * Type: RTCRtpTransceiver
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/addTransceiver)
     */
    addTransceiver(trackOrKind: MediaStreamTrack | string, init?: RTCRtpTransceiverInit): RTCRtpTransceiver;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/close)
     */
    close(): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createAnswer)
     */
    createAnswer(options?: RTCAnswerOptions): Promise<RTCSessionDescriptionInit>;
    /** @deprecated */
    createAnswer(successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    /**
     * Type: RTCDataChannel
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createDataChannel)
     */
    createDataChannel(label: string, dataChannelDict?: RTCDataChannelInit): RTCDataChannel;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/createOffer)
     */
    createOffer(options?: RTCOfferOptions): Promise<RTCSessionDescriptionInit>;
    /** @deprecated */
    createOffer(successCallback: RTCSessionDescriptionCallback, failureCallback: RTCPeerConnectionErrorCallback, options?: RTCOfferOptions): Promise<void>;
    /**
     * Type: RTCConfiguration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getConfiguration)
     */
    getConfiguration(): RTCConfiguration;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getReceivers)
     */
    getReceivers(): RTCRtpReceiver[];
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getSenders)
     */
    getSenders(): RTCRtpSender[];
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getStats)
     */
    getStats(selector?: MediaStreamTrack | null): Promise<RTCStatsReport>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/getTransceivers)
     */
    getTransceivers(): RTCRtpTransceiver[];
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/removeTrack)
     */
    removeTrack(sender: RTCRtpSender): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/restartIce)
     */
    restartIce(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setConfiguration)
     */
    setConfiguration(configuration?: RTCConfiguration): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setLocalDescription)
     */
    setLocalDescription(description?: RTCLocalSessionDescriptionInit): Promise<void>;
    /** @deprecated */
    setLocalDescription(description: RTCLocalSessionDescriptionInit, successCallback: VoidFunction, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/setRemoteDescription)
     */
    setRemoteDescription(description: RTCSessionDescriptionInit): Promise<void>;
    /** @deprecated */
    setRemoteDescription(description: RTCSessionDescriptionInit, successCallback: VoidFunction, failureCallback: RTCPeerConnectionErrorCallback): Promise<void>;
    addEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RTCPeerConnectionEventMap>(type: K, listener: (this: RTCPeerConnection, ev: RTCPeerConnectionEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RTCPeerConnection: {
    prototype: RTCPeerConnection;
    new(configuration?: RTCConfiguration): RTCPeerConnection;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnection/generateCertificate_static)
     */
    generateCertificate(keygenAlgorithm: AlgorithmIdentifier): Promise<RTCCertificate>;
};

/**
 * The **`RTCPeerConnectionIceErrorEvent`** interface—based upon the Event interface—provides details pertaining to an ICE error announced by sending an RTCPeerConnection.icecandidateerror_event event to the RTCPeerConnection object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent)
 */
interface RTCPeerConnectionIceErrorEvent extends Event {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceErrorEvent/address)
     */
    readonly address: string | null;
    /** Type: unsigned short */
    readonly errorCode: number;
    /** Type: USVString */
    readonly errorText: string;
    /** Type: unsigned short */
    readonly port: number | null;
    /** Type: USVString */
    readonly url: string;
}

declare var RTCPeerConnectionIceErrorEvent: {
    prototype: RTCPeerConnectionIceErrorEvent;
    new(type: string, eventInitDict: RTCPeerConnectionIceErrorEventInit): RTCPeerConnectionIceErrorEvent;
};

/**
 * The **`RTCPeerConnectionIceEvent`** interface represents events that occur in relation to ICE candidates with the target, usually an RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent)
 */
interface RTCPeerConnectionIceEvent extends Event {
    /**
     * Type: RTCIceCandidate
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCPeerConnectionIceEvent/candidate)
     */
    readonly candidate: RTCIceCandidate | null;
}

declare var RTCPeerConnectionIceEvent: {
    prototype: RTCPeerConnectionIceEvent;
    new(type: string, eventInitDict?: RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent;
};

/**
 * The **`RTCRtpReceiver`** interface of the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver)
 */
interface RTCRtpReceiver {
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/jitterBufferTarget)
     */
    jitterBufferTarget: DOMHighResTimeStamp | null;
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/track)
     */
    readonly track: MediaStreamTrack;
    /**
     * Type: RTCRtpTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transform)
     */
    transform: RTCRtpTransform | null;
    /**
     * Type: RTCDtlsTransport
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/transport)
     */
    readonly transport: RTCDtlsTransport | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getContributingSources)
     */
    getContributingSources(): RTCRtpContributingSource[];
    /**
     * Type: RTCRtpReceiveParameters
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getParameters)
     */
    getParameters(): RTCRtpReceiveParameters;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getStats)
     */
    getStats(): Promise<RTCStatsReport>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getSynchronizationSources)
     */
    getSynchronizationSources(): RTCRtpSynchronizationSource[];
}

declare var RTCRtpReceiver: {
    prototype: RTCRtpReceiver;
    new(): RTCRtpReceiver;
    /**
     * Type: RTCRtpCapabilities
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpReceiver/getCapabilities_static)
     */
    getCapabilities(kind: string): RTCRtpCapabilities | null;
};

/**
 * The **`RTCRtpScriptTransform`** interface of the WebRTC API is used to insert a WebRTC Encoded Transform (a TransformStream running in a worker thread) into the WebRTC sender and receiver pipelines.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpScriptTransform)
 */
interface RTCRtpScriptTransform {
}

declare var RTCRtpScriptTransform: {
    prototype: RTCRtpScriptTransform;
    new(worker: Worker, options?: any, transfer?: any[]): RTCRtpScriptTransform;
};

/**
 * The **`RTCRtpSender`** interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender)
 */
interface RTCRtpSender {
    /**
     * Type: RTCDTMFSender
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/dtmf)
     */
    readonly dtmf: RTCDTMFSender | null;
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/track)
     */
    readonly track: MediaStreamTrack | null;
    /**
     * Type: RTCRtpTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transform)
     */
    transform: RTCRtpTransform | null;
    /**
     * Type: RTCDtlsTransport
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/transport)
     */
    readonly transport: RTCDtlsTransport | null;
    /**
     * Type: RTCRtpSendParameters
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getParameters)
     */
    getParameters(): RTCRtpSendParameters;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getStats)
     */
    getStats(): Promise<RTCStatsReport>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/replaceTrack)
     */
    replaceTrack(withTrack: MediaStreamTrack | null): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setParameters)
     */
    setParameters(parameters: RTCRtpSendParameters, setParameterOptions?: RTCSetParameterOptions): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/setStreams)
     */
    setStreams(...streams: MediaStream[]): void;
}

declare var RTCRtpSender: {
    prototype: RTCRtpSender;
    new(): RTCRtpSender;
    /**
     * Type: RTCRtpCapabilities
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpSender/getCapabilities_static)
     */
    getCapabilities(kind: string): RTCRtpCapabilities | null;
};

/**
 * The WebRTC interface **`RTCRtpTransceiver`** describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver)
 */
interface RTCRtpTransceiver {
    /**
     * Type: RTCRtpTransceiverDirection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/currentDirection)
     */
    readonly currentDirection: RTCRtpTransceiverDirection | null;
    /**
     * Type: RTCRtpTransceiverDirection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/direction)
     */
    direction: RTCRtpTransceiverDirection;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/mid)
     */
    readonly mid: string | null;
    /**
     * Type: RTCRtpReceiver
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/receiver)
     */
    readonly receiver: RTCRtpReceiver;
    /**
     * Type: RTCRtpSender
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/sender)
     */
    readonly sender: RTCRtpSender;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/setCodecPreferences)
     */
    setCodecPreferences(codecs: RTCRtpCodec[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCRtpTransceiver/stop)
     */
    stop(): void;
}

declare var RTCRtpTransceiver: {
    prototype: RTCRtpTransceiver;
    new(): RTCRtpTransceiver;
};

interface RTCSctpTransportEventMap {
    "statechange": Event;
}

/**
 * The **`RTCSctpTransport`** interface provides information which describes a Stream Control Transmission Protocol (**SCTP**) transport.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport)
 */
interface RTCSctpTransport extends EventTarget {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxChannels)
     */
    readonly maxChannels: number | null;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/maxMessageSize)
     */
    readonly maxMessageSize: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/statechange_event)
     */
    onstatechange: ((this: RTCSctpTransport, ev: Event) => any) | null;
    /**
     * Type: RTCSctpTransportState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/state)
     */
    readonly state: RTCSctpTransportState;
    /**
     * Type: RTCDtlsTransport
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSctpTransport/transport)
     */
    readonly transport: RTCDtlsTransport;
    addEventListener<K extends keyof RTCSctpTransportEventMap>(type: K, listener: (this: RTCSctpTransport, ev: RTCSctpTransportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RTCSctpTransportEventMap>(type: K, listener: (this: RTCSctpTransport, ev: RTCSctpTransportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RTCSctpTransport: {
    prototype: RTCSctpTransport;
    new(): RTCSctpTransport;
};

/**
 * The **`RTCSessionDescription`** interface describes one end of a connection—or potential connection—and how it's configured.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription)
 */
interface RTCSessionDescription {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/sdp)
     */
    readonly sdp: string;
    /**
     * Type: RTCSdpType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/type)
     */
    readonly type: RTCSdpType;
    /**
     * Type: RTCSessionDescriptionInit
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCSessionDescription/toJSON)
     */
    toJSON(): RTCSessionDescriptionInit;
}

declare var RTCSessionDescription: {
    prototype: RTCSessionDescription;
    new(descriptionInitDict: RTCSessionDescriptionInit): RTCSessionDescription;
};

/**
 * The **`RTCStatsReport`** interface of the WebRTC API provides a statistics report for a RTCPeerConnection, RTCRtpSender, or RTCRtpReceiver.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCStatsReport)
 */
interface RTCStatsReport {
    forEach(callbackfn: (value: any, key: string, parent: RTCStatsReport) => void, thisArg?: any): void;
}

declare var RTCStatsReport: {
    prototype: RTCStatsReport;
    new(): RTCStatsReport;
};

/**
 * The WebRTC API interface **`RTCTrackEvent`** represents the RTCPeerConnection.track_event event, which is sent when a new MediaStreamTrack is added to an RTCRtpReceiver which is part of the RTCPeerConnection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent)
 */
interface RTCTrackEvent extends Event {
    /**
     * Type: RTCRtpReceiver
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/receiver)
     */
    readonly receiver: RTCRtpReceiver;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/streams)
     */
    readonly streams: ReadonlyArray<MediaStream>;
    /**
     * Type: MediaStreamTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/track)
     */
    readonly track: MediaStreamTrack;
    /**
     * Type: RTCRtpTransceiver
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RTCTrackEvent/transceiver)
     */
    readonly transceiver: RTCRtpTransceiver;
}

declare var RTCTrackEvent: {
    prototype: RTCTrackEvent;
    new(type: string, eventInitDict: RTCTrackEventInit): RTCTrackEvent;
};

/**
 * The **`RadioNodeList`** interface represents a collection of elements in a form returned by a call to HTMLFormControlsCollection.namedItem().
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList)
 */
interface RadioNodeList extends NodeList {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RadioNodeList/value)
     */
    value: string;
}

declare var RadioNodeList: {
    prototype: RadioNodeList;
    new(): RadioNodeList;
};

/**
 * The **`Range`** interface represents a fragment of a document that can contain nodes and parts of text nodes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range)
 */
interface Range extends AbstractRange {
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/commonAncestorContainer)
     */
    readonly commonAncestorContainer: Node;
    /**
     * Type: DocumentFragment
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/cloneContents)
     */
    cloneContents(): DocumentFragment;
    /**
     * Type: Range
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/cloneRange)
     */
    cloneRange(): Range;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/collapse)
     */
    collapse(toStart?: boolean): void;
    /**
     * Type: short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/compareBoundaryPoints)
     */
    compareBoundaryPoints(how: number, sourceRange: Range): number;
    /**
     * Type: short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/comparePoint)
     */
    comparePoint(node: Node, offset: number): number;
    /**
     * Type: DocumentFragment
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/createContextualFragment)
     */
    createContextualFragment(string: string): DocumentFragment;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/deleteContents)
     */
    deleteContents(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/detach)
     */
    detach(): void;
    /**
     * Type: DocumentFragment
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/extractContents)
     */
    extractContents(): DocumentFragment;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/getBoundingClientRect)
     */
    getBoundingClientRect(): DOMRect;
    /**
     * Type: DOMRectList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/getClientRects)
     */
    getClientRects(): DOMRectList;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/insertNode)
     */
    insertNode(node: Node): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/intersectsNode)
     */
    intersectsNode(node: Node): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/isPointInRange)
     */
    isPointInRange(node: Node, offset: number): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/selectNode)
     */
    selectNode(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/selectNodeContents)
     */
    selectNodeContents(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEnd)
     */
    setEnd(node: Node, offset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEndAfter)
     */
    setEndAfter(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setEndBefore)
     */
    setEndBefore(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setStart)
     */
    setStart(node: Node, offset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setStartAfter)
     */
    setStartAfter(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/setStartBefore)
     */
    setStartBefore(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Range/surroundContents)
     */
    surroundContents(newParent: Node): void;
    toString(): string;
    /** Type: unsigned short */
    readonly START_TO_START: 0;
    /** Type: unsigned short */
    readonly START_TO_END: 1;
    /** Type: unsigned short */
    readonly END_TO_END: 2;
    /** Type: unsigned short */
    readonly END_TO_START: 3;
}

declare var Range: {
    prototype: Range;
    new(): Range;
    /** Type: unsigned short */
    readonly START_TO_START: 0;
    /** Type: unsigned short */
    readonly START_TO_END: 1;
    /** Type: unsigned short */
    readonly END_TO_END: 2;
    /** Type: unsigned short */
    readonly END_TO_START: 3;
};

/**
 * The **`ReadableByteStreamController`** interface of the Streams API represents a controller for a readable byte stream.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController)
 */
interface ReadableByteStreamController {
    /**
     * Type: ReadableStreamBYOBRequest
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/byobRequest)
     */
    readonly byobRequest: ReadableStreamBYOBRequest | null;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/desiredSize)
     */
    readonly desiredSize: number | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/enqueue)
     */
    enqueue(chunk: ArrayBufferView<ArrayBuffer>): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableByteStreamController/error)
     */
    error(e?: any): void;
}

declare var ReadableByteStreamController: {
    prototype: ReadableByteStreamController;
    new(): ReadableByteStreamController;
};

/**
 * The `ReadableStream` interface of the Streams API represents a readable stream of byte data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream)
 */
interface ReadableStream<R = any> {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/locked)
     */
    readonly locked: boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/cancel)
     */
    cancel(reason?: any): Promise<void>;
    /**
     * Type: ReadableStreamReader
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/getReader)
     */
    getReader(options: { mode: "byob" }): ReadableStreamBYOBReader;
    getReader(): ReadableStreamDefaultReader<R>;
    getReader(options?: ReadableStreamGetReaderOptions): ReadableStreamReader<R>;
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeThrough)
     */
    pipeThrough<T>(transform: ReadableWritablePair<T, R>, options?: StreamPipeOptions): ReadableStream<T>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/pipeTo)
     */
    pipeTo(destination: WritableStream<R>, options?: StreamPipeOptions): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStream/tee)
     */
    tee(): [ReadableStream<R>, ReadableStream<R>];
}

declare var ReadableStream: {
    prototype: ReadableStream;
    new(underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number }): ReadableStream<Uint8Array<ArrayBuffer>>;
    new<R = any>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;
    new<R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;
};

/**
 * The `ReadableStreamBYOBReader` interface of the Streams API defines a reader for a ReadableStream that supports zero-copy reading from an underlying byte source.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader)
 */
interface ReadableStreamBYOBReader extends ReadableStreamGenericReader {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/read)
     */
    read<T extends ArrayBufferView>(view: T): Promise<ReadableStreamReadResult<T>>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/releaseLock)
     */
    releaseLock(): void;
}

declare var ReadableStreamBYOBReader: {
    prototype: ReadableStreamBYOBReader;
    new(stream: ReadableStream<Uint8Array<ArrayBuffer>>): ReadableStreamBYOBReader;
};

/**
 * The **`ReadableStreamBYOBRequest`** interface of the Streams API represents a 'pull request' for data from an underlying source that will made as a zero-copy transfer to a consumer (bypassing the stream's internal queues).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest)
 */
interface ReadableStreamBYOBRequest {
    /**
     * Type: ArrayBufferView
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/view)
     */
    readonly view: ArrayBufferView<ArrayBuffer> | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respond)
     */
    respond(bytesWritten: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBRequest/respondWithNewView)
     */
    respondWithNewView(view: ArrayBufferView<ArrayBuffer>): void;
}

declare var ReadableStreamBYOBRequest: {
    prototype: ReadableStreamBYOBRequest;
    new(): ReadableStreamBYOBRequest;
};

/**
 * The **`ReadableStreamDefaultController`** interface of the Streams API represents a controller allowing control of a ReadableStream's state and internal queue.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController)
 */
interface ReadableStreamDefaultController<R = any> {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/desiredSize)
     */
    readonly desiredSize: number | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/enqueue)
     */
    enqueue(chunk?: R): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultController/error)
     */
    error(e?: any): void;
}

declare var ReadableStreamDefaultController: {
    prototype: ReadableStreamDefaultController;
    new(): ReadableStreamDefaultController;
};

/**
 * The **`ReadableStreamDefaultReader`** interface of the Streams API represents a default reader that can be used to read stream data supplied from a network (such as a fetch request).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader)
 */
interface ReadableStreamDefaultReader<R = any> extends ReadableStreamGenericReader {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/read)
     */
    read(): Promise<ReadableStreamReadResult<R>>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamDefaultReader/releaseLock)
     */
    releaseLock(): void;
}

declare var ReadableStreamDefaultReader: {
    prototype: ReadableStreamDefaultReader;
    new<R = any>(stream: ReadableStream<R>): ReadableStreamDefaultReader<R>;
};

interface ReadableStreamGenericReader {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/closed)
     */
    readonly closed: Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReadableStreamBYOBReader/cancel)
     */
    cancel(reason?: any): Promise<void>;
}

interface RemotePlaybackEventMap {
    "connect": Event;
    "connecting": Event;
    "disconnect": Event;
}

/**
 * The **`RemotePlayback`** interface of the Remote Playback API allows the page to detect availability of remote playback devices, then connect to and control playing on these devices.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback)
 */
interface RemotePlayback extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connect_event)
     */
    onconnect: ((this: RemotePlayback, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/connecting_event)
     */
    onconnecting: ((this: RemotePlayback, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/disconnect_event)
     */
    ondisconnect: ((this: RemotePlayback, ev: Event) => any) | null;
    /**
     * Type: RemotePlaybackState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/state)
     */
    readonly state: RemotePlaybackState;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/cancelWatchAvailability)
     */
    cancelWatchAvailability(id?: number): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/prompt)
     */
    prompt(): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/RemotePlayback/watchAvailability)
     */
    watchAvailability(callback: RemotePlaybackAvailabilityCallback): Promise<number>;
    addEventListener<K extends keyof RemotePlaybackEventMap>(type: K, listener: (this: RemotePlayback, ev: RemotePlaybackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof RemotePlaybackEventMap>(type: K, listener: (this: RemotePlayback, ev: RemotePlaybackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var RemotePlayback: {
    prototype: RemotePlayback;
    new(): RemotePlayback;
};

/**
 * The `Report` interface of the Reporting API represents a single report.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report)
 */
interface Report {
    /**
     * Type: ReportBody
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/body)
     */
    readonly body: ReportBody | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/type)
     */
    readonly type: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Report/url)
     */
    readonly url: string;
    /** Type: object */
    toJSON(): any;
}

declare var Report: {
    prototype: Report;
    new(): Report;
};

/**
 * The **`ReportBody`** interface of the Reporting API represents the body of a report.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody)
 */
interface ReportBody {
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportBody/toJSON)
     */
    toJSON(): any;
}

declare var ReportBody: {
    prototype: ReportBody;
    new(): ReportBody;
};

/**
 * The `ReportingObserver` interface of the Reporting API allows you to collect and access reports.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver)
 */
interface ReportingObserver {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/disconnect)
     */
    disconnect(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/observe)
     */
    observe(): void;
    /**
     * Type: ReportList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ReportingObserver/takeRecords)
     */
    takeRecords(): ReportList;
}

declare var ReportingObserver: {
    prototype: ReportingObserver;
    new(callback: ReportingObserverCallback, options?: ReportingObserverOptions): ReportingObserver;
};

/**
 * The **`Request`** interface of the Fetch API represents a resource request.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request)
 */
interface Request extends Body {
    /**
     * Type: RequestCache
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/cache)
     */
    readonly cache: RequestCache;
    /**
     * Type: RequestCredentials
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/credentials)
     */
    readonly credentials: RequestCredentials;
    /**
     * Type: RequestDestination
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/destination)
     */
    readonly destination: RequestDestination;
    /**
     * Type: Headers
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/headers)
     */
    readonly headers: Headers;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/integrity)
     */
    readonly integrity: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/keepalive)
     */
    readonly keepalive: boolean;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/method)
     */
    readonly method: string;
    /**
     * Type: RequestMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/mode)
     */
    readonly mode: RequestMode;
    /**
     * Type: RequestRedirect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/redirect)
     */
    readonly redirect: RequestRedirect;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrer)
     */
    readonly referrer: string;
    /**
     * Type: ReferrerPolicy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/referrerPolicy)
     */
    readonly referrerPolicy: ReferrerPolicy;
    /**
     * Type: AbortSignal
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/signal)
     */
    readonly signal: AbortSignal;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/url)
     */
    readonly url: string;
    /**
     * Type: Request
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Request/clone)
     */
    clone(): Request;
}

declare var Request: {
    prototype: Request;
    new(input: RequestInfo | URL, init?: RequestInit): Request;
};

/**
 * The **`ResizeObserver`** interface reports changes to the dimensions of an Element's content or border box, or the bounding box of an SVGElement.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver)
 */
interface ResizeObserver {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/disconnect)
     */
    disconnect(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/observe)
     */
    observe(target: Element, options?: ResizeObserverOptions): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserver/unobserve)
     */
    unobserve(target: Element): void;
}

declare var ResizeObserver: {
    prototype: ResizeObserver;
    new(callback: ResizeObserverCallback): ResizeObserver;
};

/**
 * The **`ResizeObserverEntry`** interface represents the object passed to the ResizeObserver.ResizeObserver constructor's callback function, which allows you to access the new dimensions of the Element or SVGElement being observed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry)
 */
interface ResizeObserverEntry {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/borderBoxSize)
     */
    readonly borderBoxSize: ReadonlyArray<ResizeObserverSize>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentBoxSize)
     */
    readonly contentBoxSize: ReadonlyArray<ResizeObserverSize>;
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/contentRect)
     */
    readonly contentRect: DOMRectReadOnly;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/devicePixelContentBoxSize)
     */
    readonly devicePixelContentBoxSize: ReadonlyArray<ResizeObserverSize>;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverEntry/target)
     */
    readonly target: Element;
}

declare var ResizeObserverEntry: {
    prototype: ResizeObserverEntry;
    new(): ResizeObserverEntry;
};

/**
 * The **`ResizeObserverSize`** interface of the Resize Observer API is used by the ResizeObserverEntry interface to access the box sizing properties of the element being observed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize)
 */
interface ResizeObserverSize {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/blockSize)
     */
    readonly blockSize: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ResizeObserverSize/inlineSize)
     */
    readonly inlineSize: number;
}

declare var ResizeObserverSize: {
    prototype: ResizeObserverSize;
    new(): ResizeObserverSize;
};

/**
 * The **`Response`** interface of the Fetch API represents the response to a request.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response)
 */
interface Response extends Body {
    /**
     * Type: Headers
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/headers)
     */
    readonly headers: Headers;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/ok)
     */
    readonly ok: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirected)
     */
    readonly redirected: boolean;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/status)
     */
    readonly status: number;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/statusText)
     */
    readonly statusText: string;
    /**
     * Type: ResponseType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/type)
     */
    readonly type: ResponseType;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/url)
     */
    readonly url: string;
    /**
     * Type: Response
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/clone)
     */
    clone(): Response;
}

declare var Response: {
    prototype: Response;
    new(body?: BodyInit | null, init?: ResponseInit): Response;
    /**
     * Type: Response
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/error_static)
     */
    error(): Response;
    /**
     * Type: Response
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/json_static)
     */
    json(data: any, init?: ResponseInit): Response;
    /**
     * Type: Response
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Response/redirect_static)
     */
    redirect(url: string | URL, status?: number): Response;
};

/**
 * The **`SVGAElement`** interface provides access to the properties of an a element, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement)
 */
interface SVGAElement extends SVGGraphicsElement, SVGURIReference {
    /** Type: DOMString */
    rel: string;
    /** Type: DOMTokenList */
    get relList(): DOMTokenList;
    set relList(value: string);
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/target)
     */
    readonly target: SVGAnimatedString;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGAElement: {
    prototype: SVGAElement;
    new(): SVGAElement;
};

/**
 * The `SVGAngle` interface is used to represent a value that can be an &lt;angle&gt; or &lt;number&gt; value.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle)
 */
interface SVGAngle {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/unitType)
     */
    readonly unitType: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/value)
     */
    value: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/valueAsString)
     */
    valueAsString: string;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/valueInSpecifiedUnits)
     */
    valueInSpecifiedUnits: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/convertToSpecifiedUnits)
     */
    convertToSpecifiedUnits(unitType: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAngle/newValueSpecifiedUnits)
     */
    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_UNSPECIFIED: 1;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_DEG: 2;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_RAD: 3;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_GRAD: 4;
}

declare var SVGAngle: {
    prototype: SVGAngle;
    new(): SVGAngle;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_UNSPECIFIED: 1;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_DEG: 2;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_RAD: 3;
    /** Type: unsigned short */
    readonly SVG_ANGLETYPE_GRAD: 4;
};

/**
 * The **`SVGAnimateElement`** interface corresponds to the animate element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateElement)
 */
interface SVGAnimateElement extends SVGAnimationElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGAnimateElement: {
    prototype: SVGAnimateElement;
    new(): SVGAnimateElement;
};

/**
 * The **`SVGAnimateMotionElement`** interface corresponds to the animateMotion element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateMotionElement)
 */
interface SVGAnimateMotionElement extends SVGAnimationElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateMotionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateMotionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGAnimateMotionElement: {
    prototype: SVGAnimateMotionElement;
    new(): SVGAnimateMotionElement;
};

/**
 * The `SVGAnimateTransformElement` interface corresponds to the animateTransform element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimateTransformElement)
 */
interface SVGAnimateTransformElement extends SVGAnimationElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateTransformElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimateTransformElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGAnimateTransformElement: {
    prototype: SVGAnimateTransformElement;
    new(): SVGAnimateTransformElement;
};

/**
 * The `SVGAnimatedAngle` interface is used for attributes of basic type \<angle> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle)
 */
interface SVGAnimatedAngle {
    /**
     * Type: SVGAngle
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle/animVal)
     */
    readonly animVal: SVGAngle;
    /**
     * Type: SVGAngle
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedAngle/baseVal)
     */
    readonly baseVal: SVGAngle;
}

declare var SVGAnimatedAngle: {
    prototype: SVGAnimatedAngle;
    new(): SVGAnimatedAngle;
};

/**
 * The `SVGAnimatedBoolean` interface is used for attributes of type boolean which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean)
 */
interface SVGAnimatedBoolean {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean/animVal)
     */
    readonly animVal: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedBoolean/baseVal)
     */
    baseVal: boolean;
}

declare var SVGAnimatedBoolean: {
    prototype: SVGAnimatedBoolean;
    new(): SVGAnimatedBoolean;
};

/**
 * The **`SVGAnimatedEnumeration`** interface describes attribute values which are constants from a particular enumeration and which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration)
 */
interface SVGAnimatedEnumeration {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration/animVal)
     */
    readonly animVal: number;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedEnumeration/baseVal)
     */
    baseVal: number;
}

declare var SVGAnimatedEnumeration: {
    prototype: SVGAnimatedEnumeration;
    new(): SVGAnimatedEnumeration;
};

/**
 * The `SVGAnimatedInteger` interface is used for attributes of basic type \<integer> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger)
 */
interface SVGAnimatedInteger {
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger/animVal)
     */
    readonly animVal: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedInteger/baseVal)
     */
    baseVal: number;
}

declare var SVGAnimatedInteger: {
    prototype: SVGAnimatedInteger;
    new(): SVGAnimatedInteger;
};

/**
 * The **`SVGAnimatedLength`** interface represents attributes of type \<length> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength)
 */
interface SVGAnimatedLength {
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength/animVal)
     */
    readonly animVal: SVGLength;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLength/baseVal)
     */
    readonly baseVal: SVGLength;
}

declare var SVGAnimatedLength: {
    prototype: SVGAnimatedLength;
    new(): SVGAnimatedLength;
};

/**
 * The `SVGAnimatedLengthList` interface is used for attributes of type SVGLengthList which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList)
 */
interface SVGAnimatedLengthList {
    /**
     * Type: SVGLengthList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList/animVal)
     */
    readonly animVal: SVGLengthList;
    /**
     * Type: SVGLengthList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedLengthList/baseVal)
     */
    readonly baseVal: SVGLengthList;
}

declare var SVGAnimatedLengthList: {
    prototype: SVGAnimatedLengthList;
    new(): SVGAnimatedLengthList;
};

/**
 * The **`SVGAnimatedNumber`** interface represents attributes of type \<number> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber)
 */
interface SVGAnimatedNumber {
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber/animVal)
     */
    readonly animVal: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumber/baseVal)
     */
    baseVal: number;
}

declare var SVGAnimatedNumber: {
    prototype: SVGAnimatedNumber;
    new(): SVGAnimatedNumber;
};

/**
 * The **`SVGAnimatedNumberList`** interface represents a list of attributes of type \<number> which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList)
 */
interface SVGAnimatedNumberList {
    /**
     * Type: SVGNumberList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList/animVal)
     */
    readonly animVal: SVGNumberList;
    /**
     * Type: SVGNumberList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedNumberList/baseVal)
     */
    readonly baseVal: SVGNumberList;
}

declare var SVGAnimatedNumberList: {
    prototype: SVGAnimatedNumberList;
    new(): SVGAnimatedNumberList;
};

interface SVGAnimatedPoints {
    /**
     * Type: SVGPointList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement/animatedPoints)
     */
    readonly animatedPoints: SVGPointList;
    /**
     * Type: SVGPointList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement/points)
     */
    readonly points: SVGPointList;
}

/**
 * The **`SVGAnimatedPreserveAspectRatio`** interface represents attributes of type SVGPreserveAspectRatio which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio)
 */
interface SVGAnimatedPreserveAspectRatio {
    /**
     * Type: SVGPreserveAspectRatio
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio/animVal)
     */
    readonly animVal: SVGPreserveAspectRatio;
    /**
     * Type: SVGPreserveAspectRatio
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedPreserveAspectRatio/baseVal)
     */
    readonly baseVal: SVGPreserveAspectRatio;
}

declare var SVGAnimatedPreserveAspectRatio: {
    prototype: SVGAnimatedPreserveAspectRatio;
    new(): SVGAnimatedPreserveAspectRatio;
};

/**
 * The `SVGAnimatedRect` interface is used for attributes of basic SVGRect which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect)
 */
interface SVGAnimatedRect {
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect/animVal)
     */
    readonly animVal: DOMRectReadOnly;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedRect/baseVal)
     */
    readonly baseVal: DOMRect;
}

declare var SVGAnimatedRect: {
    prototype: SVGAnimatedRect;
    new(): SVGAnimatedRect;
};

/**
 * The **`SVGAnimatedString`** interface represents string attributes which can be animated from each SVG declaration.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString)
 */
interface SVGAnimatedString {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/animVal)
     */
    readonly animVal: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedString/baseVal)
     */
    baseVal: string;
}

declare var SVGAnimatedString: {
    prototype: SVGAnimatedString;
    new(): SVGAnimatedString;
};

/**
 * The `SVGAnimatedTransformList` interface is used for attributes which take a list of numbers and which can be animated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList)
 */
interface SVGAnimatedTransformList {
    /**
     * Type: SVGTransformList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList/animVal)
     */
    readonly animVal: SVGTransformList;
    /**
     * Type: SVGTransformList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimatedTransformList/baseVal)
     */
    readonly baseVal: SVGTransformList;
}

declare var SVGAnimatedTransformList: {
    prototype: SVGAnimatedTransformList;
    new(): SVGAnimatedTransformList;
};

/**
 * The **`SVGAnimationElement`** interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement)
 */
interface SVGAnimationElement extends SVGElement, SVGTests {
    /**
     * Type: SVGElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/targetElement)
     */
    readonly targetElement: SVGElement | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/beginElement)
     */
    beginElement(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/beginElementAt)
     */
    beginElementAt(offset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/endElement)
     */
    endElement(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/endElementAt)
     */
    endElementAt(offset: number): void;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/getCurrentTime)
     */
    getCurrentTime(): number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/getSimpleDuration)
     */
    getSimpleDuration(): number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/getStartTime)
     */
    getStartTime(): number;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimationElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGAnimationElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGAnimationElement: {
    prototype: SVGAnimationElement;
    new(): SVGAnimationElement;
};

/**
 * The **`SVGCircleElement`** interface is an interface for the circle element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement)
 */
interface SVGCircleElement extends SVGGeometryElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cx)
     */
    readonly cx: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/cy)
     */
    readonly cy: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGCircleElement/r)
     */
    readonly r: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGCircleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGCircleElement: {
    prototype: SVGCircleElement;
    new(): SVGCircleElement;
};

/**
 * The **`SVGClipPathElement`** interface provides access to the properties of clipPath elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement)
 */
interface SVGClipPathElement extends SVGElement {
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/clipPathUnits)
     */
    readonly clipPathUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedTransformList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGClipPathElement/transform)
     */
    readonly transform: SVGAnimatedTransformList;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGClipPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGClipPathElement: {
    prototype: SVGClipPathElement;
    new(): SVGClipPathElement;
};

/**
 * The **`SVGComponentTransferFunctionElement`** interface defines a base interface used by the component transfer function interfaces.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement)
 */
interface SVGComponentTransferFunctionElement extends SVGElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/amplitude)
     */
    readonly amplitude: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/exponent)
     */
    readonly exponent: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/intercept)
     */
    readonly intercept: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/offset)
     */
    readonly offset: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/slope)
     */
    readonly slope: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumberList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/tableValues)
     */
    readonly tableValues: SVGAnimatedNumberList;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGComponentTransferFunctionElement/type)
     */
    readonly type: SVGAnimatedEnumeration;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGComponentTransferFunctionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGComponentTransferFunctionElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGComponentTransferFunctionElement: {
    prototype: SVGComponentTransferFunctionElement;
    new(): SVGComponentTransferFunctionElement;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: 1;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_TABLE: 2;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: 3;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: 4;
    /** Type: unsigned short */
    readonly SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: 5;
};

/**
 * The **`SVGDefsElement`** interface corresponds to the defs element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDefsElement)
 */
interface SVGDefsElement extends SVGGraphicsElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDefsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGDefsElement: {
    prototype: SVGDefsElement;
    new(): SVGDefsElement;
};

/**
 * The **`SVGDescElement`** interface corresponds to the desc element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGDescElement)
 */
interface SVGDescElement extends SVGElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGDescElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGDescElement: {
    prototype: SVGDescElement;
    new(): SVGDescElement;
};

interface SVGElementEventMap extends ElementEventMap, GlobalEventHandlersEventMap {
}

/**
 * All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the `SVGElement` interface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement)
 */
interface SVGElement extends Element, ElementCSSInlineStyle, GlobalEventHandlers, HTMLOrSVGElement {
    /**
     * Type: SVGAnimatedString
     * @deprecated
     */
    readonly className: any;
    /**
     * Type: SVGSVGElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/ownerSVGElement)
     */
    readonly ownerSVGElement: SVGSVGElement | null;
    /**
     * Type: SVGElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGElement/viewportElement)
     */
    readonly viewportElement: SVGElement | null;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGElement: {
    prototype: SVGElement;
    new(): SVGElement;
};

/**
 * The **`SVGEllipseElement`** interface provides access to the properties of ellipse elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement)
 */
interface SVGEllipseElement extends SVGGeometryElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/cx)
     */
    readonly cx: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/cy)
     */
    readonly cy: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/rx)
     */
    readonly rx: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGEllipseElement/ry)
     */
    readonly ry: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGEllipseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGEllipseElement: {
    prototype: SVGEllipseElement;
    new(): SVGEllipseElement;
};

/**
 * The **`SVGFEBlendElement`** interface corresponds to the feBlend element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement)
 */
interface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/in2)
     */
    readonly in2: SVGAnimatedString;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/mode)
     */
    readonly mode: SVGAnimatedEnumeration;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_NORMAL: 1;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_MULTIPLY: 2;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_SCREEN: 3;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_DARKEN: 4;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_LIGHTEN: 5;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_OVERLAY: 6;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_COLOR_BURN: 8;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_DIFFERENCE: 11;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_EXCLUSION: 12;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_HUE: 13;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_SATURATION: 14;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_COLOR: 15;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_LUMINOSITY: 16;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEBlendElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEBlendElement: {
    prototype: SVGFEBlendElement;
    new(): SVGFEBlendElement;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_NORMAL: 1;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_MULTIPLY: 2;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_SCREEN: 3;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_DARKEN: 4;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_LIGHTEN: 5;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_OVERLAY: 6;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_COLOR_DODGE: 7;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_COLOR_BURN: 8;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_HARD_LIGHT: 9;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_SOFT_LIGHT: 10;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_DIFFERENCE: 11;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_EXCLUSION: 12;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_HUE: 13;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_SATURATION: 14;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_COLOR: 15;
    /** Type: unsigned short */
    readonly SVG_FEBLEND_MODE_LUMINOSITY: 16;
};

/**
 * The **`SVGFEColorMatrixElement`** interface corresponds to the feColorMatrix element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement)
 */
interface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/type)
     */
    readonly type: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedNumberList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEColorMatrixElement/values)
     */
    readonly values: SVGAnimatedNumberList;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEColorMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEColorMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEColorMatrixElement: {
    prototype: SVGFEColorMatrixElement;
    new(): SVGFEColorMatrixElement;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_MATRIX: 1;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_SATURATE: 2;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_HUEROTATE: 3;
    /** Type: unsigned short */
    readonly SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: 4;
};

/**
 * The **`SVGFEComponentTransferElement`** interface corresponds to the feComponentTransfer element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement)
 */
interface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEComponentTransferElement/in1)
     */
    readonly in1: SVGAnimatedString;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEComponentTransferElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEComponentTransferElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEComponentTransferElement: {
    prototype: SVGFEComponentTransferElement;
    new(): SVGFEComponentTransferElement;
};

/**
 * The **`SVGFECompositeElement`** interface corresponds to the feComposite element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement)
 */
interface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/in2)
     */
    readonly in2: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k1)
     */
    readonly k1: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k2)
     */
    readonly k2: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k3)
     */
    readonly k3: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/k4)
     */
    readonly k4: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFECompositeElement/operator)
     */
    readonly operator: SVGAnimatedEnumeration;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_IN: 2;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFECompositeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFECompositeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFECompositeElement: {
    prototype: SVGFECompositeElement;
    new(): SVGFECompositeElement;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_OVER: 1;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_IN: 2;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_OUT: 3;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_ATOP: 4;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_XOR: 5;
    /** Type: unsigned short */
    readonly SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: 6;
};

/**
 * The **`SVGFEConvolveMatrixElement`** interface corresponds to the feConvolveMatrix element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement)
 */
interface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/bias)
     */
    readonly bias: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/divisor)
     */
    readonly divisor: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/edgeMode)
     */
    readonly edgeMode: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumberList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelMatrix)
     */
    readonly kernelMatrix: SVGAnimatedNumberList;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelUnitLengthX)
     */
    readonly kernelUnitLengthX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/kernelUnitLengthY)
     */
    readonly kernelUnitLengthY: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedInteger
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/orderX)
     */
    readonly orderX: SVGAnimatedInteger;
    /**
     * Type: SVGAnimatedInteger
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/orderY)
     */
    readonly orderY: SVGAnimatedInteger;
    /**
     * Type: SVGAnimatedBoolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/preserveAlpha)
     */
    readonly preserveAlpha: SVGAnimatedBoolean;
    /**
     * Type: SVGAnimatedInteger
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/targetX)
     */
    readonly targetX: SVGAnimatedInteger;
    /**
     * Type: SVGAnimatedInteger
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEConvolveMatrixElement/targetY)
     */
    readonly targetY: SVGAnimatedInteger;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_DUPLICATE: 1;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_WRAP: 2;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_NONE: 3;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEConvolveMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEConvolveMatrixElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEConvolveMatrixElement: {
    prototype: SVGFEConvolveMatrixElement;
    new(): SVGFEConvolveMatrixElement;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_DUPLICATE: 1;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_WRAP: 2;
    /** Type: unsigned short */
    readonly SVG_EDGEMODE_NONE: 3;
};

/**
 * The **`SVGFEDiffuseLightingElement`** interface corresponds to the feDiffuseLighting element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement)
 */
interface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/diffuseConstant)
     */
    readonly diffuseConstant: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/kernelUnitLengthX)
     */
    readonly kernelUnitLengthX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/kernelUnitLengthY)
     */
    readonly kernelUnitLengthY: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDiffuseLightingElement/surfaceScale)
     */
    readonly surfaceScale: SVGAnimatedNumber;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDiffuseLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDiffuseLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEDiffuseLightingElement: {
    prototype: SVGFEDiffuseLightingElement;
    new(): SVGFEDiffuseLightingElement;
};

/**
 * The **`SVGFEDisplacementMapElement`** interface corresponds to the feDisplacementMap element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement)
 */
interface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/in2)
     */
    readonly in2: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/scale)
     */
    readonly scale: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/xChannelSelector)
     */
    readonly xChannelSelector: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDisplacementMapElement/yChannelSelector)
     */
    readonly yChannelSelector: SVGAnimatedEnumeration;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_R: 1;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_G: 2;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_B: 3;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_A: 4;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDisplacementMapElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDisplacementMapElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEDisplacementMapElement: {
    prototype: SVGFEDisplacementMapElement;
    new(): SVGFEDisplacementMapElement;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_R: 1;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_G: 2;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_B: 3;
    /** Type: unsigned short */
    readonly SVG_CHANNEL_A: 4;
};

/**
 * The **`SVGFEDistantLightElement`** interface corresponds to the feDistantLight element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement)
 */
interface SVGFEDistantLightElement extends SVGElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement/azimuth)
     */
    readonly azimuth: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDistantLightElement/elevation)
     */
    readonly elevation: SVGAnimatedNumber;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDistantLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDistantLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEDistantLightElement: {
    prototype: SVGFEDistantLightElement;
    new(): SVGFEDistantLightElement;
};

/**
 * The **`SVGFEDropShadowElement`** interface corresponds to the feDropShadow element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement)
 */
interface SVGFEDropShadowElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/dx)
     */
    readonly dx: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/dy)
     */
    readonly dy: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/stdDeviationX)
     */
    readonly stdDeviationX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/stdDeviationY)
     */
    readonly stdDeviationY: SVGAnimatedNumber;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEDropShadowElement/setStdDeviation)
     */
    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDropShadowElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEDropShadowElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEDropShadowElement: {
    prototype: SVGFEDropShadowElement;
    new(): SVGFEDropShadowElement;
};

/**
 * The **`SVGFEFloodElement`** interface corresponds to the feFlood element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFloodElement)
 */
interface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFloodElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEFloodElement: {
    prototype: SVGFEFloodElement;
    new(): SVGFEFloodElement;
};

/**
 * The **`SVGFEFuncAElement`** interface corresponds to the feFuncA element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncAElement)
 */
interface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncAElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEFuncAElement: {
    prototype: SVGFEFuncAElement;
    new(): SVGFEFuncAElement;
};

/**
 * The **`SVGFEFuncBElement`** interface corresponds to the feFuncB element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncBElement)
 */
interface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncBElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEFuncBElement: {
    prototype: SVGFEFuncBElement;
    new(): SVGFEFuncBElement;
};

/**
 * The **`SVGFEFuncGElement`** interface corresponds to the feFuncG element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncGElement)
 */
interface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEFuncGElement: {
    prototype: SVGFEFuncGElement;
    new(): SVGFEFuncGElement;
};

/**
 * The **`SVGFEFuncRElement`** interface corresponds to the feFuncR element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEFuncRElement)
 */
interface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEFuncRElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEFuncRElement: {
    prototype: SVGFEFuncRElement;
    new(): SVGFEFuncRElement;
};

/**
 * The **`SVGFEGaussianBlurElement`** interface corresponds to the feGaussianBlur element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement)
 */
interface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/stdDeviationX)
     */
    readonly stdDeviationX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/stdDeviationY)
     */
    readonly stdDeviationY: SVGAnimatedNumber;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEGaussianBlurElement/setStdDeviation)
     */
    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEGaussianBlurElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEGaussianBlurElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEGaussianBlurElement: {
    prototype: SVGFEGaussianBlurElement;
    new(): SVGFEGaussianBlurElement;
};

/**
 * The **`SVGFEImageElement`** interface corresponds to the feImage element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement)
 */
interface SVGFEImageElement extends SVGElement, SVGFilterPrimitiveStandardAttributes, SVGURIReference {
    /**
     * Type: SVGAnimatedPreserveAspectRatio
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEImageElement/preserveAspectRatio)
     */
    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEImageElement: {
    prototype: SVGFEImageElement;
    new(): SVGFEImageElement;
};

/**
 * The **`SVGFEMergeElement`** interface corresponds to the feMerge element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeElement)
 */
interface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEMergeElement: {
    prototype: SVGFEMergeElement;
    new(): SVGFEMergeElement;
};

/**
 * The **`SVGFEMergeNodeElement`** interface corresponds to the feMergeNode element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement)
 */
interface SVGFEMergeNodeElement extends SVGElement {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMergeNodeElement/in1)
     */
    readonly in1: SVGAnimatedString;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeNodeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMergeNodeElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEMergeNodeElement: {
    prototype: SVGFEMergeNodeElement;
    new(): SVGFEMergeNodeElement;
};

/**
 * The **`SVGFEMorphologyElement`** interface corresponds to the feMorphology element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement)
 */
interface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/operator)
     */
    readonly operator: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/radiusX)
     */
    readonly radiusX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEMorphologyElement/radiusY)
     */
    readonly radiusY: SVGAnimatedNumber;
    /** Type: unsigned short */
    readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1;
    /** Type: unsigned short */
    readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMorphologyElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEMorphologyElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEMorphologyElement: {
    prototype: SVGFEMorphologyElement;
    new(): SVGFEMorphologyElement;
    /** Type: unsigned short */
    readonly SVG_MORPHOLOGY_OPERATOR_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MORPHOLOGY_OPERATOR_ERODE: 1;
    /** Type: unsigned short */
    readonly SVG_MORPHOLOGY_OPERATOR_DILATE: 2;
};

/**
 * The **`SVGFEOffsetElement`** interface corresponds to the feOffset element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement)
 */
interface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/dx)
     */
    readonly dx: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/dy)
     */
    readonly dy: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEOffsetElement/in1)
     */
    readonly in1: SVGAnimatedString;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEOffsetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEOffsetElement: {
    prototype: SVGFEOffsetElement;
    new(): SVGFEOffsetElement;
};

/**
 * The **`SVGFEPointLightElement`** interface corresponds to the fePointLight element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement)
 */
interface SVGFEPointLightElement extends SVGElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/x)
     */
    readonly x: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/y)
     */
    readonly y: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEPointLightElement/z)
     */
    readonly z: SVGAnimatedNumber;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEPointLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFEPointLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFEPointLightElement: {
    prototype: SVGFEPointLightElement;
    new(): SVGFEPointLightElement;
};

/**
 * The **`SVGFESpecularLightingElement`** interface corresponds to the feSpecularLighting element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement)
 */
interface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/in1)
     */
    readonly in1: SVGAnimatedString;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/kernelUnitLengthX)
     */
    readonly kernelUnitLengthX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/kernelUnitLengthY)
     */
    readonly kernelUnitLengthY: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/specularConstant)
     */
    readonly specularConstant: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/specularExponent)
     */
    readonly specularExponent: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpecularLightingElement/surfaceScale)
     */
    readonly surfaceScale: SVGAnimatedNumber;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpecularLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpecularLightingElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFESpecularLightingElement: {
    prototype: SVGFESpecularLightingElement;
    new(): SVGFESpecularLightingElement;
};

/**
 * The **`SVGFESpotLightElement`** interface corresponds to the feSpotLight element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement)
 */
interface SVGFESpotLightElement extends SVGElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/limitingConeAngle)
     */
    readonly limitingConeAngle: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtX)
     */
    readonly pointsAtX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtY)
     */
    readonly pointsAtY: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/pointsAtZ)
     */
    readonly pointsAtZ: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/specularExponent)
     */
    readonly specularExponent: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/x)
     */
    readonly x: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/y)
     */
    readonly y: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFESpotLightElement/z)
     */
    readonly z: SVGAnimatedNumber;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpotLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFESpotLightElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFESpotLightElement: {
    prototype: SVGFESpotLightElement;
    new(): SVGFESpotLightElement;
};

/**
 * The **`SVGFETileElement`** interface corresponds to the feTile element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement)
 */
interface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETileElement/in1)
     */
    readonly in1: SVGAnimatedString;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETileElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFETileElement: {
    prototype: SVGFETileElement;
    new(): SVGFETileElement;
};

/**
 * The **`SVGFETurbulenceElement`** interface corresponds to the feTurbulence element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement)
 */
interface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/baseFrequencyX)
     */
    readonly baseFrequencyX: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/baseFrequencyY)
     */
    readonly baseFrequencyY: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedInteger
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/numOctaves)
     */
    readonly numOctaves: SVGAnimatedInteger;
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/seed)
     */
    readonly seed: SVGAnimatedNumber;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/stitchTiles)
     */
    readonly stitchTiles: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFETurbulenceElement/type)
     */
    readonly type: SVGAnimatedEnumeration;
    /** Type: unsigned short */
    readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1;
    /** Type: unsigned short */
    readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2;
    /** Type: unsigned short */
    readonly SVG_STITCHTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_STITCHTYPE_STITCH: 1;
    /** Type: unsigned short */
    readonly SVG_STITCHTYPE_NOSTITCH: 2;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETurbulenceElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFETurbulenceElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFETurbulenceElement: {
    prototype: SVGFETurbulenceElement;
    new(): SVGFETurbulenceElement;
    /** Type: unsigned short */
    readonly SVG_TURBULENCE_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_TURBULENCE_TYPE_FRACTALNOISE: 1;
    /** Type: unsigned short */
    readonly SVG_TURBULENCE_TYPE_TURBULENCE: 2;
    /** Type: unsigned short */
    readonly SVG_STITCHTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_STITCHTYPE_STITCH: 1;
    /** Type: unsigned short */
    readonly SVG_STITCHTYPE_NOSTITCH: 2;
};

/**
 * The **`SVGFilterElement`** interface provides access to the properties of filter elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement)
 */
interface SVGFilterElement extends SVGElement, SVGURIReference {
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/filterUnits)
     */
    readonly filterUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/primitiveUnits)
     */
    readonly primitiveUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFilterElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGFilterElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGFilterElement: {
    prototype: SVGFilterElement;
    new(): SVGFilterElement;
};

interface SVGFilterPrimitiveStandardAttributes {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/result)
     */
    readonly result: SVGAnimatedString;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGFEBlendElement/y)
     */
    readonly y: SVGAnimatedLength;
}

interface SVGFitToViewBox {
    /**
     * Type: SVGAnimatedPreserveAspectRatio
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/preserveAspectRatio)
     */
    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
    /**
     * Type: SVGAnimatedRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/viewBox)
     */
    readonly viewBox: SVGAnimatedRect;
}

/**
 * The **`SVGForeignObjectElement`** interface provides access to the properties of foreignObject elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement)
 */
interface SVGForeignObjectElement extends SVGGraphicsElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGForeignObjectElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGForeignObjectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGForeignObjectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGForeignObjectElement: {
    prototype: SVGForeignObjectElement;
    new(): SVGForeignObjectElement;
};

/**
 * The **`SVGGElement`** interface corresponds to the g element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGElement)
 */
interface SVGGElement extends SVGGraphicsElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGGElement: {
    prototype: SVGGElement;
    new(): SVGGElement;
};

/**
 * The `SVGGeometryElement` interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement)
 */
interface SVGGeometryElement extends SVGGraphicsElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/pathLength)
     */
    readonly pathLength: SVGAnimatedNumber;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getPointAtLength)
     */
    getPointAtLength(distance: number): DOMPoint;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/getTotalLength)
     */
    getTotalLength(): number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInFill)
     */
    isPointInFill(point?: DOMPointInit): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGeometryElement/isPointInStroke)
     */
    isPointInStroke(point?: DOMPointInit): boolean;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGeometryElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGeometryElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGGeometryElement: {
    prototype: SVGGeometryElement;
    new(): SVGGeometryElement;
};

/**
 * The **`SVGGradient`** interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement)
 */
interface SVGGradientElement extends SVGElement, SVGURIReference {
    /**
     * Type: SVGAnimatedTransformList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/gradientTransform)
     */
    readonly gradientTransform: SVGAnimatedTransformList;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/gradientUnits)
     */
    readonly gradientUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGradientElement/spreadMethod)
     */
    readonly spreadMethod: SVGAnimatedEnumeration;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_PAD: 1;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_REFLECT: 2;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_REPEAT: 3;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGGradientElement: {
    prototype: SVGGradientElement;
    new(): SVGGradientElement;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_PAD: 1;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_REFLECT: 2;
    /** Type: unsigned short */
    readonly SVG_SPREADMETHOD_REPEAT: 3;
};

/**
 * The **`SVGGraphicsElement`** interface represents SVG elements whose primary purpose is to directly render graphics into a group.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement)
 */
interface SVGGraphicsElement extends SVGElement, SVGTests {
    /**
     * Type: SVGAnimatedTransformList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/transform)
     */
    readonly transform: SVGAnimatedTransformList;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/getBBox)
     */
    getBBox(options?: SVGBoundingBoxOptions): DOMRect;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/getCTM)
     */
    getCTM(): DOMMatrix | null;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGGraphicsElement/getScreenCTM)
     */
    getScreenCTM(): DOMMatrix | null;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGGraphicsElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGGraphicsElement: {
    prototype: SVGGraphicsElement;
    new(): SVGGraphicsElement;
};

/**
 * The **`SVGImageElement`** interface corresponds to the image element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement)
 */
interface SVGImageElement extends SVGGraphicsElement, SVGURIReference {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/crossOrigin)
     */
    crossOrigin: string | null;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedPreserveAspectRatio
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/preserveAspectRatio)
     */
    readonly preserveAspectRatio: SVGAnimatedPreserveAspectRatio;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGImageElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGImageElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGImageElement: {
    prototype: SVGImageElement;
    new(): SVGImageElement;
};

/**
 * The **`SVGLength`** interface correspond to the \<length> basic data type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength)
 */
interface SVGLength {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/unitType)
     */
    readonly unitType: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/value)
     */
    value: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/valueAsString)
     */
    valueAsString: string;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/valueInSpecifiedUnits)
     */
    valueInSpecifiedUnits: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/convertToSpecifiedUnits)
     */
    convertToSpecifiedUnits(unitType: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLength/newValueSpecifiedUnits)
     */
    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_NUMBER: 1;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PERCENTAGE: 2;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_EMS: 3;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_EXS: 4;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PX: 5;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_CM: 6;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_MM: 7;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_IN: 8;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PT: 9;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PC: 10;
}

declare var SVGLength: {
    prototype: SVGLength;
    new(): SVGLength;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_NUMBER: 1;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PERCENTAGE: 2;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_EMS: 3;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_EXS: 4;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PX: 5;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_CM: 6;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_MM: 7;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_IN: 8;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PT: 9;
    /** Type: unsigned short */
    readonly SVG_LENGTHTYPE_PC: 10;
};

/**
 * The **`SVGLengthList`** interface defines a list of SVGLength objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList)
 */
interface SVGLengthList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/length)
     */
    readonly length: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/numberOfItems)
     */
    readonly numberOfItems: number;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/appendItem)
     */
    appendItem(newItem: SVGLength): SVGLength;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/clear)
     */
    clear(): void;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/getItem)
     */
    getItem(index: number): SVGLength;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/initialize)
     */
    initialize(newItem: SVGLength): SVGLength;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/insertItemBefore)
     */
    insertItemBefore(newItem: SVGLength, index: number): SVGLength;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/removeItem)
     */
    removeItem(index: number): SVGLength;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLengthList/replaceItem)
     */
    replaceItem(newItem: SVGLength, index: number): SVGLength;
    [index: number]: SVGLength;
}

declare var SVGLengthList: {
    prototype: SVGLengthList;
    new(): SVGLengthList;
};

/**
 * The **`SVGLineElement`** interface provides access to the properties of line elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement)
 */
interface SVGLineElement extends SVGGeometryElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/x1)
     */
    readonly x1: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/x2)
     */
    readonly x2: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/y1)
     */
    readonly y1: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLineElement/y2)
     */
    readonly y2: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGLineElement: {
    prototype: SVGLineElement;
    new(): SVGLineElement;
};

/**
 * The **`SVGLinearGradientElement`** interface corresponds to the linearGradient element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement)
 */
interface SVGLinearGradientElement extends SVGGradientElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/x1)
     */
    readonly x1: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/x2)
     */
    readonly x2: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/y1)
     */
    readonly y1: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGLinearGradientElement/y2)
     */
    readonly y2: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLinearGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGLinearGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGLinearGradientElement: {
    prototype: SVGLinearGradientElement;
    new(): SVGLinearGradientElement;
};

/**
 * The **`SVGMPathElement`** interface corresponds to the mpath element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMPathElement)
 */
interface SVGMPathElement extends SVGElement, SVGURIReference {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGMPathElement: {
    prototype: SVGMPathElement;
    new(): SVGMPathElement;
};

/**
 * The **`SVGMarkerElement`** interface provides access to the properties of marker elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement)
 */
interface SVGMarkerElement extends SVGElement, SVGFitToViewBox {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerHeight)
     */
    readonly markerHeight: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerUnits)
     */
    readonly markerUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/markerWidth)
     */
    readonly markerWidth: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedAngle
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientAngle)
     */
    readonly orientAngle: SVGAnimatedAngle;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/orientType)
     */
    readonly orientType: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refX)
     */
    readonly refX: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/refY)
     */
    readonly refY: SVGAnimatedLength;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAngle)
     */
    setOrientToAngle(angle: SVGAngle): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMarkerElement/setOrientToAuto)
     */
    setOrientToAuto(): void;
    /** Type: unsigned short */
    readonly SVG_MARKERUNITS_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MARKERUNITS_USERSPACEONUSE: 1;
    /** Type: unsigned short */
    readonly SVG_MARKERUNITS_STROKEWIDTH: 2;
    /** Type: unsigned short */
    readonly SVG_MARKER_ORIENT_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MARKER_ORIENT_AUTO: 1;
    /** Type: unsigned short */
    readonly SVG_MARKER_ORIENT_ANGLE: 2;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMarkerElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGMarkerElement: {
    prototype: SVGMarkerElement;
    new(): SVGMarkerElement;
    /** Type: unsigned short */
    readonly SVG_MARKERUNITS_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MARKERUNITS_USERSPACEONUSE: 1;
    /** Type: unsigned short */
    readonly SVG_MARKERUNITS_STROKEWIDTH: 2;
    /** Type: unsigned short */
    readonly SVG_MARKER_ORIENT_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MARKER_ORIENT_AUTO: 1;
    /** Type: unsigned short */
    readonly SVG_MARKER_ORIENT_ANGLE: 2;
};

/**
 * The **`SVGMaskElement`** interface provides access to the properties of mask elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement)
 */
interface SVGMaskElement extends SVGElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskContentUnits)
     */
    readonly maskContentUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/maskUnits)
     */
    readonly maskUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMaskElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMaskElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGMaskElement: {
    prototype: SVGMaskElement;
    new(): SVGMaskElement;
};

/**
 * The **`SVGMetadataElement`** interface corresponds to the metadata element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGMetadataElement)
 */
interface SVGMetadataElement extends SVGElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGMetadataElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGMetadataElement: {
    prototype: SVGMetadataElement;
    new(): SVGMetadataElement;
};

/**
 * The **`SVGNumber`** interface corresponds to the &lt;number&gt; basic data type.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber)
 */
interface SVGNumber {
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumber/value)
     */
    value: number;
}

declare var SVGNumber: {
    prototype: SVGNumber;
    new(): SVGNumber;
};

/**
 * The **`SVGNumberList`** interface defines a list of numbers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList)
 */
interface SVGNumberList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/length)
     */
    readonly length: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/numberOfItems)
     */
    readonly numberOfItems: number;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/appendItem)
     */
    appendItem(newItem: SVGNumber): SVGNumber;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/clear)
     */
    clear(): void;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/getItem)
     */
    getItem(index: number): SVGNumber;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/initialize)
     */
    initialize(newItem: SVGNumber): SVGNumber;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/insertItemBefore)
     */
    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/removeItem)
     */
    removeItem(index: number): SVGNumber;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGNumberList/replaceItem)
     */
    replaceItem(newItem: SVGNumber, index: number): SVGNumber;
    [index: number]: SVGNumber;
}

declare var SVGNumberList: {
    prototype: SVGNumberList;
    new(): SVGNumberList;
};

/**
 * The **`SVGPathElement`** interface corresponds to the path element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement)
 */
interface SVGPathElement extends SVGGeometryElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement/pathLength)
     */
    readonly pathLength: SVGAnimatedNumber;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement/getPointAtLength)
     */
    getPointAtLength(distance: number): DOMPoint;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPathElement/getTotalLength)
     */
    getTotalLength(): number;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGPathElement: {
    prototype: SVGPathElement;
    new(): SVGPathElement;
};

/**
 * The **`SVGPatternElement`** interface corresponds to the pattern element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement)
 */
interface SVGPatternElement extends SVGElement, SVGFitToViewBox, SVGURIReference {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternContentUnits)
     */
    readonly patternContentUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedTransformList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternTransform)
     */
    readonly patternTransform: SVGAnimatedTransformList;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/patternUnits)
     */
    readonly patternUnits: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPatternElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPatternElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGPatternElement: {
    prototype: SVGPatternElement;
    new(): SVGPatternElement;
};

/**
 * The **`SVGPointList`** interface represents a list of SVGPoint objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList)
 */
interface SVGPointList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/length)
     */
    readonly length: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/numberOfItems)
     */
    readonly numberOfItems: number;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/appendItem)
     */
    appendItem(newItem: DOMPoint): DOMPoint;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/clear)
     */
    clear(): void;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/getItem)
     */
    getItem(index: number): DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/initialize)
     */
    initialize(newItem: DOMPoint): DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/insertItemBefore)
     */
    insertItemBefore(newItem: DOMPoint, index: number): DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/removeItem)
     */
    removeItem(index: number): DOMPoint;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPointList/replaceItem)
     */
    replaceItem(newItem: DOMPoint, index: number): DOMPoint;
    [index: number]: DOMPoint;
}

declare var SVGPointList: {
    prototype: SVGPointList;
    new(): SVGPointList;
};

/**
 * The **`SVGPolygonElement`** interface provides access to the properties of polygon elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolygonElement)
 */
interface SVGPolygonElement extends SVGGeometryElement, SVGAnimatedPoints {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolygonElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGPolygonElement: {
    prototype: SVGPolygonElement;
    new(): SVGPolygonElement;
};

/**
 * The **`SVGPolylineElement`** interface provides access to the properties of polyline elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPolylineElement)
 */
interface SVGPolylineElement extends SVGGeometryElement, SVGAnimatedPoints {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGPolylineElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGPolylineElement: {
    prototype: SVGPolylineElement;
    new(): SVGPolylineElement;
};

/**
 * The `SVGPreserveAspectRatio` interface corresponds to the preserveAspectRatio attribute, which is available for some of SVG's elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio)
 */
interface SVGPreserveAspectRatio {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio/align)
     */
    align: number;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGPreserveAspectRatio/meetOrSlice)
     */
    meetOrSlice: number;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_NONE: 1;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10;
    /** Type: unsigned short */
    readonly SVG_MEETORSLICE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MEETORSLICE_MEET: 1;
    /** Type: unsigned short */
    readonly SVG_MEETORSLICE_SLICE: 2;
}

declare var SVGPreserveAspectRatio: {
    prototype: SVGPreserveAspectRatio;
    new(): SVGPreserveAspectRatio;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_NONE: 1;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMINYMIN: 2;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMIDYMIN: 3;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMAXYMIN: 4;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMINYMID: 5;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMIDYMID: 6;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMAXYMID: 7;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMINYMAX: 8;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMIDYMAX: 9;
    /** Type: unsigned short */
    readonly SVG_PRESERVEASPECTRATIO_XMAXYMAX: 10;
    /** Type: unsigned short */
    readonly SVG_MEETORSLICE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_MEETORSLICE_MEET: 1;
    /** Type: unsigned short */
    readonly SVG_MEETORSLICE_SLICE: 2;
};

/**
 * The **`SVGRadialGradientElement`** interface corresponds to the RadialGradient element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement)
 */
interface SVGRadialGradientElement extends SVGGradientElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/cx)
     */
    readonly cx: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/cy)
     */
    readonly cy: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fr)
     */
    readonly fr: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fx)
     */
    readonly fx: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/fy)
     */
    readonly fy: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRadialGradientElement/r)
     */
    readonly r: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRadialGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRadialGradientElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGRadialGradientElement: {
    prototype: SVGRadialGradientElement;
    new(): SVGRadialGradientElement;
};

/**
 * The `SVGRectElement` interface provides access to the properties of rect elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement)
 */
interface SVGRectElement extends SVGGeometryElement {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/rx)
     */
    readonly rx: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/ry)
     */
    readonly ry: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGRectElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGRectElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGRectElement: {
    prototype: SVGRectElement;
    new(): SVGRectElement;
};

interface SVGSVGElementEventMap extends SVGElementEventMap, WindowEventHandlersEventMap {
}

/**
 * The **`SVGSVGElement`** interface provides access to the properties of svg elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement)
 */
interface SVGSVGElement extends SVGGraphicsElement, SVGFitToViewBox, WindowEventHandlers {
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/currentScale)
     */
    currentScale: number;
    /**
     * Type: DOMPointReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/currentTranslate)
     */
    readonly currentTranslate: DOMPointReadOnly;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/y)
     */
    readonly y: SVGAnimatedLength;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/animationsPaused)
     */
    animationsPaused(): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/checkEnclosure)
     */
    checkEnclosure(element: SVGElement, rect: DOMRectReadOnly): boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/checkIntersection)
     */
    checkIntersection(element: SVGElement, rect: DOMRectReadOnly): boolean;
    /**
     * Type: SVGAngle
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGAngle)
     */
    createSVGAngle(): SVGAngle;
    /**
     * Type: SVGLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGLength)
     */
    createSVGLength(): SVGLength;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGMatrix)
     */
    createSVGMatrix(): DOMMatrix;
    /**
     * Type: SVGNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGNumber)
     */
    createSVGNumber(): SVGNumber;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGPoint)
     */
    createSVGPoint(): DOMPoint;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGRect)
     */
    createSVGRect(): DOMRect;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGTransform)
     */
    createSVGTransform(): SVGTransform;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/createSVGTransformFromMatrix)
     */
    createSVGTransformFromMatrix(matrix?: DOMMatrix2DInit): SVGTransform;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/deselectAll)
     */
    deselectAll(): void;
    /**
     * Type: undefined
     * @deprecated
     */
    forceRedraw(): void;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/getCurrentTime)
     */
    getCurrentTime(): number;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/getElementById)
     */
    getElementById(elementId: string): Element;
    /** Type: NodeList */
    getEnclosureList(rect: DOMRectReadOnly, referenceElement: SVGElement | null): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;
    /** Type: NodeList */
    getIntersectionList(rect: DOMRectReadOnly, referenceElement: SVGElement | null): NodeListOf<SVGCircleElement | SVGEllipseElement | SVGImageElement | SVGLineElement | SVGPathElement | SVGPolygonElement | SVGPolylineElement | SVGRectElement | SVGTextElement | SVGUseElement>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/pauseAnimations)
     */
    pauseAnimations(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/setCurrentTime)
     */
    setCurrentTime(seconds: number): void;
    /**
     * Type: unsigned long
     * @deprecated
     */
    suspendRedraw(maxWaitMilliseconds: number): number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSVGElement/unpauseAnimations)
     */
    unpauseAnimations(): void;
    /**
     * Type: undefined
     * @deprecated
     */
    unsuspendRedraw(suspendHandleID: number): void;
    /**
     * Type: undefined
     * @deprecated
     */
    unsuspendRedrawAll(): void;
    addEventListener<K extends keyof SVGSVGElementEventMap>(type: K, listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGSVGElementEventMap>(type: K, listener: (this: SVGSVGElement, ev: SVGSVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGSVGElement: {
    prototype: SVGSVGElement;
    new(): SVGSVGElement;
};

/**
 * The **`SVGScriptElement`** interface corresponds to the SVG script element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement)
 */
interface SVGScriptElement extends SVGElement, SVGURIReference {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGScriptElement/type)
     */
    type: string;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGScriptElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGScriptElement: {
    prototype: SVGScriptElement;
    new(): SVGScriptElement;
};

/**
 * The **`SVGSetElement`** interface corresponds to the set element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSetElement)
 */
interface SVGSetElement extends SVGAnimationElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSetElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGSetElement: {
    prototype: SVGSetElement;
    new(): SVGSetElement;
};

/**
 * The **`SVGStopElement`** interface corresponds to the stop element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement)
 */
interface SVGStopElement extends SVGElement {
    /**
     * Type: SVGAnimatedNumber
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStopElement/offset)
     */
    readonly offset: SVGAnimatedNumber;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStopElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGStopElement: {
    prototype: SVGStopElement;
    new(): SVGStopElement;
};

/**
 * The **`SVGStringList`** interface defines a list of strings.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList)
 */
interface SVGStringList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/length)
     */
    readonly length: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/numberOfItems)
     */
    readonly numberOfItems: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/appendItem)
     */
    appendItem(newItem: string): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/clear)
     */
    clear(): void;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/getItem)
     */
    getItem(index: number): string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/initialize)
     */
    initialize(newItem: string): string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/insertItemBefore)
     */
    insertItemBefore(newItem: string, index: number): string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/removeItem)
     */
    removeItem(index: number): string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStringList/replaceItem)
     */
    replaceItem(newItem: string, index: number): string;
    [index: number]: string;
}

declare var SVGStringList: {
    prototype: SVGStringList;
    new(): SVGStringList;
};

/**
 * The **`SVGStyleElement`** interface corresponds to the SVG style element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement)
 */
interface SVGStyleElement extends SVGElement, LinkStyle {
    disabled: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/media)
     */
    media: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/title)
     */
    title: string;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGStyleElement/type)
     */
    type: string;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGStyleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGStyleElement: {
    prototype: SVGStyleElement;
    new(): SVGStyleElement;
};

/**
 * The **`SVGSwitchElement`** interface corresponds to the switch element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSwitchElement)
 */
interface SVGSwitchElement extends SVGGraphicsElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSwitchElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGSwitchElement: {
    prototype: SVGSwitchElement;
    new(): SVGSwitchElement;
};

/**
 * The **`SVGSymbolElement`** interface corresponds to the symbol element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGSymbolElement)
 */
interface SVGSymbolElement extends SVGElement, SVGFitToViewBox {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGSymbolElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGSymbolElement: {
    prototype: SVGSymbolElement;
    new(): SVGSymbolElement;
};

/**
 * The **`SVGTSpanElement`** interface represents a tspan element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTSpanElement)
 */
interface SVGTSpanElement extends SVGTextPositioningElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTSpanElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGTSpanElement: {
    prototype: SVGTSpanElement;
    new(): SVGTSpanElement;
};

interface SVGTests {
    /**
     * Type: SVGStringList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/requiredExtensions)
     */
    readonly requiredExtensions: SVGStringList;
    /**
     * Type: SVGStringList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAnimationElement/systemLanguage)
     */
    readonly systemLanguage: SVGStringList;
}

/**
 * The **`SVGTextContentElement`** interface is implemented by elements that support rendering child text content.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement)
 */
interface SVGTextContentElement extends SVGGraphicsElement {
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/lengthAdjust)
     */
    readonly lengthAdjust: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/textLength)
     */
    readonly textLength: SVGAnimatedLength;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getCharNumAtPosition)
     */
    getCharNumAtPosition(point?: DOMPointInit): number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getComputedTextLength)
     */
    getComputedTextLength(): number;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getEndPositionOfChar)
     */
    getEndPositionOfChar(charnum: number): DOMPoint;
    /**
     * Type: DOMRect
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getExtentOfChar)
     */
    getExtentOfChar(charnum: number): DOMRect;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getNumberOfChars)
     */
    getNumberOfChars(): number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getRotationOfChar)
     */
    getRotationOfChar(charnum: number): number;
    /**
     * Type: DOMPoint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getStartPositionOfChar)
     */
    getStartPositionOfChar(charnum: number): DOMPoint;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextContentElement/getSubStringLength)
     */
    getSubStringLength(charnum: number, nchars: number): number;
    /**
     * Type: undefined
     * @deprecated
     */
    selectSubString(charnum: number, nchars: number): void;
    /** Type: unsigned short */
    readonly LENGTHADJUST_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly LENGTHADJUST_SPACING: 1;
    /** Type: unsigned short */
    readonly LENGTHADJUST_SPACINGANDGLYPHS: 2;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextContentElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextContentElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGTextContentElement: {
    prototype: SVGTextContentElement;
    new(): SVGTextContentElement;
    /** Type: unsigned short */
    readonly LENGTHADJUST_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly LENGTHADJUST_SPACING: 1;
    /** Type: unsigned short */
    readonly LENGTHADJUST_SPACINGANDGLYPHS: 2;
};

/**
 * The **`SVGTextElement`** interface corresponds to the text elements.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextElement)
 */
interface SVGTextElement extends SVGTextPositioningElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGTextElement: {
    prototype: SVGTextElement;
    new(): SVGTextElement;
};

/**
 * The **`SVGTextPathElement`** interface corresponds to the textPath element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement)
 */
interface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/method)
     */
    readonly method: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedEnumeration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/spacing)
     */
    readonly spacing: SVGAnimatedEnumeration;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPathElement/startOffset)
     */
    readonly startOffset: SVGAnimatedLength;
    /** Type: unsigned short */
    readonly TEXTPATH_METHODTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly TEXTPATH_METHODTYPE_ALIGN: 1;
    /** Type: unsigned short */
    readonly TEXTPATH_METHODTYPE_STRETCH: 2;
    /** Type: unsigned short */
    readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly TEXTPATH_SPACINGTYPE_AUTO: 1;
    /** Type: unsigned short */
    readonly TEXTPATH_SPACINGTYPE_EXACT: 2;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPathElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGTextPathElement: {
    prototype: SVGTextPathElement;
    new(): SVGTextPathElement;
    /** Type: unsigned short */
    readonly TEXTPATH_METHODTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly TEXTPATH_METHODTYPE_ALIGN: 1;
    /** Type: unsigned short */
    readonly TEXTPATH_METHODTYPE_STRETCH: 2;
    /** Type: unsigned short */
    readonly TEXTPATH_SPACINGTYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly TEXTPATH_SPACINGTYPE_AUTO: 1;
    /** Type: unsigned short */
    readonly TEXTPATH_SPACINGTYPE_EXACT: 2;
};

/**
 * The **`SVGTextPositioningElement`** interface is implemented by elements that support attributes that position individual text glyphs.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement)
 */
interface SVGTextPositioningElement extends SVGTextContentElement {
    /**
     * Type: SVGAnimatedLengthList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/dx)
     */
    readonly dx: SVGAnimatedLengthList;
    /**
     * Type: SVGAnimatedLengthList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/dy)
     */
    readonly dy: SVGAnimatedLengthList;
    /**
     * Type: SVGAnimatedNumberList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/rotate)
     */
    readonly rotate: SVGAnimatedNumberList;
    /**
     * Type: SVGAnimatedLengthList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/x)
     */
    readonly x: SVGAnimatedLengthList;
    /**
     * Type: SVGAnimatedLengthList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTextPositioningElement/y)
     */
    readonly y: SVGAnimatedLengthList;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPositioningElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTextPositioningElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGTextPositioningElement: {
    prototype: SVGTextPositioningElement;
    new(): SVGTextPositioningElement;
};

/**
 * The **`SVGTitleElement`** interface corresponds to the title element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTitleElement)
 */
interface SVGTitleElement extends SVGElement {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGTitleElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGTitleElement: {
    prototype: SVGTitleElement;
    new(): SVGTitleElement;
};

/**
 * The **`SVGTransform`** interface reflects one of the component transformations within an SVGTransformList; thus, an `SVGTransform` object corresponds to a single component (e.g., `scale(…)` or `matrix(…)`) within a transform attribute.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform)
 */
interface SVGTransform {
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/angle)
     */
    readonly angle: number;
    /**
     * Type: DOMMatrix
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/matrix)
     */
    readonly matrix: DOMMatrix;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/type)
     */
    readonly type: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/setMatrix)
     */
    setMatrix(matrix?: DOMMatrix2DInit): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/setRotate)
     */
    setRotate(angle: number, cx: number, cy: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/setScale)
     */
    setScale(sx: number, sy: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/setSkewX)
     */
    setSkewX(angle: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/setSkewY)
     */
    setSkewY(angle: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransform/setTranslate)
     */
    setTranslate(tx: number, ty: number): void;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_MATRIX: 1;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_TRANSLATE: 2;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_SCALE: 3;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_ROTATE: 4;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_SKEWX: 5;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_SKEWY: 6;
}

declare var SVGTransform: {
    prototype: SVGTransform;
    new(): SVGTransform;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_MATRIX: 1;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_TRANSLATE: 2;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_SCALE: 3;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_ROTATE: 4;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_SKEWX: 5;
    /** Type: unsigned short */
    readonly SVG_TRANSFORM_SKEWY: 6;
};

/**
 * The **`SVGTransformList`** interface defines a list of SVGTransform objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList)
 */
interface SVGTransformList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/length)
     */
    readonly length: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/numberOfItems)
     */
    readonly numberOfItems: number;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/appendItem)
     */
    appendItem(newItem: SVGTransform): SVGTransform;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/clear)
     */
    clear(): void;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/consolidate)
     */
    consolidate(): SVGTransform | null;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/createSVGTransformFromMatrix)
     */
    createSVGTransformFromMatrix(matrix?: DOMMatrix2DInit): SVGTransform;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/getItem)
     */
    getItem(index: number): SVGTransform;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/initialize)
     */
    initialize(newItem: SVGTransform): SVGTransform;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/insertItemBefore)
     */
    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/removeItem)
     */
    removeItem(index: number): SVGTransform;
    /**
     * Type: SVGTransform
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGTransformList/replaceItem)
     */
    replaceItem(newItem: SVGTransform, index: number): SVGTransform;
    [index: number]: SVGTransform;
}

declare var SVGTransformList: {
    prototype: SVGTransformList;
    new(): SVGTransformList;
};

interface SVGURIReference {
    /**
     * Type: SVGAnimatedString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGAElement/href)
     */
    readonly href: SVGAnimatedString;
}

/**
 * The **`SVGUnitTypes`** interface defines a commonly used set of constants used for reflecting gradientUnits, patternContentUnits and other similar attributes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUnitTypes)
 */
interface SVGUnitTypes {
    /** Type: unsigned short */
    readonly SVG_UNIT_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1;
    /** Type: unsigned short */
    readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2;
}

declare var SVGUnitTypes: {
    prototype: SVGUnitTypes;
    new(): SVGUnitTypes;
    /** Type: unsigned short */
    readonly SVG_UNIT_TYPE_UNKNOWN: 0;
    /** Type: unsigned short */
    readonly SVG_UNIT_TYPE_USERSPACEONUSE: 1;
    /** Type: unsigned short */
    readonly SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: 2;
};

/**
 * The **`SVGUseElement`** interface corresponds to the use element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement)
 */
interface SVGUseElement extends SVGGraphicsElement, SVGURIReference {
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/height)
     */
    readonly height: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/width)
     */
    readonly width: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/x)
     */
    readonly x: SVGAnimatedLength;
    /**
     * Type: SVGAnimatedLength
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGUseElement/y)
     */
    readonly y: SVGAnimatedLength;
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGUseElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGUseElement: {
    prototype: SVGUseElement;
    new(): SVGUseElement;
};

/**
 * The **`SVGViewElement`** interface provides access to the properties of view elements, as well as methods to manipulate them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SVGViewElement)
 */
interface SVGViewElement extends SVGElement, SVGFitToViewBox {
    addEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SVGElementEventMap>(type: K, listener: (this: SVGViewElement, ev: SVGElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SVGViewElement: {
    prototype: SVGViewElement;
    new(): SVGViewElement;
};

/**
 * The `Screen` interface represents a screen, usually the one on which the current window is being rendered, and is obtained using window.screen.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen)
 */
interface Screen {
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availHeight)
     */
    readonly availHeight: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/availWidth)
     */
    readonly availWidth: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/colorDepth)
     */
    readonly colorDepth: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/height)
     */
    readonly height: number;
    /**
     * Type: ScreenOrientation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/orientation)
     */
    readonly orientation: ScreenOrientation;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/pixelDepth)
     */
    readonly pixelDepth: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Screen/width)
     */
    readonly width: number;
}

declare var Screen: {
    prototype: Screen;
    new(): Screen;
};

interface ScreenOrientationEventMap {
    "change": Event;
}

/**
 * The **`ScreenOrientation`** interface of the Screen Orientation API provides information about the current orientation of the document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation)
 */
interface ScreenOrientation extends EventTarget {
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/angle)
     */
    readonly angle: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/change_event)
     */
    onchange: ((this: ScreenOrientation, ev: Event) => any) | null;
    /**
     * Type: OrientationType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/type)
     */
    readonly type: OrientationType;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScreenOrientation/unlock)
     */
    unlock(): void;
    addEventListener<K extends keyof ScreenOrientationEventMap>(type: K, listener: (this: ScreenOrientation, ev: ScreenOrientationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ScreenOrientationEventMap>(type: K, listener: (this: ScreenOrientation, ev: ScreenOrientationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var ScreenOrientation: {
    prototype: ScreenOrientation;
    new(): ScreenOrientation;
};

interface ScriptProcessorNodeEventMap {
    "audioprocess": AudioProcessingEvent;
}

/**
 * The `ScriptProcessorNode` interface allows the generation, processing, or analyzing of audio using JavaScript.
 * @deprecated As of the August 29 2014 Web Audio API spec publication, this feature has been marked as deprecated, and was replaced by AudioWorklet (see AudioWorkletNode).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode)
 */
interface ScriptProcessorNode extends AudioNode {
    /**
     * Type: long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/bufferSize)
     */
    readonly bufferSize: number;
    /**
     * Type: EventHandler
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ScriptProcessorNode/audioprocess_event)
     */
    onaudioprocess: ((this: ScriptProcessorNode, ev: AudioProcessingEvent) => any) | null;
    addEventListener<K extends keyof ScriptProcessorNodeEventMap>(type: K, listener: (this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ScriptProcessorNodeEventMap>(type: K, listener: (this: ScriptProcessorNode, ev: ScriptProcessorNodeEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

/** @deprecated */
declare var ScriptProcessorNode: {
    prototype: ScriptProcessorNode;
    new(): ScriptProcessorNode;
};

/**
 * The **`SecurityPolicyViolationEvent`** interface inherits from Event, and represents the event object of a `securitypolicyviolation` event sent on an Element/securitypolicyviolation_event, Document/securitypolicyviolation_event, or WorkerGlobalScope/securitypolicyviolation_event when its Content Security Policy (CSP) is violated.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent)
 */
interface SecurityPolicyViolationEvent extends Event {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/blockedURI)
     */
    readonly blockedURI: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/columnNumber)
     */
    readonly columnNumber: number;
    /**
     * Type: SecurityPolicyViolationEventDisposition
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/disposition)
     */
    readonly disposition: SecurityPolicyViolationEventDisposition;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/documentURI)
     */
    readonly documentURI: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/effectiveDirective)
     */
    readonly effectiveDirective: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/lineNumber)
     */
    readonly lineNumber: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/originalPolicy)
     */
    readonly originalPolicy: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/referrer)
     */
    readonly referrer: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sample)
     */
    readonly sample: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/sourceFile)
     */
    readonly sourceFile: string;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/statusCode)
     */
    readonly statusCode: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SecurityPolicyViolationEvent/violatedDirective)
     */
    readonly violatedDirective: string;
}

declare var SecurityPolicyViolationEvent: {
    prototype: SecurityPolicyViolationEvent;
    new(type: string, eventInitDict?: SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent;
};

/**
 * A **`Selection`** object represents the range of text selected by the user or the current position of the caret.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection)
 */
interface Selection {
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorNode)
     */
    readonly anchorNode: Node | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/anchorOffset)
     */
    readonly anchorOffset: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/direction)
     */
    readonly direction: string;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusNode)
     */
    readonly focusNode: Node | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/focusOffset)
     */
    readonly focusOffset: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/isCollapsed)
     */
    readonly isCollapsed: boolean;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/rangeCount)
     */
    readonly rangeCount: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/type)
     */
    readonly type: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/addRange)
     */
    addRange(range: Range): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapse)
     */
    collapse(node: Node | null, offset?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapseToEnd)
     */
    collapseToEnd(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/collapseToStart)
     */
    collapseToStart(): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/containsNode)
     */
    containsNode(node: Node, allowPartialContainment?: boolean): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/deleteFromDocument)
     */
    deleteFromDocument(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/empty)
     */
    empty(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/extend)
     */
    extend(node: Node, offset?: number): void;
    /**
     * Type: Range
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/getRangeAt)
     */
    getRangeAt(index: number): Range;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/modify)
     */
    modify(alter?: string, direction?: string, granularity?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeAllRanges)
     */
    removeAllRanges(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/removeRange)
     */
    removeRange(range: Range): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/selectAllChildren)
     */
    selectAllChildren(node: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/setBaseAndExtent)
     */
    setBaseAndExtent(anchorNode: Node, anchorOffset: number, focusNode: Node, focusOffset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Selection/setPosition)
     */
    setPosition(node: Node | null, offset?: number): void;
    toString(): string;
}

declare var Selection: {
    prototype: Selection;
    new(): Selection;
};

interface ServiceWorkerEventMap extends AbstractWorkerEventMap {
    "statechange": Event;
}

/**
 * The **`ServiceWorker`** interface of the Service Worker API provides a reference to a service worker.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker)
 */
interface ServiceWorker extends EventTarget, AbstractWorker {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/statechange_event)
     */
    onstatechange: ((this: ServiceWorker, ev: Event) => any) | null;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/scriptURL)
     */
    readonly scriptURL: string;
    /**
     * Type: ServiceWorkerState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/state)
     */
    readonly state: ServiceWorkerState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorker/postMessage)
     */
    postMessage(message: any, transfer: Transferable[]): void;
    postMessage(message: any, options?: StructuredSerializeOptions): void;
    addEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ServiceWorkerEventMap>(type: K, listener: (this: ServiceWorker, ev: ServiceWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var ServiceWorker: {
    prototype: ServiceWorker;
    new(): ServiceWorker;
};

interface ServiceWorkerContainerEventMap {
    "controllerchange": Event;
    "message": MessageEvent;
    "messageerror": MessageEvent;
}

/**
 * The **`ServiceWorkerContainer`** interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer)
 */
interface ServiceWorkerContainer extends EventTarget {
    /**
     * Type: ServiceWorker
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controller)
     */
    readonly controller: ServiceWorker | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/controllerchange_event)
     */
    oncontrollerchange: ((this: ServiceWorkerContainer, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/message_event)
     */
    onmessage: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/messageerror_event)
     */
    onmessageerror: ((this: ServiceWorkerContainer, ev: MessageEvent) => any) | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/ready)
     */
    readonly ready: Promise<ServiceWorkerRegistration>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistration)
     */
    getRegistration(clientURL?: string | URL): Promise<ServiceWorkerRegistration | undefined>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/getRegistrations)
     */
    getRegistrations(): Promise<ReadonlyArray<ServiceWorkerRegistration>>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/register)
     */
    register(scriptURL: string | URL, options?: RegistrationOptions): Promise<ServiceWorkerRegistration>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerContainer/startMessages)
     */
    startMessages(): void;
    addEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ServiceWorkerContainerEventMap>(type: K, listener: (this: ServiceWorkerContainer, ev: ServiceWorkerContainerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var ServiceWorkerContainer: {
    prototype: ServiceWorkerContainer;
    new(): ServiceWorkerContainer;
};

interface ServiceWorkerRegistrationEventMap {
    "updatefound": Event;
}

/**
 * The **`ServiceWorkerRegistration`** interface of the Service Worker API represents the service worker registration.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration)
 */
interface ServiceWorkerRegistration extends EventTarget {
    /**
     * Type: ServiceWorker
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/active)
     */
    readonly active: ServiceWorker | null;
    /**
     * Type: ServiceWorker
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/installing)
     */
    readonly installing: ServiceWorker | null;
    /**
     * Type: NavigationPreloadManager
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/navigationPreload)
     */
    readonly navigationPreload: NavigationPreloadManager;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updatefound_event)
     */
    onupdatefound: ((this: ServiceWorkerRegistration, ev: Event) => any) | null;
    /**
     * Type: PushManager
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/pushManager)
     */
    readonly pushManager: PushManager;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/scope)
     */
    readonly scope: string;
    /**
     * Type: ServiceWorkerUpdateViaCache
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/updateViaCache)
     */
    readonly updateViaCache: ServiceWorkerUpdateViaCache;
    /**
     * Type: ServiceWorker
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/waiting)
     */
    readonly waiting: ServiceWorker | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/getNotifications)
     */
    getNotifications(filter?: GetNotificationOptions): Promise<Notification[]>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/showNotification)
     */
    showNotification(title: string, options?: NotificationOptions): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/unregister)
     */
    unregister(): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ServiceWorkerRegistration/update)
     */
    update(): Promise<void>;
    addEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ServiceWorkerRegistrationEventMap>(type: K, listener: (this: ServiceWorkerRegistration, ev: ServiceWorkerRegistrationEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var ServiceWorkerRegistration: {
    prototype: ServiceWorkerRegistration;
    new(): ServiceWorkerRegistration;
};

interface ShadowRootEventMap {
    "slotchange": Event;
}

/**
 * The **`ShadowRoot`** interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot)
 */
interface ShadowRoot extends DocumentFragment, DocumentOrShadowRoot {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/clonable)
     */
    readonly clonable: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/delegatesFocus)
     */
    readonly delegatesFocus: boolean;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/host)
     */
    readonly host: Element;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/innerHTML)
     */
    innerHTML: string;
    /**
     * Type: ShadowRootMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/mode)
     */
    readonly mode: ShadowRootMode;
    /** Type: EventHandler */
    onslotchange: ((this: ShadowRoot, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/serializable)
     */
    readonly serializable: boolean;
    /**
     * Type: SlotAssignmentMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/slotAssignment)
     */
    readonly slotAssignment: SlotAssignmentMode;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/getHTML)
     */
    getHTML(options?: GetHTMLOptions): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ShadowRoot/setHTMLUnsafe)
     */
    setHTMLUnsafe(html: string): void;
    /** Throws a "NotSupportedError" DOMException if context object is a shadow root. */
    addEventListener<K extends keyof ShadowRootEventMap>(type: K, listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof ShadowRootEventMap>(type: K, listener: (this: ShadowRoot, ev: ShadowRootEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var ShadowRoot: {
    prototype: ShadowRoot;
    new(): ShadowRoot;
};

/**
 * The **`SharedWorker`** interface represents a specific kind of worker that can be _accessed_ from several browsing contexts, such as several windows, iframes or even workers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker)
 */
interface SharedWorker extends EventTarget, AbstractWorker {
    /**
     * Type: MessagePort
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SharedWorker/port)
     */
    readonly port: MessagePort;
    addEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: SharedWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof AbstractWorkerEventMap>(type: K, listener: (this: SharedWorker, ev: AbstractWorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SharedWorker: {
    prototype: SharedWorker;
    new(scriptURL: string | URL, options?: string | WorkerOptions): SharedWorker;
};

interface Slottable {
    /**
     * Type: HTMLSlotElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/assignedSlot)
     */
    readonly assignedSlot: HTMLSlotElement | null;
}

interface SourceBufferEventMap {
    "abort": Event;
    "error": Event;
    "update": Event;
    "updateend": Event;
    "updatestart": Event;
}

/**
 * The **`SourceBuffer`** interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer)
 */
interface SourceBuffer extends EventTarget {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowEnd)
     */
    appendWindowEnd: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendWindowStart)
     */
    appendWindowStart: number;
    /**
     * Type: TimeRanges
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/buffered)
     */
    readonly buffered: TimeRanges;
    /**
     * Type: AppendMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/mode)
     */
    mode: AppendMode;
    /** Type: EventHandler */
    onabort: ((this: SourceBuffer, ev: Event) => any) | null;
    /** Type: EventHandler */
    onerror: ((this: SourceBuffer, ev: Event) => any) | null;
    /** Type: EventHandler */
    onupdate: ((this: SourceBuffer, ev: Event) => any) | null;
    /** Type: EventHandler */
    onupdateend: ((this: SourceBuffer, ev: Event) => any) | null;
    /** Type: EventHandler */
    onupdatestart: ((this: SourceBuffer, ev: Event) => any) | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/timestampOffset)
     */
    timestampOffset: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/updating)
     */
    readonly updating: boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/abort)
     */
    abort(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/appendBuffer)
     */
    appendBuffer(data: BufferSource): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/changeType)
     */
    changeType(type: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBuffer/remove)
     */
    remove(start: number, end: number): void;
    addEventListener<K extends keyof SourceBufferEventMap>(type: K, listener: (this: SourceBuffer, ev: SourceBufferEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SourceBufferEventMap>(type: K, listener: (this: SourceBuffer, ev: SourceBufferEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SourceBuffer: {
    prototype: SourceBuffer;
    new(): SourceBuffer;
};

interface SourceBufferListEventMap {
    "addsourcebuffer": Event;
    "removesourcebuffer": Event;
}

/**
 * The **`SourceBufferList`** interface represents a simple container list for multiple SourceBuffer objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList)
 */
interface SourceBufferList extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SourceBufferList/length)
     */
    readonly length: number;
    /** Type: EventHandler */
    onaddsourcebuffer: ((this: SourceBufferList, ev: Event) => any) | null;
    /** Type: EventHandler */
    onremovesourcebuffer: ((this: SourceBufferList, ev: Event) => any) | null;
    addEventListener<K extends keyof SourceBufferListEventMap>(type: K, listener: (this: SourceBufferList, ev: SourceBufferListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SourceBufferListEventMap>(type: K, listener: (this: SourceBufferList, ev: SourceBufferListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    [index: number]: SourceBuffer;
}

declare var SourceBufferList: {
    prototype: SourceBufferList;
    new(): SourceBufferList;
};

/**
 * The **`SpeechRecognitionAlternative`** interface of the Web Speech API represents a single word that has been recognized by the speech recognition service.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative)
 */
interface SpeechRecognitionAlternative {
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/confidence)
     */
    readonly confidence: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionAlternative/transcript)
     */
    readonly transcript: string;
}

declare var SpeechRecognitionAlternative: {
    prototype: SpeechRecognitionAlternative;
    new(): SpeechRecognitionAlternative;
};

/**
 * The **`SpeechRecognitionResult`** interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult)
 */
interface SpeechRecognitionResult {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/isFinal)
     */
    readonly isFinal: boolean;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/length)
     */
    readonly length: number;
    /**
     * Type: SpeechRecognitionAlternative
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResult/item)
     */
    item(index: number): SpeechRecognitionAlternative;
    [index: number]: SpeechRecognitionAlternative;
}

declare var SpeechRecognitionResult: {
    prototype: SpeechRecognitionResult;
    new(): SpeechRecognitionResult;
};

/**
 * The **`SpeechRecognitionResultList`** interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in SpeechRecognition.continuous mode.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList)
 */
interface SpeechRecognitionResultList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/length)
     */
    readonly length: number;
    /**
     * Type: SpeechRecognitionResult
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechRecognitionResultList/item)
     */
    item(index: number): SpeechRecognitionResult;
    [index: number]: SpeechRecognitionResult;
}

declare var SpeechRecognitionResultList: {
    prototype: SpeechRecognitionResultList;
    new(): SpeechRecognitionResultList;
};

interface SpeechSynthesisEventMap {
    "voiceschanged": Event;
}

/**
 * The **`SpeechSynthesis`** interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis)
 */
interface SpeechSynthesis extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/voiceschanged_event)
     */
    onvoiceschanged: ((this: SpeechSynthesis, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/paused)
     */
    readonly paused: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pending)
     */
    readonly pending: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speaking)
     */
    readonly speaking: boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/cancel)
     */
    cancel(): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/getVoices)
     */
    getVoices(): SpeechSynthesisVoice[];
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/pause)
     */
    pause(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/resume)
     */
    resume(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesis/speak)
     */
    speak(utterance: SpeechSynthesisUtterance): void;
    addEventListener<K extends keyof SpeechSynthesisEventMap>(type: K, listener: (this: SpeechSynthesis, ev: SpeechSynthesisEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SpeechSynthesisEventMap>(type: K, listener: (this: SpeechSynthesis, ev: SpeechSynthesisEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SpeechSynthesis: {
    prototype: SpeechSynthesis;
    new(): SpeechSynthesis;
};

/**
 * The **`SpeechSynthesisErrorEvent`** interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent)
 */
interface SpeechSynthesisErrorEvent extends SpeechSynthesisEvent {
    /**
     * Type: SpeechSynthesisErrorCode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisErrorEvent/error)
     */
    readonly error: SpeechSynthesisErrorCode;
}

declare var SpeechSynthesisErrorEvent: {
    prototype: SpeechSynthesisErrorEvent;
    new(type: string, eventInitDict: SpeechSynthesisErrorEventInit): SpeechSynthesisErrorEvent;
};

/**
 * The **`SpeechSynthesisEvent`** interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent)
 */
interface SpeechSynthesisEvent extends Event {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charIndex)
     */
    readonly charIndex: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/charLength)
     */
    readonly charLength: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/elapsedTime)
     */
    readonly elapsedTime: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/name)
     */
    readonly name: string;
    /**
     * Type: SpeechSynthesisUtterance
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisEvent/utterance)
     */
    readonly utterance: SpeechSynthesisUtterance;
}

declare var SpeechSynthesisEvent: {
    prototype: SpeechSynthesisEvent;
    new(type: string, eventInitDict: SpeechSynthesisEventInit): SpeechSynthesisEvent;
};

interface SpeechSynthesisUtteranceEventMap {
    "boundary": SpeechSynthesisEvent;
    "end": SpeechSynthesisEvent;
    "error": SpeechSynthesisErrorEvent;
    "mark": SpeechSynthesisEvent;
    "pause": SpeechSynthesisEvent;
    "resume": SpeechSynthesisEvent;
    "start": SpeechSynthesisEvent;
}

/**
 * The **`SpeechSynthesisUtterance`** interface of the Web Speech API represents a speech request.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance)
 */
interface SpeechSynthesisUtterance extends EventTarget {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/lang)
     */
    lang: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/boundary_event)
     */
    onboundary: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/end_event)
     */
    onend: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/error_event)
     */
    onerror: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisErrorEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/mark_event)
     */
    onmark: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pause_event)
     */
    onpause: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/resume_event)
     */
    onresume: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/start_event)
     */
    onstart: ((this: SpeechSynthesisUtterance, ev: SpeechSynthesisEvent) => any) | null;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/pitch)
     */
    pitch: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/rate)
     */
    rate: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/text)
     */
    text: string;
    /**
     * Type: SpeechSynthesisVoice
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/voice)
     */
    voice: SpeechSynthesisVoice | null;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisUtterance/volume)
     */
    volume: number;
    addEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type: K, listener: (this: SpeechSynthesisUtterance, ev: SpeechSynthesisUtteranceEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof SpeechSynthesisUtteranceEventMap>(type: K, listener: (this: SpeechSynthesisUtterance, ev: SpeechSynthesisUtteranceEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var SpeechSynthesisUtterance: {
    prototype: SpeechSynthesisUtterance;
    new(text?: string): SpeechSynthesisUtterance;
};

/**
 * The **`SpeechSynthesisVoice`** interface of the Web Speech API represents a voice that the system supports.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice)
 */
interface SpeechSynthesisVoice {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/default)
     */
    readonly default: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/lang)
     */
    readonly lang: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/localService)
     */
    readonly localService: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/name)
     */
    readonly name: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SpeechSynthesisVoice/voiceURI)
     */
    readonly voiceURI: string;
}

declare var SpeechSynthesisVoice: {
    prototype: SpeechSynthesisVoice;
    new(): SpeechSynthesisVoice;
};

/**
 * The DOM **`StaticRange`** interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StaticRange)
 */
interface StaticRange extends AbstractRange {
}

declare var StaticRange: {
    prototype: StaticRange;
    new(init: StaticRangeInit): StaticRange;
};

/**
 * The `StereoPannerNode` interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode)
 */
interface StereoPannerNode extends AudioNode {
    /**
     * Type: AudioParam
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StereoPannerNode/pan)
     */
    readonly pan: AudioParam;
}

declare var StereoPannerNode: {
    prototype: StereoPannerNode;
    new(context: BaseAudioContext, options?: StereoPannerOptions): StereoPannerNode;
};

/**
 * The **`Storage`** interface of the Web Storage API provides access to a particular domain's session or local storage.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage)
 */
interface Storage {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/length)
     */
    readonly length: number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/clear)
     */
    clear(): void;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/getItem)
     */
    getItem(key: string): string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/key)
     */
    key(index: number): string | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/removeItem)
     */
    removeItem(key: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Storage/setItem)
     */
    setItem(key: string, value: string): void;
    [name: string]: any;
}

declare var Storage: {
    prototype: Storage;
    new(): Storage;
};

/**
 * The **`StorageEvent`** interface is implemented by the Window/storage_event event, which is sent to a window when a storage area the window has access to is changed within the context of another document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent)
 */
interface StorageEvent extends Event {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/key)
     */
    readonly key: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/newValue)
     */
    readonly newValue: string | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/oldValue)
     */
    readonly oldValue: string | null;
    /**
     * Type: Storage
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/storageArea)
     */
    readonly storageArea: Storage | null;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/url)
     */
    readonly url: string;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageEvent/initStorageEvent)
     */
    initStorageEvent(type: string, bubbles?: boolean, cancelable?: boolean, key?: string | null, oldValue?: string | null, newValue?: string | null, url?: string | URL, storageArea?: Storage | null): void;
}

declare var StorageEvent: {
    prototype: StorageEvent;
    new(type: string, eventInitDict?: StorageEventInit): StorageEvent;
};

/**
 * The **`StorageManager`** interface of the Storage API provides an interface for managing persistence permissions and estimating available storage.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager)
 */
interface StorageManager {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/estimate)
     */
    estimate(): Promise<StorageEstimate>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/getDirectory)
     */
    getDirectory(): Promise<FileSystemDirectoryHandle>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/persist)
     */
    persist(): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StorageManager/persisted)
     */
    persisted(): Promise<boolean>;
}

declare var StorageManager: {
    prototype: StorageManager;
    new(): StorageManager;
};

/** @deprecated */
interface StyleMedia {
    type: string;
    matchMedium(mediaquery: string): boolean;
}

/**
 * The **`StylePropertyMap`** interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap)
 */
interface StylePropertyMap extends StylePropertyMapReadOnly {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/append)
     */
    append(property: string, ...values: (CSSStyleValue | string)[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/clear)
     */
    clear(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/delete)
     */
    delete(property: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMap/set)
     */
    set(property: string, ...values: (CSSStyleValue | string)[]): void;
}

declare var StylePropertyMap: {
    prototype: StylePropertyMap;
    new(): StylePropertyMap;
};

/**
 * The **`StylePropertyMapReadOnly`** interface of the CSS Typed Object Model API provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly)
 */
interface StylePropertyMapReadOnly {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/size)
     */
    readonly size: number;
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/get)
     */
    get(property: string): undefined | CSSStyleValue;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/getAll)
     */
    getAll(property: string): CSSStyleValue[];
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StylePropertyMapReadOnly/has)
     */
    has(property: string): boolean;
    forEach(callbackfn: (value: CSSStyleValue[], key: string, parent: StylePropertyMapReadOnly) => void, thisArg?: any): void;
}

declare var StylePropertyMapReadOnly: {
    prototype: StylePropertyMapReadOnly;
    new(): StylePropertyMapReadOnly;
};

/**
 * An object implementing the `StyleSheet` interface represents a single style sheet.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet)
 */
interface StyleSheet {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/disabled)
     */
    disabled: boolean;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/href)
     */
    readonly href: string | null;
    /**
     * Type: MediaList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/media)
     */
    get media(): MediaList;
    set media(mediaText: string);
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/ownerNode)
     */
    readonly ownerNode: Element | ProcessingInstruction | null;
    /**
     * Type: CSSStyleSheet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/parentStyleSheet)
     */
    readonly parentStyleSheet: CSSStyleSheet | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/title)
     */
    readonly title: string | null;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheet/type)
     */
    readonly type: string;
}

declare var StyleSheet: {
    prototype: StyleSheet;
    new(): StyleSheet;
};

/**
 * The `StyleSheetList` interface represents a list of CSSStyleSheet objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList)
 */
interface StyleSheetList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/length)
     */
    readonly length: number;
    /**
     * Type: CSSStyleSheet
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/StyleSheetList/item)
     */
    item(index: number): CSSStyleSheet | null;
    [index: number]: CSSStyleSheet;
}

declare var StyleSheetList: {
    prototype: StyleSheetList;
    new(): StyleSheetList;
};

/**
 * The **`SubmitEvent`** interface defines the object used to represent an HTML form's HTMLFormElement.submit_event event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent)
 */
interface SubmitEvent extends Event {
    /**
     * Type: HTMLElement
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubmitEvent/submitter)
     */
    readonly submitter: HTMLElement | null;
}

declare var SubmitEvent: {
    prototype: SubmitEvent;
    new(type: string, eventInitDict?: SubmitEventInit): SubmitEvent;
};

/**
 * The **`SubtleCrypto`** interface of the Web Crypto API provides a number of low-level cryptographic functions.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto)
 */
interface SubtleCrypto {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/decrypt)
     */
    decrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveBits)
     */
    deriveBits(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, length?: number | null): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/deriveKey)
     */
    deriveKey(algorithm: AlgorithmIdentifier | EcdhKeyDeriveParams | HkdfParams | Pbkdf2Params, baseKey: CryptoKey, derivedKeyType: AlgorithmIdentifier | AesDerivedKeyParams | HmacImportParams | HkdfParams | Pbkdf2Params, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/digest)
     */
    digest(algorithm: AlgorithmIdentifier, data: BufferSource): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/encrypt)
     */
    encrypt(algorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/exportKey)
     */
    exportKey(format: "jwk", key: CryptoKey): Promise<JsonWebKey>;
    exportKey(format: Exclude<KeyFormat, "jwk">, key: CryptoKey): Promise<ArrayBuffer>;
    exportKey(format: KeyFormat, key: CryptoKey): Promise<ArrayBuffer | JsonWebKey>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/generateKey)
     */
    generateKey(algorithm: "Ed25519" | { name: "Ed25519" }, extractable: boolean, keyUsages: ReadonlyArray<"sign" | "verify">): Promise<CryptoKeyPair>;
    generateKey(algorithm: RsaHashedKeyGenParams | EcKeyGenParams, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKeyPair>;
    generateKey(algorithm: AesKeyGenParams | HmacKeyGenParams | Pbkdf2Params, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;
    generateKey(algorithm: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKeyPair | CryptoKey>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/importKey)
     */
    importKey(format: "jwk", keyData: JsonWebKey, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: ReadonlyArray<KeyUsage>): Promise<CryptoKey>;
    importKey(format: Exclude<KeyFormat, "jwk">, keyData: BufferSource, algorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/sign)
     */
    sign(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, data: BufferSource): Promise<ArrayBuffer>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/unwrapKey)
     */
    unwrapKey(format: KeyFormat, wrappedKey: BufferSource, unwrappingKey: CryptoKey, unwrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams, unwrappedKeyAlgorithm: AlgorithmIdentifier | RsaHashedImportParams | EcKeyImportParams | HmacImportParams | AesKeyAlgorithm, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/verify)
     */
    verify(algorithm: AlgorithmIdentifier | RsaPssParams | EcdsaParams, key: CryptoKey, signature: BufferSource, data: BufferSource): Promise<boolean>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/SubtleCrypto/wrapKey)
     */
    wrapKey(format: KeyFormat, key: CryptoKey, wrappingKey: CryptoKey, wrapAlgorithm: AlgorithmIdentifier | RsaOaepParams | AesCtrParams | AesCbcParams | AesGcmParams): Promise<ArrayBuffer>;
}

declare var SubtleCrypto: {
    prototype: SubtleCrypto;
    new(): SubtleCrypto;
};

/**
 * The **`Text`** interface represents a text Node in a DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text)
 */
interface Text extends CharacterData, Slottable {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text/wholeText)
     */
    readonly wholeText: string;
    /**
     * Type: Text
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Text/splitText)
     */
    splitText(offset: number): Text;
}

declare var Text: {
    prototype: Text;
    new(data?: string): Text;
};

/**
 * The **`TextDecoder`** interface represents a decoder for a specific text encoding, such as `UTF-8`, `ISO-8859-2`, `KOI8-R`, `GBK`, etc.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder)
 */
interface TextDecoder extends TextDecoderCommon {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/decode)
     */
    decode(input?: AllowSharedBufferSource, options?: TextDecodeOptions): string;
}

declare var TextDecoder: {
    prototype: TextDecoder;
    new(label?: string, options?: TextDecoderOptions): TextDecoder;
};

interface TextDecoderCommon {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/encoding)
     */
    readonly encoding: string;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/fatal)
     */
    readonly fatal: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoder/ignoreBOM)
     */
    readonly ignoreBOM: boolean;
}

/**
 * The **`TextDecoderStream`** interface of the Encoding API converts a stream of text in a binary encoding, such as UTF-8 etc., to a stream of strings.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextDecoderStream)
 */
interface TextDecoderStream extends GenericTransformStream, TextDecoderCommon {
    readonly readable: ReadableStream<string>;
    readonly writable: WritableStream<BufferSource>;
}

declare var TextDecoderStream: {
    prototype: TextDecoderStream;
    new(label?: string, options?: TextDecoderOptions): TextDecoderStream;
};

/**
 * The **`TextEncoder`** interface takes a stream of code points as input and emits a stream of UTF-8 bytes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder)
 */
interface TextEncoder extends TextEncoderCommon {
    /**
     * Type: Uint8Array
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encode)
     */
    encode(input?: string): Uint8Array<ArrayBuffer>;
    /**
     * Type: TextEncoderEncodeIntoResult
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encodeInto)
     */
    encodeInto(source: string, destination: Uint8Array<ArrayBufferLike>): TextEncoderEncodeIntoResult;
}

declare var TextEncoder: {
    prototype: TextEncoder;
    new(): TextEncoder;
};

interface TextEncoderCommon {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoder/encoding)
     */
    readonly encoding: string;
}

/**
 * The **`TextEncoderStream`** interface of the Encoding API converts a stream of strings into bytes in the UTF-8 encoding.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEncoderStream)
 */
interface TextEncoderStream extends GenericTransformStream, TextEncoderCommon {
    readonly readable: ReadableStream<Uint8Array<ArrayBuffer>>;
    readonly writable: WritableStream<string>;
}

declare var TextEncoderStream: {
    prototype: TextEncoderStream;
    new(): TextEncoderStream;
};

/**
 * The **`TextEvent`** interface is a legacy UI event interface for reporting changes to text UI elements.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEvent)
 */
interface TextEvent extends UIEvent {
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEvent/data)
     */
    readonly data: string;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextEvent/initTextEvent)
     */
    initTextEvent(type: string, bubbles?: boolean, cancelable?: boolean, view?: Window | null, data?: string): void;
}

/** @deprecated */
declare var TextEvent: {
    prototype: TextEvent;
    new(): TextEvent;
};

/**
 * The **`TextMetrics`** interface represents the dimensions of a piece of text in the canvas; a `TextMetrics` instance can be retrieved using the CanvasRenderingContext2D.measureText() method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics)
 */
interface TextMetrics {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxAscent)
     */
    readonly actualBoundingBoxAscent: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxDescent)
     */
    readonly actualBoundingBoxDescent: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxLeft)
     */
    readonly actualBoundingBoxLeft: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/actualBoundingBoxRight)
     */
    readonly actualBoundingBoxRight: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/alphabeticBaseline)
     */
    readonly alphabeticBaseline: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightAscent)
     */
    readonly emHeightAscent: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/emHeightDescent)
     */
    readonly emHeightDescent: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxAscent)
     */
    readonly fontBoundingBoxAscent: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/fontBoundingBoxDescent)
     */
    readonly fontBoundingBoxDescent: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/hangingBaseline)
     */
    readonly hangingBaseline: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/ideographicBaseline)
     */
    readonly ideographicBaseline: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextMetrics/width)
     */
    readonly width: number;
}

declare var TextMetrics: {
    prototype: TextMetrics;
    new(): TextMetrics;
};

interface TextTrackEventMap {
    "cuechange": Event;
}

/**
 * The **`TextTrack`** interface of the WebVTT API represents a text track associated with a media element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack)
 */
interface TextTrack extends EventTarget {
    /**
     * Type: TextTrackCueList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/activeCues)
     */
    readonly activeCues: TextTrackCueList | null;
    /**
     * Type: TextTrackCueList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cues)
     */
    readonly cues: TextTrackCueList | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/id)
     */
    readonly id: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/inBandMetadataTrackDispatchType)
     */
    readonly inBandMetadataTrackDispatchType: string;
    /**
     * Type: TextTrackKind
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/kind)
     */
    readonly kind: TextTrackKind;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/label)
     */
    readonly label: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/language)
     */
    readonly language: string;
    /**
     * Type: TextTrackMode
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/mode)
     */
    mode: TextTrackMode;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/cuechange_event)
     */
    oncuechange: ((this: TextTrack, ev: Event) => any) | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/addCue)
     */
    addCue(cue: TextTrackCue): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrack/removeCue)
     */
    removeCue(cue: TextTrackCue): void;
    addEventListener<K extends keyof TextTrackEventMap>(type: K, listener: (this: TextTrack, ev: TextTrackEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof TextTrackEventMap>(type: K, listener: (this: TextTrack, ev: TextTrackEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var TextTrack: {
    prototype: TextTrack;
    new(): TextTrack;
};

interface TextTrackCueEventMap {
    "enter": Event;
    "exit": Event;
}

/**
 * The **`TextTrackCue`** interface of the WebVTT API is the abstract base class for the various derived cue types, such as VTTCue; you will work with these derived types rather than the base class.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue)
 */
interface TextTrackCue extends EventTarget {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/endTime)
     */
    endTime: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/id)
     */
    id: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/enter_event)
     */
    onenter: ((this: TextTrackCue, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/exit_event)
     */
    onexit: ((this: TextTrackCue, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/pauseOnExit)
     */
    pauseOnExit: boolean;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/startTime)
     */
    startTime: number;
    /**
     * Type: TextTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCue/track)
     */
    readonly track: TextTrack | null;
    addEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: TextTrackCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var TextTrackCue: {
    prototype: TextTrackCue;
    new(): TextTrackCue;
};

/**
 * The **`TextTrackCueList`** interface of the WebVTT API is an array-like object that represents a dynamically updating list of TextTrackCue objects.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList)
 */
interface TextTrackCueList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/length)
     */
    readonly length: number;
    /**
     * Type: TextTrackCue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackCueList/getCueById)
     */
    getCueById(id: string): TextTrackCue | null;
    [index: number]: TextTrackCue;
}

declare var TextTrackCueList: {
    prototype: TextTrackCueList;
    new(): TextTrackCueList;
};

interface TextTrackListEventMap {
    "addtrack": TrackEvent;
    "change": Event;
    "removetrack": TrackEvent;
}

/**
 * The **`TextTrackList`** interface is used to represent a list of the text tracks defined for the associated video or audio element, with each track represented by a separate textTrack object in the list.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList)
 */
interface TextTrackList extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/length)
     */
    readonly length: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/addtrack_event)
     */
    onaddtrack: ((this: TextTrackList, ev: TrackEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/change_event)
     */
    onchange: ((this: TextTrackList, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/removetrack_event)
     */
    onremovetrack: ((this: TextTrackList, ev: TrackEvent) => any) | null;
    /**
     * Type: TextTrack
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TextTrackList/getTrackById)
     */
    getTrackById(id: string): TextTrack | null;
    addEventListener<K extends keyof TextTrackListEventMap>(type: K, listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof TextTrackListEventMap>(type: K, listener: (this: TextTrackList, ev: TextTrackListEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    [index: number]: TextTrack;
}

declare var TextTrackList: {
    prototype: TextTrackList;
    new(): TextTrackList;
};

/**
 * When loading a media resource for use by an audio or video element, the **`TimeRanges`** interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges)
 */
interface TimeRanges {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/length)
     */
    readonly length: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/end)
     */
    end(index: number): number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TimeRanges/start)
     */
    start(index: number): number;
}

declare var TimeRanges: {
    prototype: TimeRanges;
    new(): TimeRanges;
};

/**
 * The **`ToggleEvent`** interface represents an event notifying the user an Element's state has changed.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent)
 */
interface ToggleEvent extends Event {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/newState)
     */
    readonly newState: string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ToggleEvent/oldState)
     */
    readonly oldState: string;
}

declare var ToggleEvent: {
    prototype: ToggleEvent;
    new(type: string, eventInitDict?: ToggleEventInit): ToggleEvent;
};

/**
 * The **`Touch`** interface represents a single contact point on a touch-sensitive device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch)
 */
interface Touch {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientX)
     */
    readonly clientX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/clientY)
     */
    readonly clientY: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/force)
     */
    readonly force: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/identifier)
     */
    readonly identifier: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageX)
     */
    readonly pageX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/pageY)
     */
    readonly pageY: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusX)
     */
    readonly radiusX: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/radiusY)
     */
    readonly radiusY: number;
    /**
     * Type: float
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/rotationAngle)
     */
    readonly rotationAngle: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenX)
     */
    readonly screenX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/screenY)
     */
    readonly screenY: number;
    /**
     * Type: EventTarget
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Touch/target)
     */
    readonly target: EventTarget;
}

declare var Touch: {
    prototype: Touch;
    new(touchInitDict: TouchInit): Touch;
};

/**
 * The **`TouchEvent`** interface represents an UIEvent which is sent when the state of contacts with a touch-sensitive surface changes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent)
 */
interface TouchEvent extends UIEvent {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/altKey)
     */
    readonly altKey: boolean;
    /**
     * Type: TouchList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/changedTouches)
     */
    readonly changedTouches: TouchList;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/ctrlKey)
     */
    readonly ctrlKey: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/metaKey)
     */
    readonly metaKey: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/shiftKey)
     */
    readonly shiftKey: boolean;
    /**
     * Type: TouchList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/targetTouches)
     */
    readonly targetTouches: TouchList;
    /**
     * Type: TouchList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchEvent/touches)
     */
    readonly touches: TouchList;
}

declare var TouchEvent: {
    prototype: TouchEvent;
    new(type: string, eventInitDict?: TouchEventInit): TouchEvent;
};

/**
 * The **`TouchList`** interface represents a list of contact points on a touch surface.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList)
 */
interface TouchList {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/length)
     */
    readonly length: number;
    /**
     * Type: Touch
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TouchList/item)
     */
    item(index: number): Touch | null;
    [index: number]: Touch;
}

declare var TouchList: {
    prototype: TouchList;
    new(): TouchList;
};

/**
 * The **`TrackEvent`** interface of the HTML DOM API is used for events which represent changes to a set of available tracks on an HTML media element; these events are `addtrack` and `removetrack`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent)
 */
interface TrackEvent extends Event {
    /**
     * Type: [object Object],[object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TrackEvent/track)
     */
    readonly track: TextTrack | null;
}

declare var TrackEvent: {
    prototype: TrackEvent;
    new(type: string, eventInitDict?: TrackEventInit): TrackEvent;
};

/**
 * The **`TransformStream`** interface of the Streams API represents a concrete implementation of the pipe chain _transform stream_ concept.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream)
 */
interface TransformStream<I = any, O = any> {
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/readable)
     */
    readonly readable: ReadableStream<O>;
    /**
     * Type: WritableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStream/writable)
     */
    readonly writable: WritableStream<I>;
}

declare var TransformStream: {
    prototype: TransformStream;
    new<I = any, O = any>(transformer?: Transformer<I, O>, writableStrategy?: QueuingStrategy<I>, readableStrategy?: QueuingStrategy<O>): TransformStream<I, O>;
};

/**
 * The **`TransformStreamDefaultController`** interface of the Streams API provides methods to manipulate the associated ReadableStream and WritableStream.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController)
 */
interface TransformStreamDefaultController<O = any> {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/desiredSize)
     */
    readonly desiredSize: number | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/enqueue)
     */
    enqueue(chunk?: O): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/error)
     */
    error(reason?: any): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransformStreamDefaultController/terminate)
     */
    terminate(): void;
}

declare var TransformStreamDefaultController: {
    prototype: TransformStreamDefaultController;
    new(): TransformStreamDefaultController;
};

/**
 * The **`TransitionEvent`** interface represents events providing information related to transitions.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent)
 */
interface TransitionEvent extends Event {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/elapsedTime)
     */
    readonly elapsedTime: number;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/propertyName)
     */
    readonly propertyName: string;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TransitionEvent/pseudoElement)
     */
    readonly pseudoElement: string;
}

declare var TransitionEvent: {
    prototype: TransitionEvent;
    new(type: string, transitionEventInitDict?: TransitionEventInit): TransitionEvent;
};

/**
 * The **`TreeWalker`** object represents the nodes of a document subtree and a position within them.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker)
 */
interface TreeWalker {
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/currentNode)
     */
    currentNode: Node;
    /**
     * Type: NodeFilter
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/filter)
     */
    readonly filter: NodeFilter | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/root)
     */
    readonly root: Node;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/whatToShow)
     */
    readonly whatToShow: number;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/firstChild)
     */
    firstChild(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/lastChild)
     */
    lastChild(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextNode)
     */
    nextNode(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/nextSibling)
     */
    nextSibling(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/parentNode)
     */
    parentNode(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousNode)
     */
    previousNode(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/TreeWalker/previousSibling)
     */
    previousSibling(): Node | null;
}

declare var TreeWalker: {
    prototype: TreeWalker;
    new(): TreeWalker;
};

/**
 * The **`UIEvent`** interface represents simple user interface events.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent)
 */
interface UIEvent extends Event {
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/detail)
     */
    readonly detail: number;
    /**
     * Type: Window
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/view)
     */
    readonly view: Window | null;
    /**
     * Type: unsigned long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/which)
     */
    readonly which: number;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UIEvent/initUIEvent)
     */
    initUIEvent(typeArg: string, bubblesArg?: boolean, cancelableArg?: boolean, viewArg?: Window | null, detailArg?: number): void;
}

declare var UIEvent: {
    prototype: UIEvent;
    new(type: string, eventInitDict?: UIEventInit): UIEvent;
};

/**
 * The **`URL`** interface is used to parse, construct, normalize, and encode URL.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL)
 */
interface URL {
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hash)
     */
    hash: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/host)
     */
    host: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/hostname)
     */
    hostname: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/href)
     */
    href: string;
    toString(): string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/origin)
     */
    readonly origin: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/password)
     */
    password: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/pathname)
     */
    pathname: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/port)
     */
    port: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/protocol)
     */
    protocol: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/search)
     */
    search: string;
    /**
     * Type: URLSearchParams
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/searchParams)
     */
    readonly searchParams: URLSearchParams;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/username)
     */
    username: string;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/toJSON)
     */
    toJSON(): string;
}

declare var URL: {
    prototype: URL;
    new(url: string | URL, base?: string | URL): URL;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/canParse_static)
     */
    canParse(url: string | URL, base?: string | URL): boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/createObjectURL_static)
     */
    createObjectURL(obj: Blob | MediaSource): string;
    /**
     * Type: URL
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/parse_static)
     */
    parse(url: string | URL, base?: string | URL): URL | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URL/revokeObjectURL_static)
     */
    revokeObjectURL(url: string): void;
};

type webkitURL = URL;
declare var webkitURL: typeof URL;

/**
 * The **`URLSearchParams`** interface defines utility methods to work with the query string of a URL.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams)
 */
interface URLSearchParams {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/size)
     */
    readonly size: number;
    /**
     * Appends a specified key/value pair as a new search parameter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/append)
     */
    append(name: string, value: string): void;
    /**
     * Deletes the given search parameter, and its associated value, from the list of all search parameters.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/delete)
     */
    delete(name: string, value?: string): void;
    /**
     * Returns the first value associated to the given search parameter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/get)
     */
    get(name: string): string | null;
    /**
     * Returns all the values association with a given search parameter.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/getAll)
     */
    getAll(name: string): string[];
    /**
     * Returns a Boolean indicating if such a search parameter exists.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/has)
     */
    has(name: string, value?: string): boolean;
    /**
     * Sets the value associated to a given search parameter to the given value. If there were several values, delete the others.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/set)
     */
    set(name: string, value: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/URLSearchParams/sort)
     */
    sort(): void;
    /** Returns a string containing a query string suitable for use in a URL. Does not include the question mark. */
    toString(): string;
    forEach(callbackfn: (value: string, key: string, parent: URLSearchParams) => void, thisArg?: any): void;
}

declare var URLSearchParams: {
    prototype: URLSearchParams;
    new(init?: string[][] | Record<string, string> | string | URLSearchParams): URLSearchParams;
};

/**
 * The **`UserActivation`** interface provides information about whether a user is currently interacting with the page, or has completed an interaction since page load.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation)
 */
interface UserActivation {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/hasBeenActive)
     */
    readonly hasBeenActive: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/UserActivation/isActive)
     */
    readonly isActive: boolean;
}

declare var UserActivation: {
    prototype: UserActivation;
    new(): UserActivation;
};

/**
 * The `VTTCue` interface of the WebVTT API represents a cue that can be added to the text track associated with a particular video (or other media).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue)
 */
interface VTTCue extends TextTrackCue {
    /**
     * Type: AlignSetting
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/align)
     */
    align: AlignSetting;
    /**
     * Type: LineAndPositionSetting
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/line)
     */
    line: LineAndPositionSetting;
    /**
     * Type: LineAlignSetting
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/lineAlign)
     */
    lineAlign: LineAlignSetting;
    /**
     * Type: LineAndPositionSetting
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/position)
     */
    position: LineAndPositionSetting;
    /**
     * Type: PositionAlignSetting
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/positionAlign)
     */
    positionAlign: PositionAlignSetting;
    /**
     * Type: VTTRegion
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/region)
     */
    region: VTTRegion | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/size)
     */
    size: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/snapToLines)
     */
    snapToLines: boolean;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/text)
     */
    text: string;
    /**
     * Type: DirectionSetting
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/vertical)
     */
    vertical: DirectionSetting;
    /**
     * Type: DocumentFragment
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTCue/getCueAsHTML)
     */
    getCueAsHTML(): DocumentFragment;
    addEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: VTTCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof TextTrackCueEventMap>(type: K, listener: (this: VTTCue, ev: TextTrackCueEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var VTTCue: {
    prototype: VTTCue;
    new(startTime: number, endTime: number, text: string): VTTCue;
};

/**
 * The `VTTRegion` interface of the WebVTT API describes a portion of the video to render a VTTCue onto.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VTTRegion)
 */
interface VTTRegion {
    /** Type: DOMString */
    id: string;
    /** Type: unsigned long */
    lines: number;
    /** Type: double */
    regionAnchorX: number;
    /** Type: double */
    regionAnchorY: number;
    /** Type: ScrollSetting */
    scroll: ScrollSetting;
    /** Type: double */
    viewportAnchorX: number;
    /** Type: double */
    viewportAnchorY: number;
    /** Type: double */
    width: number;
}

declare var VTTRegion: {
    prototype: VTTRegion;
    new(): VTTRegion;
};

/**
 * The **`ValidityState`** interface represents the _validity states_ that an element can be in, with respect to constraint validation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState)
 */
interface ValidityState {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/badInput)
     */
    readonly badInput: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/customError)
     */
    readonly customError: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/patternMismatch)
     */
    readonly patternMismatch: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeOverflow)
     */
    readonly rangeOverflow: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/rangeUnderflow)
     */
    readonly rangeUnderflow: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/stepMismatch)
     */
    readonly stepMismatch: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooLong)
     */
    readonly tooLong: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/tooShort)
     */
    readonly tooShort: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/typeMismatch)
     */
    readonly typeMismatch: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valid)
     */
    readonly valid: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ValidityState/valueMissing)
     */
    readonly valueMissing: boolean;
}

declare var ValidityState: {
    prototype: ValidityState;
    new(): ValidityState;
};

/**
 * The **`VideoColorSpace`** interface of the WebCodecs API represents the color space of a video.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace)
 */
interface VideoColorSpace {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/fullRange)
     */
    readonly fullRange: boolean | null;
    /**
     * Type: VideoMatrixCoefficients
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/matrix)
     */
    readonly matrix: VideoMatrixCoefficients | null;
    /**
     * Type: VideoColorPrimaries
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/primaries)
     */
    readonly primaries: VideoColorPrimaries | null;
    /**
     * Type: VideoTransferCharacteristics
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/transfer)
     */
    readonly transfer: VideoTransferCharacteristics | null;
    /**
     * Type: VideoColorSpaceInit
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoColorSpace/toJSON)
     */
    toJSON(): VideoColorSpaceInit;
}

declare var VideoColorSpace: {
    prototype: VideoColorSpace;
    new(init?: VideoColorSpaceInit): VideoColorSpace;
};

interface VideoDecoderEventMap {
    "dequeue": Event;
}

/**
 * The **`VideoDecoder`** interface of the WebCodecs API decodes chunks of video.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder)
 */
interface VideoDecoder extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decodeQueueSize)
     */
    readonly decodeQueueSize: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/dequeue_event)
     */
    ondequeue: ((this: VideoDecoder, ev: Event) => any) | null;
    /**
     * Type: CodecState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/state)
     */
    readonly state: CodecState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/configure)
     */
    configure(config: VideoDecoderConfig): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/decode)
     */
    decode(chunk: EncodedVideoChunk): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/flush)
     */
    flush(): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/reset)
     */
    reset(): void;
    addEventListener<K extends keyof VideoDecoderEventMap>(type: K, listener: (this: VideoDecoder, ev: VideoDecoderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof VideoDecoderEventMap>(type: K, listener: (this: VideoDecoder, ev: VideoDecoderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var VideoDecoder: {
    prototype: VideoDecoder;
    new(init: VideoDecoderInit): VideoDecoder;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoDecoder/isConfigSupported_static)
     */
    isConfigSupported(config: VideoDecoderConfig): Promise<VideoDecoderSupport>;
};

interface VideoEncoderEventMap {
    "dequeue": Event;
}

/**
 * The **`VideoEncoder`** interface of the WebCodecs API encodes VideoFrame objects into EncodedVideoChunks.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder)
 */
interface VideoEncoder extends EventTarget {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encodeQueueSize)
     */
    readonly encodeQueueSize: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/dequeue_event)
     */
    ondequeue: ((this: VideoEncoder, ev: Event) => any) | null;
    /**
     * Type: CodecState
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/state)
     */
    readonly state: CodecState;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/close)
     */
    close(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/configure)
     */
    configure(config: VideoEncoderConfig): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/encode)
     */
    encode(frame: VideoFrame, options?: VideoEncoderEncodeOptions): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/flush)
     */
    flush(): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/reset)
     */
    reset(): void;
    addEventListener<K extends keyof VideoEncoderEventMap>(type: K, listener: (this: VideoEncoder, ev: VideoEncoderEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof VideoEncoderEventMap>(type: K, listener: (this: VideoEncoder, ev: VideoEncoderEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var VideoEncoder: {
    prototype: VideoEncoder;
    new(init: VideoEncoderInit): VideoEncoder;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoEncoder/isConfigSupported_static)
     */
    isConfigSupported(config: VideoEncoderConfig): Promise<VideoEncoderSupport>;
};

/**
 * The **`VideoFrame`** interface of the Web Codecs API represents a frame of a video.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame)
 */
interface VideoFrame {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedHeight)
     */
    readonly codedHeight: number;
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedRect)
     */
    readonly codedRect: DOMRectReadOnly | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/codedWidth)
     */
    readonly codedWidth: number;
    /**
     * Type: VideoColorSpace
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/colorSpace)
     */
    readonly colorSpace: VideoColorSpace;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayHeight)
     */
    readonly displayHeight: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/displayWidth)
     */
    readonly displayWidth: number;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/duration)
     */
    readonly duration: number | null;
    /**
     * Type: VideoPixelFormat
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/format)
     */
    readonly format: VideoPixelFormat | null;
    /**
     * Type: long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/timestamp)
     */
    readonly timestamp: number;
    /**
     * Type: DOMRectReadOnly
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/visibleRect)
     */
    readonly visibleRect: DOMRectReadOnly | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/allocationSize)
     */
    allocationSize(options?: VideoFrameCopyToOptions): number;
    /**
     * Type: VideoFrame
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/clone)
     */
    clone(): VideoFrame;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/close)
     */
    close(): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoFrame/copyTo)
     */
    copyTo(destination: AllowSharedBufferSource, options?: VideoFrameCopyToOptions): Promise<PlaneLayout[]>;
}

declare var VideoFrame: {
    prototype: VideoFrame;
    new(image: CanvasImageSource, init?: VideoFrameInit): VideoFrame;
    new(data: AllowSharedBufferSource, init: VideoFrameBufferInit): VideoFrame;
};

/**
 * A **`VideoPlaybackQuality`** object is returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality)
 */
interface VideoPlaybackQuality {
    /**
     * Type: unsigned long
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/corruptedVideoFrames)
     */
    readonly corruptedVideoFrames: number;
    /**
     * Type: DOMHighResTimeStamp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/creationTime)
     */
    readonly creationTime: DOMHighResTimeStamp;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/droppedVideoFrames)
     */
    readonly droppedVideoFrames: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VideoPlaybackQuality/totalVideoFrames)
     */
    readonly totalVideoFrames: number;
}

declare var VideoPlaybackQuality: {
    prototype: VideoPlaybackQuality;
    new(): VideoPlaybackQuality;
};

/**
 * The **`ViewTransition`** interface of the View Transition API represents an active view transition, and provides functionality to react to the transition reaching different states (e.g., ready to run the animation, or animation finished) or skip the transition altogether.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition)
 */
interface ViewTransition {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/finished)
     */
    readonly finished: Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/ready)
     */
    readonly ready: Promise<void>;
    /** Type: ViewTransitionTypeSet */
    types: ViewTransitionTypeSet;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/updateCallbackDone)
     */
    readonly updateCallbackDone: Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/ViewTransition/skipTransition)
     */
    skipTransition(): void;
}

declare var ViewTransition: {
    prototype: ViewTransition;
    new(): ViewTransition;
};

interface ViewTransitionTypeSet {
    forEach(callbackfn: (value: string, key: string, parent: ViewTransitionTypeSet) => void, thisArg?: any): void;
}

declare var ViewTransitionTypeSet: {
    prototype: ViewTransitionTypeSet;
    new(): ViewTransitionTypeSet;
};

interface VisualViewportEventMap {
    "resize": Event;
    "scroll": Event;
}

/**
 * The **`VisualViewport`** interface of the Visual Viewport API represents the visual viewport for a given window.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport)
 */
interface VisualViewport extends EventTarget {
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/height)
     */
    readonly height: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetLeft)
     */
    readonly offsetLeft: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/offsetTop)
     */
    readonly offsetTop: number;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/resize_event)
     */
    onresize: ((this: VisualViewport, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scroll_event)
     */
    onscroll: ((this: VisualViewport, ev: Event) => any) | null;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageLeft)
     */
    readonly pageLeft: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/pageTop)
     */
    readonly pageTop: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/scale)
     */
    readonly scale: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/VisualViewport/width)
     */
    readonly width: number;
    addEventListener<K extends keyof VisualViewportEventMap>(type: K, listener: (this: VisualViewport, ev: VisualViewportEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof VisualViewportEventMap>(type: K, listener: (this: VisualViewport, ev: VisualViewportEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var VisualViewport: {
    prototype: VisualViewport;
    new(): VisualViewport;
};

/**
 * The **`WEBGL_color_buffer_float`** extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_color_buffer_float)
 */
interface WEBGL_color_buffer_float {
    /** Type: GLenum */
    readonly RGBA32F_EXT: 0x8814;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT: 0x8211;
    /** Type: GLenum */
    readonly UNSIGNED_NORMALIZED_EXT: 0x8C17;
}

/**
 * The **`WEBGL_compressed_texture_astc`** extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc)
 */
interface WEBGL_compressed_texture_astc {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_astc/getSupportedProfiles)
     */
    getSupportedProfiles(): string[];
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_4x4_KHR: 0x93B0;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_5x4_KHR: 0x93B1;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_5x5_KHR: 0x93B2;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_6x5_KHR: 0x93B3;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_6x6_KHR: 0x93B4;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_8x5_KHR: 0x93B5;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_8x6_KHR: 0x93B6;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_8x8_KHR: 0x93B7;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_10x5_KHR: 0x93B8;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_10x6_KHR: 0x93B9;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_10x8_KHR: 0x93BA;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_10x10_KHR: 0x93BB;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_12x10_KHR: 0x93BC;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_ASTC_12x12_KHR: 0x93BD;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR: 0x93D0;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR: 0x93D1;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR: 0x93D2;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR: 0x93D3;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR: 0x93D4;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR: 0x93D5;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR: 0x93D6;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR: 0x93D7;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR: 0x93D8;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR: 0x93D9;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR: 0x93DA;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR: 0x93DB;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR: 0x93DC;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR: 0x93DD;
}

/**
 * The **`WEBGL_compressed_texture_etc`** extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc)
 */
interface WEBGL_compressed_texture_etc {
    /** Type: GLenum */
    readonly COMPRESSED_R11_EAC: 0x9270;
    /** Type: GLenum */
    readonly COMPRESSED_SIGNED_R11_EAC: 0x9271;
    /** Type: GLenum */
    readonly COMPRESSED_RG11_EAC: 0x9272;
    /** Type: GLenum */
    readonly COMPRESSED_SIGNED_RG11_EAC: 0x9273;
    /** Type: GLenum */
    readonly COMPRESSED_RGB8_ETC2: 0x9274;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ETC2: 0x9275;
    /** Type: GLenum */
    readonly COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9276;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2: 0x9277;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA8_ETC2_EAC: 0x9278;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB8_ALPHA8_ETC2_EAC: 0x9279;
}

/**
 * The **`WEBGL_compressed_texture_etc1`** extension is part of the WebGL API and exposes the ETC1 compressed texture format.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_etc1)
 */
interface WEBGL_compressed_texture_etc1 {
    /** Type: GLenum */
    readonly COMPRESSED_RGB_ETC1_WEBGL: 0x8D64;
}

/**
 * The **`WEBGL_compressed_texture_pvrtc`** extension is part of the WebGL API and exposes four PVRTC compressed texture formats.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_pvrtc)
 */
interface WEBGL_compressed_texture_pvrtc {
    /** Type: GLenum */
    readonly COMPRESSED_RGB_PVRTC_4BPPV1_IMG: 0x8C00;
    /** Type: GLenum */
    readonly COMPRESSED_RGB_PVRTC_2BPPV1_IMG: 0x8C01;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_PVRTC_4BPPV1_IMG: 0x8C02;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_PVRTC_2BPPV1_IMG: 0x8C03;
}

/**
 * The **`WEBGL_compressed_texture_s3tc`** extension is part of the WebGL API and exposes four S3TC compressed texture formats.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc)
 */
interface WEBGL_compressed_texture_s3tc {
    /** Type: GLenum */
    readonly COMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2;
    /** Type: GLenum */
    readonly COMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3;
}

/**
 * The **`WEBGL_compressed_texture_s3tc_srgb`** extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_compressed_texture_s3tc_srgb)
 */
interface WEBGL_compressed_texture_s3tc_srgb {
    /** Type: GLenum */
    readonly COMPRESSED_SRGB_S3TC_DXT1_EXT: 0x8C4C;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT: 0x8C4D;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT: 0x8C4E;
    /** Type: GLenum */
    readonly COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT: 0x8C4F;
}

/**
 * The **`WEBGL_debug_renderer_info`** extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_renderer_info)
 */
interface WEBGL_debug_renderer_info {
    /** Type: GLenum */
    readonly UNMASKED_VENDOR_WEBGL: 0x9245;
    /** Type: GLenum */
    readonly UNMASKED_RENDERER_WEBGL: 0x9246;
}

/**
 * The **`WEBGL_debug_shaders`** extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders)
 */
interface WEBGL_debug_shaders {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_debug_shaders/getTranslatedShaderSource)
     */
    getTranslatedShaderSource(shader: WebGLShader): string;
}

/**
 * The **`WEBGL_depth_texture`** extension is part of the WebGL API and defines 2D depth and depth-stencil textures.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_depth_texture)
 */
interface WEBGL_depth_texture {
    /** Type: GLenum */
    readonly UNSIGNED_INT_24_8_WEBGL: 0x84FA;
}

/**
 * The **`WEBGL_draw_buffers`** extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers)
 */
interface WEBGL_draw_buffers {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_draw_buffers/drawBuffersWEBGL)
     */
    drawBuffersWEBGL(buffers: GLenum[]): void;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT0_WEBGL: 0x8CE0;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT1_WEBGL: 0x8CE1;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT2_WEBGL: 0x8CE2;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT3_WEBGL: 0x8CE3;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT4_WEBGL: 0x8CE4;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT5_WEBGL: 0x8CE5;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT6_WEBGL: 0x8CE6;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT7_WEBGL: 0x8CE7;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT8_WEBGL: 0x8CE8;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT9_WEBGL: 0x8CE9;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT10_WEBGL: 0x8CEA;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT11_WEBGL: 0x8CEB;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT12_WEBGL: 0x8CEC;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT13_WEBGL: 0x8CED;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT14_WEBGL: 0x8CEE;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT15_WEBGL: 0x8CEF;
    /** Type: GLenum */
    readonly DRAW_BUFFER0_WEBGL: 0x8825;
    /** Type: GLenum */
    readonly DRAW_BUFFER1_WEBGL: 0x8826;
    /** Type: GLenum */
    readonly DRAW_BUFFER2_WEBGL: 0x8827;
    /** Type: GLenum */
    readonly DRAW_BUFFER3_WEBGL: 0x8828;
    /** Type: GLenum */
    readonly DRAW_BUFFER4_WEBGL: 0x8829;
    /** Type: GLenum */
    readonly DRAW_BUFFER5_WEBGL: 0x882A;
    /** Type: GLenum */
    readonly DRAW_BUFFER6_WEBGL: 0x882B;
    /** Type: GLenum */
    readonly DRAW_BUFFER7_WEBGL: 0x882C;
    /** Type: GLenum */
    readonly DRAW_BUFFER8_WEBGL: 0x882D;
    /** Type: GLenum */
    readonly DRAW_BUFFER9_WEBGL: 0x882E;
    /** Type: GLenum */
    readonly DRAW_BUFFER10_WEBGL: 0x882F;
    /** Type: GLenum */
    readonly DRAW_BUFFER11_WEBGL: 0x8830;
    /** Type: GLenum */
    readonly DRAW_BUFFER12_WEBGL: 0x8831;
    /** Type: GLenum */
    readonly DRAW_BUFFER13_WEBGL: 0x8832;
    /** Type: GLenum */
    readonly DRAW_BUFFER14_WEBGL: 0x8833;
    /** Type: GLenum */
    readonly DRAW_BUFFER15_WEBGL: 0x8834;
    /** Type: GLenum */
    readonly MAX_COLOR_ATTACHMENTS_WEBGL: 0x8CDF;
    /** Type: GLenum */
    readonly MAX_DRAW_BUFFERS_WEBGL: 0x8824;
}

/**
 * The **WEBGL_lose_context** extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context)
 */
interface WEBGL_lose_context {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/loseContext)
     */
    loseContext(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_lose_context/restoreContext)
     */
    restoreContext(): void;
}

/**
 * The **`WEBGL_multi_draw`** extension is part of the WebGL API and allows to render more than one primitive with a single function call.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw)
 */
interface WEBGL_multi_draw {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysInstancedWEBGL)
     */
    multiDrawArraysInstancedWEBGL(mode: GLenum, firstsList: Int32Array<ArrayBufferLike> | GLint[], firstsOffset: number, countsList: Int32Array<ArrayBufferLike> | GLsizei[], countsOffset: number, instanceCountsList: Int32Array<ArrayBufferLike> | GLsizei[], instanceCountsOffset: number, drawcount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawArraysWEBGL)
     */
    multiDrawArraysWEBGL(mode: GLenum, firstsList: Int32Array<ArrayBufferLike> | GLint[], firstsOffset: number, countsList: Int32Array<ArrayBufferLike> | GLsizei[], countsOffset: number, drawcount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsInstancedWEBGL)
     */
    multiDrawElementsInstancedWEBGL(mode: GLenum, countsList: Int32Array<ArrayBufferLike> | GLsizei[], countsOffset: number, type: GLenum, offsetsList: Int32Array<ArrayBufferLike> | GLsizei[], offsetsOffset: number, instanceCountsList: Int32Array<ArrayBufferLike> | GLsizei[], instanceCountsOffset: number, drawcount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WEBGL_multi_draw/multiDrawElementsWEBGL)
     */
    multiDrawElementsWEBGL(mode: GLenum, countsList: Int32Array<ArrayBufferLike> | GLsizei[], countsOffset: number, type: GLenum, offsetsList: Int32Array<ArrayBufferLike> | GLsizei[], offsetsOffset: number, drawcount: GLsizei): void;
}

/**
 * The **`WakeLock`** interface of the Screen Wake Lock API can be used to request a lock that prevents device screens from dimming or locking when an application needs to keep running.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock)
 */
interface WakeLock {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLock/request)
     */
    request(type?: WakeLockType): Promise<WakeLockSentinel>;
}

declare var WakeLock: {
    prototype: WakeLock;
    new(): WakeLock;
};

interface WakeLockSentinelEventMap {
    "release": Event;
}

/**
 * The **`WakeLockSentinel`** interface of the Screen Wake Lock API can be used to monitor the status of the platform screen wake lock, and manually release the lock when needed.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel)
 */
interface WakeLockSentinel extends EventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release_event)
     */
    onrelease: ((this: WakeLockSentinel, ev: Event) => any) | null;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/released)
     */
    readonly released: boolean;
    /**
     * Type: WakeLockType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/type)
     */
    readonly type: WakeLockType;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WakeLockSentinel/release)
     */
    release(): Promise<void>;
    addEventListener<K extends keyof WakeLockSentinelEventMap>(type: K, listener: (this: WakeLockSentinel, ev: WakeLockSentinelEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof WakeLockSentinelEventMap>(type: K, listener: (this: WakeLockSentinel, ev: WakeLockSentinelEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var WakeLockSentinel: {
    prototype: WakeLockSentinel;
    new(): WakeLockSentinel;
};

/**
 * The **`WaveShaperNode`** interface represents a non-linear distorter.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode)
 */
interface WaveShaperNode extends AudioNode {
    /**
     * Type: Float32Array
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/curve)
     */
    curve: Float32Array<ArrayBuffer> | null;
    /**
     * Type: OverSampleType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WaveShaperNode/oversample)
     */
    oversample: OverSampleType;
}

declare var WaveShaperNode: {
    prototype: WaveShaperNode;
    new(context: BaseAudioContext, options?: WaveShaperOptions): WaveShaperNode;
};

/**
 * The **WebGL2RenderingContext** interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML canvas element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext)
 */
interface WebGL2RenderingContext extends WebGL2RenderingContextBase, WebGL2RenderingContextOverloads, WebGLRenderingContextBase {
}

declare var WebGL2RenderingContext: {
    prototype: WebGL2RenderingContext;
    new(): WebGL2RenderingContext;
    /** Type: GLenum */
    readonly READ_BUFFER: 0x0C02;
    /** Type: GLenum */
    readonly UNPACK_ROW_LENGTH: 0x0CF2;
    /** Type: GLenum */
    readonly UNPACK_SKIP_ROWS: 0x0CF3;
    /** Type: GLenum */
    readonly UNPACK_SKIP_PIXELS: 0x0CF4;
    /** Type: GLenum */
    readonly PACK_ROW_LENGTH: 0x0D02;
    /** Type: GLenum */
    readonly PACK_SKIP_ROWS: 0x0D03;
    /** Type: GLenum */
    readonly PACK_SKIP_PIXELS: 0x0D04;
    /** Type: GLenum */
    readonly COLOR: 0x1800;
    /** Type: GLenum */
    readonly DEPTH: 0x1801;
    /** Type: GLenum */
    readonly STENCIL: 0x1802;
    /** Type: GLenum */
    readonly RED: 0x1903;
    /** Type: GLenum */
    readonly RGB8: 0x8051;
    /** Type: GLenum */
    readonly RGB10_A2: 0x8059;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_3D: 0x806A;
    /** Type: GLenum */
    readonly UNPACK_SKIP_IMAGES: 0x806D;
    /** Type: GLenum */
    readonly UNPACK_IMAGE_HEIGHT: 0x806E;
    /** Type: GLenum */
    readonly TEXTURE_3D: 0x806F;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_R: 0x8072;
    /** Type: GLenum */
    readonly MAX_3D_TEXTURE_SIZE: 0x8073;
    /** Type: GLenum */
    readonly UNSIGNED_INT_2_10_10_10_REV: 0x8368;
    /** Type: GLenum */
    readonly MAX_ELEMENTS_VERTICES: 0x80E8;
    /** Type: GLenum */
    readonly MAX_ELEMENTS_INDICES: 0x80E9;
    /** Type: GLenum */
    readonly TEXTURE_MIN_LOD: 0x813A;
    /** Type: GLenum */
    readonly TEXTURE_MAX_LOD: 0x813B;
    /** Type: GLenum */
    readonly TEXTURE_BASE_LEVEL: 0x813C;
    /** Type: GLenum */
    readonly TEXTURE_MAX_LEVEL: 0x813D;
    /** Type: GLenum */
    readonly MIN: 0x8007;
    /** Type: GLenum */
    readonly MAX: 0x8008;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT24: 0x81A6;
    /** Type: GLenum */
    readonly MAX_TEXTURE_LOD_BIAS: 0x84FD;
    /** Type: GLenum */
    readonly TEXTURE_COMPARE_MODE: 0x884C;
    /** Type: GLenum */
    readonly TEXTURE_COMPARE_FUNC: 0x884D;
    /** Type: GLenum */
    readonly CURRENT_QUERY: 0x8865;
    /** Type: GLenum */
    readonly QUERY_RESULT: 0x8866;
    /** Type: GLenum */
    readonly QUERY_RESULT_AVAILABLE: 0x8867;
    /** Type: GLenum */
    readonly STREAM_READ: 0x88E1;
    /** Type: GLenum */
    readonly STREAM_COPY: 0x88E2;
    /** Type: GLenum */
    readonly STATIC_READ: 0x88E5;
    /** Type: GLenum */
    readonly STATIC_COPY: 0x88E6;
    /** Type: GLenum */
    readonly DYNAMIC_READ: 0x88E9;
    /** Type: GLenum */
    readonly DYNAMIC_COPY: 0x88EA;
    /** Type: GLenum */
    readonly MAX_DRAW_BUFFERS: 0x8824;
    /** Type: GLenum */
    readonly DRAW_BUFFER0: 0x8825;
    /** Type: GLenum */
    readonly DRAW_BUFFER1: 0x8826;
    /** Type: GLenum */
    readonly DRAW_BUFFER2: 0x8827;
    /** Type: GLenum */
    readonly DRAW_BUFFER3: 0x8828;
    /** Type: GLenum */
    readonly DRAW_BUFFER4: 0x8829;
    /** Type: GLenum */
    readonly DRAW_BUFFER5: 0x882A;
    /** Type: GLenum */
    readonly DRAW_BUFFER6: 0x882B;
    /** Type: GLenum */
    readonly DRAW_BUFFER7: 0x882C;
    /** Type: GLenum */
    readonly DRAW_BUFFER8: 0x882D;
    /** Type: GLenum */
    readonly DRAW_BUFFER9: 0x882E;
    /** Type: GLenum */
    readonly DRAW_BUFFER10: 0x882F;
    /** Type: GLenum */
    readonly DRAW_BUFFER11: 0x8830;
    /** Type: GLenum */
    readonly DRAW_BUFFER12: 0x8831;
    /** Type: GLenum */
    readonly DRAW_BUFFER13: 0x8832;
    /** Type: GLenum */
    readonly DRAW_BUFFER14: 0x8833;
    /** Type: GLenum */
    readonly DRAW_BUFFER15: 0x8834;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8B49;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_COMPONENTS: 0x8B4A;
    /** Type: GLenum */
    readonly SAMPLER_3D: 0x8B5F;
    /** Type: GLenum */
    readonly SAMPLER_2D_SHADOW: 0x8B62;
    /** Type: GLenum */
    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8B8B;
    /** Type: GLenum */
    readonly PIXEL_PACK_BUFFER: 0x88EB;
    /** Type: GLenum */
    readonly PIXEL_UNPACK_BUFFER: 0x88EC;
    /** Type: GLenum */
    readonly PIXEL_PACK_BUFFER_BINDING: 0x88ED;
    /** Type: GLenum */
    readonly PIXEL_UNPACK_BUFFER_BINDING: 0x88EF;
    /** Type: GLenum */
    readonly FLOAT_MAT2x3: 0x8B65;
    /** Type: GLenum */
    readonly FLOAT_MAT2x4: 0x8B66;
    /** Type: GLenum */
    readonly FLOAT_MAT3x2: 0x8B67;
    /** Type: GLenum */
    readonly FLOAT_MAT3x4: 0x8B68;
    /** Type: GLenum */
    readonly FLOAT_MAT4x2: 0x8B69;
    /** Type: GLenum */
    readonly FLOAT_MAT4x3: 0x8B6A;
    /** Type: GLenum */
    readonly SRGB: 0x8C40;
    /** Type: GLenum */
    readonly SRGB8: 0x8C41;
    /** Type: GLenum */
    readonly SRGB8_ALPHA8: 0x8C43;
    /** Type: GLenum */
    readonly COMPARE_REF_TO_TEXTURE: 0x884E;
    /** Type: GLenum */
    readonly RGBA32F: 0x8814;
    /** Type: GLenum */
    readonly RGB32F: 0x8815;
    /** Type: GLenum */
    readonly RGBA16F: 0x881A;
    /** Type: GLenum */
    readonly RGB16F: 0x881B;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_INTEGER: 0x88FD;
    /** Type: GLenum */
    readonly MAX_ARRAY_TEXTURE_LAYERS: 0x88FF;
    /** Type: GLenum */
    readonly MIN_PROGRAM_TEXEL_OFFSET: 0x8904;
    /** Type: GLenum */
    readonly MAX_PROGRAM_TEXEL_OFFSET: 0x8905;
    /** Type: GLenum */
    readonly MAX_VARYING_COMPONENTS: 0x8B4B;
    /** Type: GLenum */
    readonly TEXTURE_2D_ARRAY: 0x8C1A;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_2D_ARRAY: 0x8C1D;
    /** Type: GLenum */
    readonly R11F_G11F_B10F: 0x8C3A;
    /** Type: GLenum */
    readonly UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B;
    /** Type: GLenum */
    readonly RGB9_E5: 0x8C3D;
    /** Type: GLenum */
    readonly UNSIGNED_INT_5_9_9_9_REV: 0x8C3E;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8C7F;
    /** Type: GLenum */
    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8C80;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_VARYINGS: 0x8C83;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8C85;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88;
    /** Type: GLenum */
    readonly RASTERIZER_DISCARD: 0x8C89;
    /** Type: GLenum */
    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A;
    /** Type: GLenum */
    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B;
    /** Type: GLenum */
    readonly INTERLEAVED_ATTRIBS: 0x8C8C;
    /** Type: GLenum */
    readonly SEPARATE_ATTRIBS: 0x8C8D;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER: 0x8C8E;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8C8F;
    /** Type: GLenum */
    readonly RGBA32UI: 0x8D70;
    /** Type: GLenum */
    readonly RGB32UI: 0x8D71;
    /** Type: GLenum */
    readonly RGBA16UI: 0x8D76;
    /** Type: GLenum */
    readonly RGB16UI: 0x8D77;
    /** Type: GLenum */
    readonly RGBA8UI: 0x8D7C;
    /** Type: GLenum */
    readonly RGB8UI: 0x8D7D;
    /** Type: GLenum */
    readonly RGBA32I: 0x8D82;
    /** Type: GLenum */
    readonly RGB32I: 0x8D83;
    /** Type: GLenum */
    readonly RGBA16I: 0x8D88;
    /** Type: GLenum */
    readonly RGB16I: 0x8D89;
    /** Type: GLenum */
    readonly RGBA8I: 0x8D8E;
    /** Type: GLenum */
    readonly RGB8I: 0x8D8F;
    /** Type: GLenum */
    readonly RED_INTEGER: 0x8D94;
    /** Type: GLenum */
    readonly RGB_INTEGER: 0x8D98;
    /** Type: GLenum */
    readonly RGBA_INTEGER: 0x8D99;
    /** Type: GLenum */
    readonly SAMPLER_2D_ARRAY: 0x8DC1;
    /** Type: GLenum */
    readonly SAMPLER_2D_ARRAY_SHADOW: 0x8DC4;
    /** Type: GLenum */
    readonly SAMPLER_CUBE_SHADOW: 0x8DC5;
    /** Type: GLenum */
    readonly UNSIGNED_INT_VEC2: 0x8DC6;
    /** Type: GLenum */
    readonly UNSIGNED_INT_VEC3: 0x8DC7;
    /** Type: GLenum */
    readonly UNSIGNED_INT_VEC4: 0x8DC8;
    /** Type: GLenum */
    readonly INT_SAMPLER_2D: 0x8DCA;
    /** Type: GLenum */
    readonly INT_SAMPLER_3D: 0x8DCB;
    /** Type: GLenum */
    readonly INT_SAMPLER_CUBE: 0x8DCC;
    /** Type: GLenum */
    readonly INT_SAMPLER_2D_ARRAY: 0x8DCF;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_2D: 0x8DD2;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_3D: 0x8DD3;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT32F: 0x8CAC;
    /** Type: GLenum */
    readonly DEPTH32F_STENCIL8: 0x8CAD;
    /** Type: GLenum */
    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217;
    /** Type: GLenum */
    readonly FRAMEBUFFER_DEFAULT: 0x8218;
    /** Type: GLenum */
    readonly UNSIGNED_INT_24_8: 0x84FA;
    /** Type: GLenum */
    readonly DEPTH24_STENCIL8: 0x88F0;
    /** Type: GLenum */
    readonly UNSIGNED_NORMALIZED: 0x8C17;
    /** Type: GLenum */
    readonly DRAW_FRAMEBUFFER_BINDING: 0x8CA6;
    /** Type: GLenum */
    readonly READ_FRAMEBUFFER: 0x8CA8;
    /** Type: GLenum */
    readonly DRAW_FRAMEBUFFER: 0x8CA9;
    /** Type: GLenum */
    readonly READ_FRAMEBUFFER_BINDING: 0x8CAA;
    /** Type: GLenum */
    readonly RENDERBUFFER_SAMPLES: 0x8CAB;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8CD4;
    /** Type: GLenum */
    readonly MAX_COLOR_ATTACHMENTS: 0x8CDF;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT1: 0x8CE1;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT2: 0x8CE2;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT3: 0x8CE3;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT4: 0x8CE4;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT5: 0x8CE5;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT6: 0x8CE6;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT7: 0x8CE7;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT8: 0x8CE8;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT9: 0x8CE9;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT10: 0x8CEA;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT11: 0x8CEB;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT12: 0x8CEC;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT13: 0x8CED;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT14: 0x8CEE;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT15: 0x8CEF;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8D56;
    /** Type: GLenum */
    readonly MAX_SAMPLES: 0x8D57;
    /** Type: GLenum */
    readonly HALF_FLOAT: 0x140B;
    /** Type: GLenum */
    readonly RG: 0x8227;
    /** Type: GLenum */
    readonly RG_INTEGER: 0x8228;
    /** Type: GLenum */
    readonly R8: 0x8229;
    /** Type: GLenum */
    readonly RG8: 0x822B;
    /** Type: GLenum */
    readonly R16F: 0x822D;
    /** Type: GLenum */
    readonly R32F: 0x822E;
    /** Type: GLenum */
    readonly RG16F: 0x822F;
    /** Type: GLenum */
    readonly RG32F: 0x8230;
    /** Type: GLenum */
    readonly R8I: 0x8231;
    /** Type: GLenum */
    readonly R8UI: 0x8232;
    /** Type: GLenum */
    readonly R16I: 0x8233;
    /** Type: GLenum */
    readonly R16UI: 0x8234;
    /** Type: GLenum */
    readonly R32I: 0x8235;
    /** Type: GLenum */
    readonly R32UI: 0x8236;
    /** Type: GLenum */
    readonly RG8I: 0x8237;
    /** Type: GLenum */
    readonly RG8UI: 0x8238;
    /** Type: GLenum */
    readonly RG16I: 0x8239;
    /** Type: GLenum */
    readonly RG16UI: 0x823A;
    /** Type: GLenum */
    readonly RG32I: 0x823B;
    /** Type: GLenum */
    readonly RG32UI: 0x823C;
    /** Type: GLenum */
    readonly VERTEX_ARRAY_BINDING: 0x85B5;
    /** Type: GLenum */
    readonly R8_SNORM: 0x8F94;
    /** Type: GLenum */
    readonly RG8_SNORM: 0x8F95;
    /** Type: GLenum */
    readonly RGB8_SNORM: 0x8F96;
    /** Type: GLenum */
    readonly RGBA8_SNORM: 0x8F97;
    /** Type: GLenum */
    readonly SIGNED_NORMALIZED: 0x8F9C;
    /** Type: GLenum */
    readonly COPY_READ_BUFFER: 0x8F36;
    /** Type: GLenum */
    readonly COPY_WRITE_BUFFER: 0x8F37;
    /** Type: GLenum */
    readonly COPY_READ_BUFFER_BINDING: 0x8F36;
    /** Type: GLenum */
    readonly COPY_WRITE_BUFFER_BINDING: 0x8F37;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER: 0x8A11;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_BINDING: 0x8A28;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_START: 0x8A29;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_SIZE: 0x8A2A;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_BLOCKS: 0x8A2B;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8A2D;
    /** Type: GLenum */
    readonly MAX_COMBINED_UNIFORM_BLOCKS: 0x8A2E;
    /** Type: GLenum */
    readonly MAX_UNIFORM_BUFFER_BINDINGS: 0x8A2F;
    /** Type: GLenum */
    readonly MAX_UNIFORM_BLOCK_SIZE: 0x8A30;
    /** Type: GLenum */
    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8A31;
    /** Type: GLenum */
    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8A33;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8A34;
    /** Type: GLenum */
    readonly ACTIVE_UNIFORM_BLOCKS: 0x8A36;
    /** Type: GLenum */
    readonly UNIFORM_TYPE: 0x8A37;
    /** Type: GLenum */
    readonly UNIFORM_SIZE: 0x8A38;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_INDEX: 0x8A3A;
    /** Type: GLenum */
    readonly UNIFORM_OFFSET: 0x8A3B;
    /** Type: GLenum */
    readonly UNIFORM_ARRAY_STRIDE: 0x8A3C;
    /** Type: GLenum */
    readonly UNIFORM_MATRIX_STRIDE: 0x8A3D;
    /** Type: GLenum */
    readonly UNIFORM_IS_ROW_MAJOR: 0x8A3E;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_BINDING: 0x8A3F;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_DATA_SIZE: 0x8A40;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8A42;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8A43;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8A44;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8A46;
    /** Type: GLenum */
    readonly INVALID_INDEX: 0xFFFFFFFF;
    /** Type: GLenum */
    readonly MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125;
    /** Type: GLenum */
    readonly MAX_SERVER_WAIT_TIMEOUT: 0x9111;
    /** Type: GLenum */
    readonly OBJECT_TYPE: 0x9112;
    /** Type: GLenum */
    readonly SYNC_CONDITION: 0x9113;
    /** Type: GLenum */
    readonly SYNC_STATUS: 0x9114;
    /** Type: GLenum */
    readonly SYNC_FLAGS: 0x9115;
    /** Type: GLenum */
    readonly SYNC_FENCE: 0x9116;
    /** Type: GLenum */
    readonly SYNC_GPU_COMMANDS_COMPLETE: 0x9117;
    /** Type: GLenum */
    readonly UNSIGNALED: 0x9118;
    /** Type: GLenum */
    readonly SIGNALED: 0x9119;
    /** Type: GLenum */
    readonly ALREADY_SIGNALED: 0x911A;
    /** Type: GLenum */
    readonly TIMEOUT_EXPIRED: 0x911B;
    /** Type: GLenum */
    readonly CONDITION_SATISFIED: 0x911C;
    /** Type: GLenum */
    readonly WAIT_FAILED: 0x911D;
    /** Type: GLenum */
    readonly SYNC_FLUSH_COMMANDS_BIT: 0x00000001;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88FE;
    /** Type: GLenum */
    readonly ANY_SAMPLES_PASSED: 0x8C2F;
    /** Type: GLenum */
    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8D6A;
    /** Type: GLenum */
    readonly SAMPLER_BINDING: 0x8919;
    /** Type: GLenum */
    readonly RGB10_A2UI: 0x906F;
    /** Type: GLenum */
    readonly INT_2_10_10_10_REV: 0x8D9F;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK: 0x8E22;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_PAUSED: 0x8E23;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_ACTIVE: 0x8E24;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BINDING: 0x8E25;
    /** Type: GLenum */
    readonly TEXTURE_IMMUTABLE_FORMAT: 0x912F;
    /** Type: GLenum */
    readonly MAX_ELEMENT_INDEX: 0x8D6B;
    /** Type: GLenum */
    readonly TEXTURE_IMMUTABLE_LEVELS: 0x82DF;
    /** Type: GLint64 */
    readonly TIMEOUT_IGNORED: -1;
    /** Type: GLenum */
    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247;
    /** Type: GLenum */
    readonly DEPTH_BUFFER_BIT: 0x00000100;
    /** Type: GLenum */
    readonly STENCIL_BUFFER_BIT: 0x00000400;
    /** Type: GLenum */
    readonly COLOR_BUFFER_BIT: 0x00004000;
    /** Type: GLenum */
    readonly POINTS: 0x0000;
    /** Type: GLenum */
    readonly LINES: 0x0001;
    /** Type: GLenum */
    readonly LINE_LOOP: 0x0002;
    /** Type: GLenum */
    readonly LINE_STRIP: 0x0003;
    /** Type: GLenum */
    readonly TRIANGLES: 0x0004;
    /** Type: GLenum */
    readonly TRIANGLE_STRIP: 0x0005;
    /** Type: GLenum */
    readonly TRIANGLE_FAN: 0x0006;
    /** Type: GLenum */
    readonly ZERO: 0;
    /** Type: GLenum */
    readonly ONE: 1;
    /** Type: GLenum */
    readonly SRC_COLOR: 0x0300;
    /** Type: GLenum */
    readonly ONE_MINUS_SRC_COLOR: 0x0301;
    /** Type: GLenum */
    readonly SRC_ALPHA: 0x0302;
    /** Type: GLenum */
    readonly ONE_MINUS_SRC_ALPHA: 0x0303;
    /** Type: GLenum */
    readonly DST_ALPHA: 0x0304;
    /** Type: GLenum */
    readonly ONE_MINUS_DST_ALPHA: 0x0305;
    /** Type: GLenum */
    readonly DST_COLOR: 0x0306;
    /** Type: GLenum */
    readonly ONE_MINUS_DST_COLOR: 0x0307;
    /** Type: GLenum */
    readonly SRC_ALPHA_SATURATE: 0x0308;
    /** Type: GLenum */
    readonly FUNC_ADD: 0x8006;
    /** Type: GLenum */
    readonly BLEND_EQUATION: 0x8009;
    /** Type: GLenum */
    readonly BLEND_EQUATION_RGB: 0x8009;
    /** Type: GLenum */
    readonly BLEND_EQUATION_ALPHA: 0x883D;
    /** Type: GLenum */
    readonly FUNC_SUBTRACT: 0x800A;
    /** Type: GLenum */
    readonly FUNC_REVERSE_SUBTRACT: 0x800B;
    /** Type: GLenum */
    readonly BLEND_DST_RGB: 0x80C8;
    /** Type: GLenum */
    readonly BLEND_SRC_RGB: 0x80C9;
    /** Type: GLenum */
    readonly BLEND_DST_ALPHA: 0x80CA;
    /** Type: GLenum */
    readonly BLEND_SRC_ALPHA: 0x80CB;
    /** Type: GLenum */
    readonly CONSTANT_COLOR: 0x8001;
    /** Type: GLenum */
    readonly ONE_MINUS_CONSTANT_COLOR: 0x8002;
    /** Type: GLenum */
    readonly CONSTANT_ALPHA: 0x8003;
    /** Type: GLenum */
    readonly ONE_MINUS_CONSTANT_ALPHA: 0x8004;
    /** Type: GLenum */
    readonly BLEND_COLOR: 0x8005;
    /** Type: GLenum */
    readonly ARRAY_BUFFER: 0x8892;
    /** Type: GLenum */
    readonly ELEMENT_ARRAY_BUFFER: 0x8893;
    /** Type: GLenum */
    readonly ARRAY_BUFFER_BINDING: 0x8894;
    /** Type: GLenum */
    readonly ELEMENT_ARRAY_BUFFER_BINDING: 0x8895;
    /** Type: GLenum */
    readonly STREAM_DRAW: 0x88E0;
    /** Type: GLenum */
    readonly STATIC_DRAW: 0x88E4;
    /** Type: GLenum */
    readonly DYNAMIC_DRAW: 0x88E8;
    /** Type: GLenum */
    readonly BUFFER_SIZE: 0x8764;
    /** Type: GLenum */
    readonly BUFFER_USAGE: 0x8765;
    /** Type: GLenum */
    readonly CURRENT_VERTEX_ATTRIB: 0x8626;
    /** Type: GLenum */
    readonly FRONT: 0x0404;
    /** Type: GLenum */
    readonly BACK: 0x0405;
    /** Type: GLenum */
    readonly FRONT_AND_BACK: 0x0408;
    /** Type: GLenum */
    readonly CULL_FACE: 0x0B44;
    /** Type: GLenum */
    readonly BLEND: 0x0BE2;
    /** Type: GLenum */
    readonly DITHER: 0x0BD0;
    /** Type: GLenum */
    readonly STENCIL_TEST: 0x0B90;
    /** Type: GLenum */
    readonly DEPTH_TEST: 0x0B71;
    /** Type: GLenum */
    readonly SCISSOR_TEST: 0x0C11;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_FILL: 0x8037;
    /** Type: GLenum */
    readonly SAMPLE_ALPHA_TO_COVERAGE: 0x809E;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE: 0x80A0;
    /** Type: GLenum */
    readonly NO_ERROR: 0;
    /** Type: GLenum */
    readonly INVALID_ENUM: 0x0500;
    /** Type: GLenum */
    readonly INVALID_VALUE: 0x0501;
    /** Type: GLenum */
    readonly INVALID_OPERATION: 0x0502;
    /** Type: GLenum */
    readonly OUT_OF_MEMORY: 0x0505;
    /** Type: GLenum */
    readonly CW: 0x0900;
    /** Type: GLenum */
    readonly CCW: 0x0901;
    /** Type: GLenum */
    readonly LINE_WIDTH: 0x0B21;
    /** Type: GLenum */
    readonly ALIASED_POINT_SIZE_RANGE: 0x846D;
    /** Type: GLenum */
    readonly ALIASED_LINE_WIDTH_RANGE: 0x846E;
    /** Type: GLenum */
    readonly CULL_FACE_MODE: 0x0B45;
    /** Type: GLenum */
    readonly FRONT_FACE: 0x0B46;
    /** Type: GLenum */
    readonly DEPTH_RANGE: 0x0B70;
    /** Type: GLenum */
    readonly DEPTH_WRITEMASK: 0x0B72;
    /** Type: GLenum */
    readonly DEPTH_CLEAR_VALUE: 0x0B73;
    /** Type: GLenum */
    readonly DEPTH_FUNC: 0x0B74;
    /** Type: GLenum */
    readonly STENCIL_CLEAR_VALUE: 0x0B91;
    /** Type: GLenum */
    readonly STENCIL_FUNC: 0x0B92;
    /** Type: GLenum */
    readonly STENCIL_FAIL: 0x0B94;
    /** Type: GLenum */
    readonly STENCIL_PASS_DEPTH_FAIL: 0x0B95;
    /** Type: GLenum */
    readonly STENCIL_PASS_DEPTH_PASS: 0x0B96;
    /** Type: GLenum */
    readonly STENCIL_REF: 0x0B97;
    /** Type: GLenum */
    readonly STENCIL_VALUE_MASK: 0x0B93;
    /** Type: GLenum */
    readonly STENCIL_WRITEMASK: 0x0B98;
    /** Type: GLenum */
    readonly STENCIL_BACK_FUNC: 0x8800;
    /** Type: GLenum */
    readonly STENCIL_BACK_FAIL: 0x8801;
    /** Type: GLenum */
    readonly STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802;
    /** Type: GLenum */
    readonly STENCIL_BACK_PASS_DEPTH_PASS: 0x8803;
    /** Type: GLenum */
    readonly STENCIL_BACK_REF: 0x8CA3;
    /** Type: GLenum */
    readonly STENCIL_BACK_VALUE_MASK: 0x8CA4;
    /** Type: GLenum */
    readonly STENCIL_BACK_WRITEMASK: 0x8CA5;
    /** Type: undefined */
    readonly VIEWPORT: 0x0BA2;
    /** Type: GLenum */
    readonly SCISSOR_BOX: 0x0C10;
    /** Type: GLenum */
    readonly COLOR_CLEAR_VALUE: 0x0C22;
    /** Type: GLenum */
    readonly COLOR_WRITEMASK: 0x0C23;
    /** Type: GLenum */
    readonly UNPACK_ALIGNMENT: 0x0CF5;
    /** Type: GLenum */
    readonly PACK_ALIGNMENT: 0x0D05;
    /** Type: GLenum */
    readonly MAX_TEXTURE_SIZE: 0x0D33;
    /** Type: GLenum */
    readonly MAX_VIEWPORT_DIMS: 0x0D3A;
    /** Type: GLenum */
    readonly SUBPIXEL_BITS: 0x0D50;
    /** Type: GLenum */
    readonly RED_BITS: 0x0D52;
    /** Type: GLenum */
    readonly GREEN_BITS: 0x0D53;
    /** Type: GLenum */
    readonly BLUE_BITS: 0x0D54;
    /** Type: GLenum */
    readonly ALPHA_BITS: 0x0D55;
    /** Type: GLenum */
    readonly DEPTH_BITS: 0x0D56;
    /** Type: GLenum */
    readonly STENCIL_BITS: 0x0D57;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_UNITS: 0x2A00;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_FACTOR: 0x8038;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_2D: 0x8069;
    /** Type: GLenum */
    readonly SAMPLE_BUFFERS: 0x80A8;
    /** Type: GLenum */
    readonly SAMPLES: 0x80A9;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE_VALUE: 0x80AA;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE_INVERT: 0x80AB;
    /** Type: GLenum */
    readonly COMPRESSED_TEXTURE_FORMATS: 0x86A3;
    /** Type: GLenum */
    readonly DONT_CARE: 0x1100;
    /** Type: GLenum */
    readonly FASTEST: 0x1101;
    /** Type: GLenum */
    readonly NICEST: 0x1102;
    /** Type: GLenum */
    readonly GENERATE_MIPMAP_HINT: 0x8192;
    /** Type: GLenum */
    readonly BYTE: 0x1400;
    /** Type: GLenum */
    readonly UNSIGNED_BYTE: 0x1401;
    /** Type: GLenum */
    readonly SHORT: 0x1402;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT: 0x1403;
    /** Type: GLenum */
    readonly INT: 0x1404;
    /** Type: GLenum */
    readonly UNSIGNED_INT: 0x1405;
    /** Type: GLenum */
    readonly FLOAT: 0x1406;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT: 0x1902;
    /** Type: GLenum */
    readonly ALPHA: 0x1906;
    /** Type: GLenum */
    readonly RGB: 0x1907;
    /** Type: GLenum */
    readonly RGBA: 0x1908;
    /** Type: GLenum */
    readonly LUMINANCE: 0x1909;
    /** Type: GLenum */
    readonly LUMINANCE_ALPHA: 0x190A;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_4_4_4_4: 0x8033;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_5_5_5_1: 0x8034;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_5_6_5: 0x8363;
    /** Type: GLenum */
    readonly FRAGMENT_SHADER: 0x8B30;
    /** Type: GLenum */
    readonly VERTEX_SHADER: 0x8B31;
    /** Type: GLenum */
    readonly MAX_VERTEX_ATTRIBS: 0x8869;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB;
    /** Type: GLenum */
    readonly MAX_VARYING_VECTORS: 0x8DFC;
    /** Type: GLenum */
    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D;
    /** Type: GLenum */
    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C;
    /** Type: GLenum */
    readonly MAX_TEXTURE_IMAGE_UNITS: 0x8872;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD;
    /** Type: GLenum */
    readonly SHADER_TYPE: 0x8B4F;
    /** Type: GLenum */
    readonly DELETE_STATUS: 0x8B80;
    /** Type: GLenum */
    readonly LINK_STATUS: 0x8B82;
    /** Type: GLenum */
    readonly VALIDATE_STATUS: 0x8B83;
    /** Type: GLenum */
    readonly ATTACHED_SHADERS: 0x8B85;
    /** Type: GLenum */
    readonly ACTIVE_UNIFORMS: 0x8B86;
    /** Type: GLenum */
    readonly ACTIVE_ATTRIBUTES: 0x8B89;
    /** Type: GLenum */
    readonly SHADING_LANGUAGE_VERSION: 0x8B8C;
    /** Type: GLenum */
    readonly CURRENT_PROGRAM: 0x8B8D;
    /** Type: GLenum */
    readonly NEVER: 0x0200;
    /** Type: GLenum */
    readonly LESS: 0x0201;
    /** Type: GLenum */
    readonly EQUAL: 0x0202;
    /** Type: GLenum */
    readonly LEQUAL: 0x0203;
    /** Type: GLenum */
    readonly GREATER: 0x0204;
    /** Type: GLenum */
    readonly NOTEQUAL: 0x0205;
    /** Type: GLenum */
    readonly GEQUAL: 0x0206;
    /** Type: GLenum */
    readonly ALWAYS: 0x0207;
    /** Type: GLenum */
    readonly KEEP: 0x1E00;
    /** Type: GLenum */
    readonly REPLACE: 0x1E01;
    /** Type: GLenum */
    readonly INCR: 0x1E02;
    /** Type: GLenum */
    readonly DECR: 0x1E03;
    /** Type: GLenum */
    readonly INVERT: 0x150A;
    /** Type: GLenum */
    readonly INCR_WRAP: 0x8507;
    /** Type: GLenum */
    readonly DECR_WRAP: 0x8508;
    /** Type: GLenum */
    readonly VENDOR: 0x1F00;
    /** Type: GLenum */
    readonly RENDERER: 0x1F01;
    /** Type: GLenum */
    readonly VERSION: 0x1F02;
    /** Type: GLenum */
    readonly NEAREST: 0x2600;
    /** Type: GLenum */
    readonly LINEAR: 0x2601;
    /** Type: GLenum */
    readonly NEAREST_MIPMAP_NEAREST: 0x2700;
    /** Type: GLenum */
    readonly LINEAR_MIPMAP_NEAREST: 0x2701;
    /** Type: GLenum */
    readonly NEAREST_MIPMAP_LINEAR: 0x2702;
    /** Type: GLenum */
    readonly LINEAR_MIPMAP_LINEAR: 0x2703;
    /** Type: GLenum */
    readonly TEXTURE_MAG_FILTER: 0x2800;
    /** Type: GLenum */
    readonly TEXTURE_MIN_FILTER: 0x2801;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_S: 0x2802;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_T: 0x2803;
    /** Type: GLenum */
    readonly TEXTURE_2D: 0x0DE1;
    /** Type: GLenum */
    readonly TEXTURE: 0x1702;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP: 0x8513;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_CUBE_MAP: 0x8514;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A;
    /** Type: GLenum */
    readonly MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C;
    /** Type: GLenum */
    readonly TEXTURE0: 0x84C0;
    /** Type: GLenum */
    readonly TEXTURE1: 0x84C1;
    /** Type: GLenum */
    readonly TEXTURE2: 0x84C2;
    /** Type: GLenum */
    readonly TEXTURE3: 0x84C3;
    /** Type: GLenum */
    readonly TEXTURE4: 0x84C4;
    /** Type: GLenum */
    readonly TEXTURE5: 0x84C5;
    /** Type: GLenum */
    readonly TEXTURE6: 0x84C6;
    /** Type: GLenum */
    readonly TEXTURE7: 0x84C7;
    /** Type: GLenum */
    readonly TEXTURE8: 0x84C8;
    /** Type: GLenum */
    readonly TEXTURE9: 0x84C9;
    /** Type: GLenum */
    readonly TEXTURE10: 0x84CA;
    /** Type: GLenum */
    readonly TEXTURE11: 0x84CB;
    /** Type: GLenum */
    readonly TEXTURE12: 0x84CC;
    /** Type: GLenum */
    readonly TEXTURE13: 0x84CD;
    /** Type: GLenum */
    readonly TEXTURE14: 0x84CE;
    /** Type: GLenum */
    readonly TEXTURE15: 0x84CF;
    /** Type: GLenum */
    readonly TEXTURE16: 0x84D0;
    /** Type: GLenum */
    readonly TEXTURE17: 0x84D1;
    /** Type: GLenum */
    readonly TEXTURE18: 0x84D2;
    /** Type: GLenum */
    readonly TEXTURE19: 0x84D3;
    /** Type: GLenum */
    readonly TEXTURE20: 0x84D4;
    /** Type: GLenum */
    readonly TEXTURE21: 0x84D5;
    /** Type: GLenum */
    readonly TEXTURE22: 0x84D6;
    /** Type: GLenum */
    readonly TEXTURE23: 0x84D7;
    /** Type: GLenum */
    readonly TEXTURE24: 0x84D8;
    /** Type: GLenum */
    readonly TEXTURE25: 0x84D9;
    /** Type: GLenum */
    readonly TEXTURE26: 0x84DA;
    /** Type: GLenum */
    readonly TEXTURE27: 0x84DB;
    /** Type: GLenum */
    readonly TEXTURE28: 0x84DC;
    /** Type: GLenum */
    readonly TEXTURE29: 0x84DD;
    /** Type: GLenum */
    readonly TEXTURE30: 0x84DE;
    /** Type: GLenum */
    readonly TEXTURE31: 0x84DF;
    /** Type: GLenum */
    readonly ACTIVE_TEXTURE: 0x84E0;
    /** Type: GLenum */
    readonly REPEAT: 0x2901;
    /** Type: GLenum */
    readonly CLAMP_TO_EDGE: 0x812F;
    /** Type: GLenum */
    readonly MIRRORED_REPEAT: 0x8370;
    /** Type: GLenum */
    readonly FLOAT_VEC2: 0x8B50;
    /** Type: GLenum */
    readonly FLOAT_VEC3: 0x8B51;
    /** Type: GLenum */
    readonly FLOAT_VEC4: 0x8B52;
    /** Type: GLenum */
    readonly INT_VEC2: 0x8B53;
    /** Type: GLenum */
    readonly INT_VEC3: 0x8B54;
    /** Type: GLenum */
    readonly INT_VEC4: 0x8B55;
    /** Type: GLenum */
    readonly BOOL: 0x8B56;
    /** Type: GLenum */
    readonly BOOL_VEC2: 0x8B57;
    /** Type: GLenum */
    readonly BOOL_VEC3: 0x8B58;
    /** Type: GLenum */
    readonly BOOL_VEC4: 0x8B59;
    /** Type: GLenum */
    readonly FLOAT_MAT2: 0x8B5A;
    /** Type: GLenum */
    readonly FLOAT_MAT3: 0x8B5B;
    /** Type: GLenum */
    readonly FLOAT_MAT4: 0x8B5C;
    /** Type: GLenum */
    readonly SAMPLER_2D: 0x8B5E;
    /** Type: GLenum */
    readonly SAMPLER_CUBE: 0x8B60;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_SIZE: 0x8623;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_TYPE: 0x8625;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_POINTER: 0x8645;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F;
    /** Type: GLenum */
    readonly IMPLEMENTATION_COLOR_READ_TYPE: 0x8B9A;
    /** Type: GLenum */
    readonly IMPLEMENTATION_COLOR_READ_FORMAT: 0x8B9B;
    /** Type: GLenum */
    readonly COMPILE_STATUS: 0x8B81;
    /** Type: GLenum */
    readonly LOW_FLOAT: 0x8DF0;
    /** Type: GLenum */
    readonly MEDIUM_FLOAT: 0x8DF1;
    /** Type: GLenum */
    readonly HIGH_FLOAT: 0x8DF2;
    /** Type: GLenum */
    readonly LOW_INT: 0x8DF3;
    /** Type: GLenum */
    readonly MEDIUM_INT: 0x8DF4;
    /** Type: GLenum */
    readonly HIGH_INT: 0x8DF5;
    /** Type: GLenum */
    readonly FRAMEBUFFER: 0x8D40;
    /** Type: GLenum */
    readonly RENDERBUFFER: 0x8D41;
    /** Type: GLenum */
    readonly RGBA4: 0x8056;
    /** Type: GLenum */
    readonly RGB5_A1: 0x8057;
    /** Type: GLenum */
    readonly RGBA8: 0x8058;
    /** Type: GLenum */
    readonly RGB565: 0x8D62;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT16: 0x81A5;
    /** Type: GLenum */
    readonly STENCIL_INDEX8: 0x8D48;
    /** Type: GLenum */
    readonly DEPTH_STENCIL: 0x84F9;
    /** Type: GLenum */
    readonly RENDERBUFFER_WIDTH: 0x8D42;
    /** Type: GLenum */
    readonly RENDERBUFFER_HEIGHT: 0x8D43;
    /** Type: GLenum */
    readonly RENDERBUFFER_INTERNAL_FORMAT: 0x8D44;
    /** Type: GLenum */
    readonly RENDERBUFFER_RED_SIZE: 0x8D50;
    /** Type: GLenum */
    readonly RENDERBUFFER_GREEN_SIZE: 0x8D51;
    /** Type: GLenum */
    readonly RENDERBUFFER_BLUE_SIZE: 0x8D52;
    /** Type: GLenum */
    readonly RENDERBUFFER_ALPHA_SIZE: 0x8D53;
    /** Type: GLenum */
    readonly RENDERBUFFER_DEPTH_SIZE: 0x8D54;
    /** Type: GLenum */
    readonly RENDERBUFFER_STENCIL_SIZE: 0x8D55;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT0: 0x8CE0;
    /** Type: GLenum */
    readonly DEPTH_ATTACHMENT: 0x8D00;
    /** Type: GLenum */
    readonly STENCIL_ATTACHMENT: 0x8D20;
    /** Type: GLenum */
    readonly DEPTH_STENCIL_ATTACHMENT: 0x821A;
    /** Type: GLenum */
    readonly NONE: 0;
    /** Type: GLenum */
    readonly FRAMEBUFFER_COMPLETE: 0x8CD5;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9;
    /** Type: GLenum */
    readonly FRAMEBUFFER_UNSUPPORTED: 0x8CDD;
    /** Type: GLenum */
    readonly FRAMEBUFFER_BINDING: 0x8CA6;
    /** Type: GLenum */
    readonly RENDERBUFFER_BINDING: 0x8CA7;
    /** Type: GLenum */
    readonly MAX_RENDERBUFFER_SIZE: 0x84E8;
    /** Type: GLenum */
    readonly INVALID_FRAMEBUFFER_OPERATION: 0x0506;
    /** Type: GLenum */
    readonly UNPACK_FLIP_Y_WEBGL: 0x9240;
    /** Type: GLenum */
    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241;
    /** Type: GLenum */
    readonly CONTEXT_LOST_WEBGL: 0x9242;
    /** Type: GLenum */
    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243;
    /** Type: GLenum */
    readonly BROWSER_DEFAULT_WEBGL: 0x9244;
};

interface WebGL2RenderingContextBase {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginQuery)
     */
    beginQuery(target: GLenum, query: WebGLQuery): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/beginTransformFeedback)
     */
    beginTransformFeedback(primitiveMode: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferBase)
     */
    bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindBufferRange)
     */
    bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer | null, offset: GLintptr, size: GLsizeiptr): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindSampler)
     */
    bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindTransformFeedback)
     */
    bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bindVertexArray)
     */
    bindVertexArray(array: WebGLVertexArrayObject | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/blitFramebuffer)
     */
    blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
     */
    clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
     */
    clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
     */
    clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clearBuffer)
     */
    clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset?: number): void;
    /**
     * Type: GLenum
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/clientWaitSync)
     */
    clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexImage3D)
     */
    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;
    compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset?: number, srcLengthOverride?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/compressedTexSubImage3D)
     */
    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;
    compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset?: number, srcLengthOverride?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyBufferSubData)
     */
    copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/copyTexSubImage3D)
     */
    copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
    /**
     * Type: WebGLQuery
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createQuery)
     */
    createQuery(): WebGLQuery;
    /**
     * Type: WebGLSampler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createSampler)
     */
    createSampler(): WebGLSampler;
    /**
     * Type: WebGLTransformFeedback
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createTransformFeedback)
     */
    createTransformFeedback(): WebGLTransformFeedback;
    /**
     * Type: WebGLVertexArrayObject
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/createVertexArray)
     */
    createVertexArray(): WebGLVertexArrayObject;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteQuery)
     */
    deleteQuery(query: WebGLQuery | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSampler)
     */
    deleteSampler(sampler: WebGLSampler | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteSync)
     */
    deleteSync(sync: WebGLSync | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteTransformFeedback)
     */
    deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/deleteVertexArray)
     */
    deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawArraysInstanced)
     */
    drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawBuffers)
     */
    drawBuffers(buffers: GLenum[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawElementsInstanced)
     */
    drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawRangeElements)
     */
    drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endQuery)
     */
    endQuery(target: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/endTransformFeedback)
     */
    endTransformFeedback(): void;
    /**
     * Type: WebGLSync
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/fenceSync)
     */
    fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/framebufferTextureLayer)
     */
    framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, layer: GLint): void;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockName)
     */
    getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): string | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniformBlockParameter)
     */
    getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getActiveUniforms)
     */
    getActiveUniforms(program: WebGLProgram, uniformIndices: GLuint[], pname: GLenum): any;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getBufferSubData)
     */
    getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView<ArrayBufferLike>, dstOffset?: number, length?: GLuint): void;
    /**
     * Type: GLint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getFragDataLocation)
     */
    getFragDataLocation(program: WebGLProgram, name: string): GLint;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getIndexedParameter)
     */
    getIndexedParameter(target: GLenum, index: GLuint): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getInternalformatParameter)
     */
    getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): any;
    /**
     * Type: WebGLQuery
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQuery)
     */
    getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getQueryParameter)
     */
    getQueryParameter(query: WebGLQuery, pname: GLenum): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSamplerParameter)
     */
    getSamplerParameter(sampler: WebGLSampler, pname: GLenum): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getSyncParameter)
     */
    getSyncParameter(sync: WebGLSync, pname: GLenum): any;
    /**
     * Type: WebGLActiveInfo
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getTransformFeedbackVarying)
     */
    getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
    /**
     * Type: GLuint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformBlockIndex)
     */
    getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/getUniformIndices)
     */
    getUniformIndices(program: WebGLProgram, uniformNames: string[]): GLuint[] | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateFramebuffer)
     */
    invalidateFramebuffer(target: GLenum, attachments: GLenum[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/invalidateSubFramebuffer)
     */
    invalidateSubFramebuffer(target: GLenum, attachments: GLenum[], x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isQuery)
     */
    isQuery(query: WebGLQuery | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSampler)
     */
    isSampler(sampler: WebGLSampler | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isSync)
     */
    isSync(sync: WebGLSync | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isTransformFeedback)
     */
    isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/isVertexArray)
     */
    isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/pauseTransformFeedback)
     */
    pauseTransformFeedback(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/readBuffer)
     */
    readBuffer(src: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/renderbufferStorageMultisample)
     */
    renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/resumeTransformFeedback)
     */
    resumeTransformFeedback(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter)
     */
    samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/samplerParameter)
     */
    samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texImage3D)
     */
    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView<ArrayBufferLike> | null): void;
    texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage2D)
     */
    texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texStorage3D)
     */
    texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/texSubImage3D)
     */
    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;
    texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView<ArrayBufferLike> | null, srcOffset?: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/transformFeedbackVaryings)
     */
    transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform1uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform2ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform2uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform3ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform3uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform4ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniform)
     */
    uniform4uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformBlockBinding)
     */
    uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribDivisor)
     */
    vertexAttribDivisor(index: GLuint, divisor: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
     */
    vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
     */
    vertexAttribI4iv(index: GLuint, values: Int32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
     */
    vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribI)
     */
    vertexAttribI4uiv(index: GLuint, values: Uint32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/vertexAttribIPointer)
     */
    vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/waitSync)
     */
    waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;
    /** Type: GLenum */
    readonly READ_BUFFER: 0x0C02;
    /** Type: GLenum */
    readonly UNPACK_ROW_LENGTH: 0x0CF2;
    /** Type: GLenum */
    readonly UNPACK_SKIP_ROWS: 0x0CF3;
    /** Type: GLenum */
    readonly UNPACK_SKIP_PIXELS: 0x0CF4;
    /** Type: GLenum */
    readonly PACK_ROW_LENGTH: 0x0D02;
    /** Type: GLenum */
    readonly PACK_SKIP_ROWS: 0x0D03;
    /** Type: GLenum */
    readonly PACK_SKIP_PIXELS: 0x0D04;
    /** Type: GLenum */
    readonly COLOR: 0x1800;
    /** Type: GLenum */
    readonly DEPTH: 0x1801;
    /** Type: GLenum */
    readonly STENCIL: 0x1802;
    /** Type: GLenum */
    readonly RED: 0x1903;
    /** Type: GLenum */
    readonly RGB8: 0x8051;
    /** Type: GLenum */
    readonly RGB10_A2: 0x8059;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_3D: 0x806A;
    /** Type: GLenum */
    readonly UNPACK_SKIP_IMAGES: 0x806D;
    /** Type: GLenum */
    readonly UNPACK_IMAGE_HEIGHT: 0x806E;
    /** Type: GLenum */
    readonly TEXTURE_3D: 0x806F;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_R: 0x8072;
    /** Type: GLenum */
    readonly MAX_3D_TEXTURE_SIZE: 0x8073;
    /** Type: GLenum */
    readonly UNSIGNED_INT_2_10_10_10_REV: 0x8368;
    /** Type: GLenum */
    readonly MAX_ELEMENTS_VERTICES: 0x80E8;
    /** Type: GLenum */
    readonly MAX_ELEMENTS_INDICES: 0x80E9;
    /** Type: GLenum */
    readonly TEXTURE_MIN_LOD: 0x813A;
    /** Type: GLenum */
    readonly TEXTURE_MAX_LOD: 0x813B;
    /** Type: GLenum */
    readonly TEXTURE_BASE_LEVEL: 0x813C;
    /** Type: GLenum */
    readonly TEXTURE_MAX_LEVEL: 0x813D;
    /** Type: GLenum */
    readonly MIN: 0x8007;
    /** Type: GLenum */
    readonly MAX: 0x8008;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT24: 0x81A6;
    /** Type: GLenum */
    readonly MAX_TEXTURE_LOD_BIAS: 0x84FD;
    /** Type: GLenum */
    readonly TEXTURE_COMPARE_MODE: 0x884C;
    /** Type: GLenum */
    readonly TEXTURE_COMPARE_FUNC: 0x884D;
    /** Type: GLenum */
    readonly CURRENT_QUERY: 0x8865;
    /** Type: GLenum */
    readonly QUERY_RESULT: 0x8866;
    /** Type: GLenum */
    readonly QUERY_RESULT_AVAILABLE: 0x8867;
    /** Type: GLenum */
    readonly STREAM_READ: 0x88E1;
    /** Type: GLenum */
    readonly STREAM_COPY: 0x88E2;
    /** Type: GLenum */
    readonly STATIC_READ: 0x88E5;
    /** Type: GLenum */
    readonly STATIC_COPY: 0x88E6;
    /** Type: GLenum */
    readonly DYNAMIC_READ: 0x88E9;
    /** Type: GLenum */
    readonly DYNAMIC_COPY: 0x88EA;
    /** Type: GLenum */
    readonly MAX_DRAW_BUFFERS: 0x8824;
    /** Type: GLenum */
    readonly DRAW_BUFFER0: 0x8825;
    /** Type: GLenum */
    readonly DRAW_BUFFER1: 0x8826;
    /** Type: GLenum */
    readonly DRAW_BUFFER2: 0x8827;
    /** Type: GLenum */
    readonly DRAW_BUFFER3: 0x8828;
    /** Type: GLenum */
    readonly DRAW_BUFFER4: 0x8829;
    /** Type: GLenum */
    readonly DRAW_BUFFER5: 0x882A;
    /** Type: GLenum */
    readonly DRAW_BUFFER6: 0x882B;
    /** Type: GLenum */
    readonly DRAW_BUFFER7: 0x882C;
    /** Type: GLenum */
    readonly DRAW_BUFFER8: 0x882D;
    /** Type: GLenum */
    readonly DRAW_BUFFER9: 0x882E;
    /** Type: GLenum */
    readonly DRAW_BUFFER10: 0x882F;
    /** Type: GLenum */
    readonly DRAW_BUFFER11: 0x8830;
    /** Type: GLenum */
    readonly DRAW_BUFFER12: 0x8831;
    /** Type: GLenum */
    readonly DRAW_BUFFER13: 0x8832;
    /** Type: GLenum */
    readonly DRAW_BUFFER14: 0x8833;
    /** Type: GLenum */
    readonly DRAW_BUFFER15: 0x8834;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_COMPONENTS: 0x8B49;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_COMPONENTS: 0x8B4A;
    /** Type: GLenum */
    readonly SAMPLER_3D: 0x8B5F;
    /** Type: GLenum */
    readonly SAMPLER_2D_SHADOW: 0x8B62;
    /** Type: GLenum */
    readonly FRAGMENT_SHADER_DERIVATIVE_HINT: 0x8B8B;
    /** Type: GLenum */
    readonly PIXEL_PACK_BUFFER: 0x88EB;
    /** Type: GLenum */
    readonly PIXEL_UNPACK_BUFFER: 0x88EC;
    /** Type: GLenum */
    readonly PIXEL_PACK_BUFFER_BINDING: 0x88ED;
    /** Type: GLenum */
    readonly PIXEL_UNPACK_BUFFER_BINDING: 0x88EF;
    /** Type: GLenum */
    readonly FLOAT_MAT2x3: 0x8B65;
    /** Type: GLenum */
    readonly FLOAT_MAT2x4: 0x8B66;
    /** Type: GLenum */
    readonly FLOAT_MAT3x2: 0x8B67;
    /** Type: GLenum */
    readonly FLOAT_MAT3x4: 0x8B68;
    /** Type: GLenum */
    readonly FLOAT_MAT4x2: 0x8B69;
    /** Type: GLenum */
    readonly FLOAT_MAT4x3: 0x8B6A;
    /** Type: GLenum */
    readonly SRGB: 0x8C40;
    /** Type: GLenum */
    readonly SRGB8: 0x8C41;
    /** Type: GLenum */
    readonly SRGB8_ALPHA8: 0x8C43;
    /** Type: GLenum */
    readonly COMPARE_REF_TO_TEXTURE: 0x884E;
    /** Type: GLenum */
    readonly RGBA32F: 0x8814;
    /** Type: GLenum */
    readonly RGB32F: 0x8815;
    /** Type: GLenum */
    readonly RGBA16F: 0x881A;
    /** Type: GLenum */
    readonly RGB16F: 0x881B;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_INTEGER: 0x88FD;
    /** Type: GLenum */
    readonly MAX_ARRAY_TEXTURE_LAYERS: 0x88FF;
    /** Type: GLenum */
    readonly MIN_PROGRAM_TEXEL_OFFSET: 0x8904;
    /** Type: GLenum */
    readonly MAX_PROGRAM_TEXEL_OFFSET: 0x8905;
    /** Type: GLenum */
    readonly MAX_VARYING_COMPONENTS: 0x8B4B;
    /** Type: GLenum */
    readonly TEXTURE_2D_ARRAY: 0x8C1A;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_2D_ARRAY: 0x8C1D;
    /** Type: GLenum */
    readonly R11F_G11F_B10F: 0x8C3A;
    /** Type: GLenum */
    readonly UNSIGNED_INT_10F_11F_11F_REV: 0x8C3B;
    /** Type: GLenum */
    readonly RGB9_E5: 0x8C3D;
    /** Type: GLenum */
    readonly UNSIGNED_INT_5_9_9_9_REV: 0x8C3E;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_MODE: 0x8C7F;
    /** Type: GLenum */
    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: 0x8C80;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_VARYINGS: 0x8C83;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_START: 0x8C84;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_SIZE: 0x8C85;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: 0x8C88;
    /** Type: GLenum */
    readonly RASTERIZER_DISCARD: 0x8C89;
    /** Type: GLenum */
    readonly MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: 0x8C8A;
    /** Type: GLenum */
    readonly MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: 0x8C8B;
    /** Type: GLenum */
    readonly INTERLEAVED_ATTRIBS: 0x8C8C;
    /** Type: GLenum */
    readonly SEPARATE_ATTRIBS: 0x8C8D;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER: 0x8C8E;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BUFFER_BINDING: 0x8C8F;
    /** Type: GLenum */
    readonly RGBA32UI: 0x8D70;
    /** Type: GLenum */
    readonly RGB32UI: 0x8D71;
    /** Type: GLenum */
    readonly RGBA16UI: 0x8D76;
    /** Type: GLenum */
    readonly RGB16UI: 0x8D77;
    /** Type: GLenum */
    readonly RGBA8UI: 0x8D7C;
    /** Type: GLenum */
    readonly RGB8UI: 0x8D7D;
    /** Type: GLenum */
    readonly RGBA32I: 0x8D82;
    /** Type: GLenum */
    readonly RGB32I: 0x8D83;
    /** Type: GLenum */
    readonly RGBA16I: 0x8D88;
    /** Type: GLenum */
    readonly RGB16I: 0x8D89;
    /** Type: GLenum */
    readonly RGBA8I: 0x8D8E;
    /** Type: GLenum */
    readonly RGB8I: 0x8D8F;
    /** Type: GLenum */
    readonly RED_INTEGER: 0x8D94;
    /** Type: GLenum */
    readonly RGB_INTEGER: 0x8D98;
    /** Type: GLenum */
    readonly RGBA_INTEGER: 0x8D99;
    /** Type: GLenum */
    readonly SAMPLER_2D_ARRAY: 0x8DC1;
    /** Type: GLenum */
    readonly SAMPLER_2D_ARRAY_SHADOW: 0x8DC4;
    /** Type: GLenum */
    readonly SAMPLER_CUBE_SHADOW: 0x8DC5;
    /** Type: GLenum */
    readonly UNSIGNED_INT_VEC2: 0x8DC6;
    /** Type: GLenum */
    readonly UNSIGNED_INT_VEC3: 0x8DC7;
    /** Type: GLenum */
    readonly UNSIGNED_INT_VEC4: 0x8DC8;
    /** Type: GLenum */
    readonly INT_SAMPLER_2D: 0x8DCA;
    /** Type: GLenum */
    readonly INT_SAMPLER_3D: 0x8DCB;
    /** Type: GLenum */
    readonly INT_SAMPLER_CUBE: 0x8DCC;
    /** Type: GLenum */
    readonly INT_SAMPLER_2D_ARRAY: 0x8DCF;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_2D: 0x8DD2;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_3D: 0x8DD3;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_CUBE: 0x8DD4;
    /** Type: GLenum */
    readonly UNSIGNED_INT_SAMPLER_2D_ARRAY: 0x8DD7;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT32F: 0x8CAC;
    /** Type: GLenum */
    readonly DEPTH32F_STENCIL8: 0x8CAD;
    /** Type: GLenum */
    readonly FLOAT_32_UNSIGNED_INT_24_8_REV: 0x8DAD;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: 0x8210;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: 0x8211;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_RED_SIZE: 0x8212;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: 0x8213;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: 0x8214;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: 0x8215;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: 0x8216;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: 0x8217;
    /** Type: GLenum */
    readonly FRAMEBUFFER_DEFAULT: 0x8218;
    /** Type: GLenum */
    readonly UNSIGNED_INT_24_8: 0x84FA;
    /** Type: GLenum */
    readonly DEPTH24_STENCIL8: 0x88F0;
    /** Type: GLenum */
    readonly UNSIGNED_NORMALIZED: 0x8C17;
    /** Type: GLenum */
    readonly DRAW_FRAMEBUFFER_BINDING: 0x8CA6;
    /** Type: GLenum */
    readonly READ_FRAMEBUFFER: 0x8CA8;
    /** Type: GLenum */
    readonly DRAW_FRAMEBUFFER: 0x8CA9;
    /** Type: GLenum */
    readonly READ_FRAMEBUFFER_BINDING: 0x8CAA;
    /** Type: GLenum */
    readonly RENDERBUFFER_SAMPLES: 0x8CAB;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: 0x8CD4;
    /** Type: GLenum */
    readonly MAX_COLOR_ATTACHMENTS: 0x8CDF;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT1: 0x8CE1;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT2: 0x8CE2;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT3: 0x8CE3;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT4: 0x8CE4;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT5: 0x8CE5;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT6: 0x8CE6;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT7: 0x8CE7;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT8: 0x8CE8;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT9: 0x8CE9;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT10: 0x8CEA;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT11: 0x8CEB;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT12: 0x8CEC;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT13: 0x8CED;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT14: 0x8CEE;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT15: 0x8CEF;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: 0x8D56;
    /** Type: GLenum */
    readonly MAX_SAMPLES: 0x8D57;
    /** Type: GLenum */
    readonly HALF_FLOAT: 0x140B;
    /** Type: GLenum */
    readonly RG: 0x8227;
    /** Type: GLenum */
    readonly RG_INTEGER: 0x8228;
    /** Type: GLenum */
    readonly R8: 0x8229;
    /** Type: GLenum */
    readonly RG8: 0x822B;
    /** Type: GLenum */
    readonly R16F: 0x822D;
    /** Type: GLenum */
    readonly R32F: 0x822E;
    /** Type: GLenum */
    readonly RG16F: 0x822F;
    /** Type: GLenum */
    readonly RG32F: 0x8230;
    /** Type: GLenum */
    readonly R8I: 0x8231;
    /** Type: GLenum */
    readonly R8UI: 0x8232;
    /** Type: GLenum */
    readonly R16I: 0x8233;
    /** Type: GLenum */
    readonly R16UI: 0x8234;
    /** Type: GLenum */
    readonly R32I: 0x8235;
    /** Type: GLenum */
    readonly R32UI: 0x8236;
    /** Type: GLenum */
    readonly RG8I: 0x8237;
    /** Type: GLenum */
    readonly RG8UI: 0x8238;
    /** Type: GLenum */
    readonly RG16I: 0x8239;
    /** Type: GLenum */
    readonly RG16UI: 0x823A;
    /** Type: GLenum */
    readonly RG32I: 0x823B;
    /** Type: GLenum */
    readonly RG32UI: 0x823C;
    /** Type: GLenum */
    readonly VERTEX_ARRAY_BINDING: 0x85B5;
    /** Type: GLenum */
    readonly R8_SNORM: 0x8F94;
    /** Type: GLenum */
    readonly RG8_SNORM: 0x8F95;
    /** Type: GLenum */
    readonly RGB8_SNORM: 0x8F96;
    /** Type: GLenum */
    readonly RGBA8_SNORM: 0x8F97;
    /** Type: GLenum */
    readonly SIGNED_NORMALIZED: 0x8F9C;
    /** Type: GLenum */
    readonly COPY_READ_BUFFER: 0x8F36;
    /** Type: GLenum */
    readonly COPY_WRITE_BUFFER: 0x8F37;
    /** Type: GLenum */
    readonly COPY_READ_BUFFER_BINDING: 0x8F36;
    /** Type: GLenum */
    readonly COPY_WRITE_BUFFER_BINDING: 0x8F37;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER: 0x8A11;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_BINDING: 0x8A28;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_START: 0x8A29;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_SIZE: 0x8A2A;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_BLOCKS: 0x8A2B;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_BLOCKS: 0x8A2D;
    /** Type: GLenum */
    readonly MAX_COMBINED_UNIFORM_BLOCKS: 0x8A2E;
    /** Type: GLenum */
    readonly MAX_UNIFORM_BUFFER_BINDINGS: 0x8A2F;
    /** Type: GLenum */
    readonly MAX_UNIFORM_BLOCK_SIZE: 0x8A30;
    /** Type: GLenum */
    readonly MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: 0x8A31;
    /** Type: GLenum */
    readonly MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: 0x8A33;
    /** Type: GLenum */
    readonly UNIFORM_BUFFER_OFFSET_ALIGNMENT: 0x8A34;
    /** Type: GLenum */
    readonly ACTIVE_UNIFORM_BLOCKS: 0x8A36;
    /** Type: GLenum */
    readonly UNIFORM_TYPE: 0x8A37;
    /** Type: GLenum */
    readonly UNIFORM_SIZE: 0x8A38;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_INDEX: 0x8A3A;
    /** Type: GLenum */
    readonly UNIFORM_OFFSET: 0x8A3B;
    /** Type: GLenum */
    readonly UNIFORM_ARRAY_STRIDE: 0x8A3C;
    /** Type: GLenum */
    readonly UNIFORM_MATRIX_STRIDE: 0x8A3D;
    /** Type: GLenum */
    readonly UNIFORM_IS_ROW_MAJOR: 0x8A3E;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_BINDING: 0x8A3F;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_DATA_SIZE: 0x8A40;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_ACTIVE_UNIFORMS: 0x8A42;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: 0x8A43;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: 0x8A44;
    /** Type: GLenum */
    readonly UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: 0x8A46;
    /** Type: GLenum */
    readonly INVALID_INDEX: 0xFFFFFFFF;
    /** Type: GLenum */
    readonly MAX_VERTEX_OUTPUT_COMPONENTS: 0x9122;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_INPUT_COMPONENTS: 0x9125;
    /** Type: GLenum */
    readonly MAX_SERVER_WAIT_TIMEOUT: 0x9111;
    /** Type: GLenum */
    readonly OBJECT_TYPE: 0x9112;
    /** Type: GLenum */
    readonly SYNC_CONDITION: 0x9113;
    /** Type: GLenum */
    readonly SYNC_STATUS: 0x9114;
    /** Type: GLenum */
    readonly SYNC_FLAGS: 0x9115;
    /** Type: GLenum */
    readonly SYNC_FENCE: 0x9116;
    /** Type: GLenum */
    readonly SYNC_GPU_COMMANDS_COMPLETE: 0x9117;
    /** Type: GLenum */
    readonly UNSIGNALED: 0x9118;
    /** Type: GLenum */
    readonly SIGNALED: 0x9119;
    /** Type: GLenum */
    readonly ALREADY_SIGNALED: 0x911A;
    /** Type: GLenum */
    readonly TIMEOUT_EXPIRED: 0x911B;
    /** Type: GLenum */
    readonly CONDITION_SATISFIED: 0x911C;
    /** Type: GLenum */
    readonly WAIT_FAILED: 0x911D;
    /** Type: GLenum */
    readonly SYNC_FLUSH_COMMANDS_BIT: 0x00000001;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_DIVISOR: 0x88FE;
    /** Type: GLenum */
    readonly ANY_SAMPLES_PASSED: 0x8C2F;
    /** Type: GLenum */
    readonly ANY_SAMPLES_PASSED_CONSERVATIVE: 0x8D6A;
    /** Type: GLenum */
    readonly SAMPLER_BINDING: 0x8919;
    /** Type: GLenum */
    readonly RGB10_A2UI: 0x906F;
    /** Type: GLenum */
    readonly INT_2_10_10_10_REV: 0x8D9F;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK: 0x8E22;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_PAUSED: 0x8E23;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_ACTIVE: 0x8E24;
    /** Type: GLenum */
    readonly TRANSFORM_FEEDBACK_BINDING: 0x8E25;
    /** Type: GLenum */
    readonly TEXTURE_IMMUTABLE_FORMAT: 0x912F;
    /** Type: GLenum */
    readonly MAX_ELEMENT_INDEX: 0x8D6B;
    /** Type: GLenum */
    readonly TEXTURE_IMMUTABLE_LEVELS: 0x82DF;
    /** Type: GLint64 */
    readonly TIMEOUT_IGNORED: -1;
    /** Type: GLenum */
    readonly MAX_CLIENT_WAIT_TIMEOUT_WEBGL: 0x9247;
}

interface WebGL2RenderingContextOverloads {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bufferData)
     */
    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;
    bufferData(target: GLenum, srcData: AllowSharedBufferSource | null, usage: GLenum): void;
    bufferData(target: GLenum, srcData: ArrayBufferView<ArrayBufferLike>, usage: GLenum, srcOffset: number, length?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/bufferSubData)
     */
    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: AllowSharedBufferSource): void;
    bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset: number, length?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
     */
    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;
    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset?: number, srcLengthOverride?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
     */
    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;
    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset?: number, srcLengthOverride?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
     */
    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView<ArrayBufferLike> | null): void;
    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): void;
    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView<ArrayBufferLike>, dstOffset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
     */
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView<ArrayBufferLike> | null): void;
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
     */
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView<ArrayBufferLike> | null): void;
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView<ArrayBufferLike>, srcOffset: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform1fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform1iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform2fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform2iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform3fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform3iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform4fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform4iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/uniformMatrix)
     */
    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
     */
    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
     */
    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: number, srcLength?: GLuint): void;
}

/**
 * The **WebGLActiveInfo** interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo)
 */
interface WebGLActiveInfo {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/name)
     */
    readonly name: string;
    /**
     * Type: GLint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/size)
     */
    readonly size: GLint;
    /**
     * Type: GLenum
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLActiveInfo/type)
     */
    readonly type: GLenum;
}

declare var WebGLActiveInfo: {
    prototype: WebGLActiveInfo;
    new(): WebGLActiveInfo;
};

/**
 * The **WebGLBuffer** interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLBuffer)
 */
interface WebGLBuffer {
}

declare var WebGLBuffer: {
    prototype: WebGLBuffer;
    new(): WebGLBuffer;
};

/**
 * The **WebGLContextEvent** interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent)
 */
interface WebGLContextEvent extends Event {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLContextEvent/statusMessage)
     */
    readonly statusMessage: string;
}

declare var WebGLContextEvent: {
    prototype: WebGLContextEvent;
    new(type: string, eventInit?: WebGLContextEventInit): WebGLContextEvent;
};

/**
 * The **WebGLFramebuffer** interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLFramebuffer)
 */
interface WebGLFramebuffer {
}

declare var WebGLFramebuffer: {
    prototype: WebGLFramebuffer;
    new(): WebGLFramebuffer;
};

/**
 * The **`WebGLProgram`** is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLProgram)
 */
interface WebGLProgram {
}

declare var WebGLProgram: {
    prototype: WebGLProgram;
    new(): WebGLProgram;
};

/**
 * The **`WebGLQuery`** interface is part of the WebGL 2 API and provides ways to asynchronously query for information.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLQuery)
 */
interface WebGLQuery {
}

declare var WebGLQuery: {
    prototype: WebGLQuery;
    new(): WebGLQuery;
};

/**
 * The **WebGLRenderbuffer** interface is part of the WebGL API and represents a buffer that can contain an image, or that can be a source or target of a rendering operation.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderbuffer)
 */
interface WebGLRenderbuffer {
}

declare var WebGLRenderbuffer: {
    prototype: WebGLRenderbuffer;
    new(): WebGLRenderbuffer;
};

/**
 * The **`WebGLRenderingContext`** interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML canvas element.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext)
 */
interface WebGLRenderingContext extends WebGLRenderingContextBase, WebGLRenderingContextOverloads {
}

declare var WebGLRenderingContext: {
    prototype: WebGLRenderingContext;
    new(): WebGLRenderingContext;
    /** Type: GLenum */
    readonly DEPTH_BUFFER_BIT: 0x00000100;
    /** Type: GLenum */
    readonly STENCIL_BUFFER_BIT: 0x00000400;
    /** Type: GLenum */
    readonly COLOR_BUFFER_BIT: 0x00004000;
    /** Type: GLenum */
    readonly POINTS: 0x0000;
    /** Type: GLenum */
    readonly LINES: 0x0001;
    /** Type: GLenum */
    readonly LINE_LOOP: 0x0002;
    /** Type: GLenum */
    readonly LINE_STRIP: 0x0003;
    /** Type: GLenum */
    readonly TRIANGLES: 0x0004;
    /** Type: GLenum */
    readonly TRIANGLE_STRIP: 0x0005;
    /** Type: GLenum */
    readonly TRIANGLE_FAN: 0x0006;
    /** Type: GLenum */
    readonly ZERO: 0;
    /** Type: GLenum */
    readonly ONE: 1;
    /** Type: GLenum */
    readonly SRC_COLOR: 0x0300;
    /** Type: GLenum */
    readonly ONE_MINUS_SRC_COLOR: 0x0301;
    /** Type: GLenum */
    readonly SRC_ALPHA: 0x0302;
    /** Type: GLenum */
    readonly ONE_MINUS_SRC_ALPHA: 0x0303;
    /** Type: GLenum */
    readonly DST_ALPHA: 0x0304;
    /** Type: GLenum */
    readonly ONE_MINUS_DST_ALPHA: 0x0305;
    /** Type: GLenum */
    readonly DST_COLOR: 0x0306;
    /** Type: GLenum */
    readonly ONE_MINUS_DST_COLOR: 0x0307;
    /** Type: GLenum */
    readonly SRC_ALPHA_SATURATE: 0x0308;
    /** Type: GLenum */
    readonly FUNC_ADD: 0x8006;
    /** Type: GLenum */
    readonly BLEND_EQUATION: 0x8009;
    /** Type: GLenum */
    readonly BLEND_EQUATION_RGB: 0x8009;
    /** Type: GLenum */
    readonly BLEND_EQUATION_ALPHA: 0x883D;
    /** Type: GLenum */
    readonly FUNC_SUBTRACT: 0x800A;
    /** Type: GLenum */
    readonly FUNC_REVERSE_SUBTRACT: 0x800B;
    /** Type: GLenum */
    readonly BLEND_DST_RGB: 0x80C8;
    /** Type: GLenum */
    readonly BLEND_SRC_RGB: 0x80C9;
    /** Type: GLenum */
    readonly BLEND_DST_ALPHA: 0x80CA;
    /** Type: GLenum */
    readonly BLEND_SRC_ALPHA: 0x80CB;
    /** Type: GLenum */
    readonly CONSTANT_COLOR: 0x8001;
    /** Type: GLenum */
    readonly ONE_MINUS_CONSTANT_COLOR: 0x8002;
    /** Type: GLenum */
    readonly CONSTANT_ALPHA: 0x8003;
    /** Type: GLenum */
    readonly ONE_MINUS_CONSTANT_ALPHA: 0x8004;
    /** Type: GLenum */
    readonly BLEND_COLOR: 0x8005;
    /** Type: GLenum */
    readonly ARRAY_BUFFER: 0x8892;
    /** Type: GLenum */
    readonly ELEMENT_ARRAY_BUFFER: 0x8893;
    /** Type: GLenum */
    readonly ARRAY_BUFFER_BINDING: 0x8894;
    /** Type: GLenum */
    readonly ELEMENT_ARRAY_BUFFER_BINDING: 0x8895;
    /** Type: GLenum */
    readonly STREAM_DRAW: 0x88E0;
    /** Type: GLenum */
    readonly STATIC_DRAW: 0x88E4;
    /** Type: GLenum */
    readonly DYNAMIC_DRAW: 0x88E8;
    /** Type: GLenum */
    readonly BUFFER_SIZE: 0x8764;
    /** Type: GLenum */
    readonly BUFFER_USAGE: 0x8765;
    /** Type: GLenum */
    readonly CURRENT_VERTEX_ATTRIB: 0x8626;
    /** Type: GLenum */
    readonly FRONT: 0x0404;
    /** Type: GLenum */
    readonly BACK: 0x0405;
    /** Type: GLenum */
    readonly FRONT_AND_BACK: 0x0408;
    /** Type: GLenum */
    readonly CULL_FACE: 0x0B44;
    /** Type: GLenum */
    readonly BLEND: 0x0BE2;
    /** Type: GLenum */
    readonly DITHER: 0x0BD0;
    /** Type: GLenum */
    readonly STENCIL_TEST: 0x0B90;
    /** Type: GLenum */
    readonly DEPTH_TEST: 0x0B71;
    /** Type: GLenum */
    readonly SCISSOR_TEST: 0x0C11;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_FILL: 0x8037;
    /** Type: GLenum */
    readonly SAMPLE_ALPHA_TO_COVERAGE: 0x809E;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE: 0x80A0;
    /** Type: GLenum */
    readonly NO_ERROR: 0;
    /** Type: GLenum */
    readonly INVALID_ENUM: 0x0500;
    /** Type: GLenum */
    readonly INVALID_VALUE: 0x0501;
    /** Type: GLenum */
    readonly INVALID_OPERATION: 0x0502;
    /** Type: GLenum */
    readonly OUT_OF_MEMORY: 0x0505;
    /** Type: GLenum */
    readonly CW: 0x0900;
    /** Type: GLenum */
    readonly CCW: 0x0901;
    /** Type: GLenum */
    readonly LINE_WIDTH: 0x0B21;
    /** Type: GLenum */
    readonly ALIASED_POINT_SIZE_RANGE: 0x846D;
    /** Type: GLenum */
    readonly ALIASED_LINE_WIDTH_RANGE: 0x846E;
    /** Type: GLenum */
    readonly CULL_FACE_MODE: 0x0B45;
    /** Type: GLenum */
    readonly FRONT_FACE: 0x0B46;
    /** Type: GLenum */
    readonly DEPTH_RANGE: 0x0B70;
    /** Type: GLenum */
    readonly DEPTH_WRITEMASK: 0x0B72;
    /** Type: GLenum */
    readonly DEPTH_CLEAR_VALUE: 0x0B73;
    /** Type: GLenum */
    readonly DEPTH_FUNC: 0x0B74;
    /** Type: GLenum */
    readonly STENCIL_CLEAR_VALUE: 0x0B91;
    /** Type: GLenum */
    readonly STENCIL_FUNC: 0x0B92;
    /** Type: GLenum */
    readonly STENCIL_FAIL: 0x0B94;
    /** Type: GLenum */
    readonly STENCIL_PASS_DEPTH_FAIL: 0x0B95;
    /** Type: GLenum */
    readonly STENCIL_PASS_DEPTH_PASS: 0x0B96;
    /** Type: GLenum */
    readonly STENCIL_REF: 0x0B97;
    /** Type: GLenum */
    readonly STENCIL_VALUE_MASK: 0x0B93;
    /** Type: GLenum */
    readonly STENCIL_WRITEMASK: 0x0B98;
    /** Type: GLenum */
    readonly STENCIL_BACK_FUNC: 0x8800;
    /** Type: GLenum */
    readonly STENCIL_BACK_FAIL: 0x8801;
    /** Type: GLenum */
    readonly STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802;
    /** Type: GLenum */
    readonly STENCIL_BACK_PASS_DEPTH_PASS: 0x8803;
    /** Type: GLenum */
    readonly STENCIL_BACK_REF: 0x8CA3;
    /** Type: GLenum */
    readonly STENCIL_BACK_VALUE_MASK: 0x8CA4;
    /** Type: GLenum */
    readonly STENCIL_BACK_WRITEMASK: 0x8CA5;
    /** Type: undefined */
    readonly VIEWPORT: 0x0BA2;
    /** Type: GLenum */
    readonly SCISSOR_BOX: 0x0C10;
    /** Type: GLenum */
    readonly COLOR_CLEAR_VALUE: 0x0C22;
    /** Type: GLenum */
    readonly COLOR_WRITEMASK: 0x0C23;
    /** Type: GLenum */
    readonly UNPACK_ALIGNMENT: 0x0CF5;
    /** Type: GLenum */
    readonly PACK_ALIGNMENT: 0x0D05;
    /** Type: GLenum */
    readonly MAX_TEXTURE_SIZE: 0x0D33;
    /** Type: GLenum */
    readonly MAX_VIEWPORT_DIMS: 0x0D3A;
    /** Type: GLenum */
    readonly SUBPIXEL_BITS: 0x0D50;
    /** Type: GLenum */
    readonly RED_BITS: 0x0D52;
    /** Type: GLenum */
    readonly GREEN_BITS: 0x0D53;
    /** Type: GLenum */
    readonly BLUE_BITS: 0x0D54;
    /** Type: GLenum */
    readonly ALPHA_BITS: 0x0D55;
    /** Type: GLenum */
    readonly DEPTH_BITS: 0x0D56;
    /** Type: GLenum */
    readonly STENCIL_BITS: 0x0D57;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_UNITS: 0x2A00;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_FACTOR: 0x8038;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_2D: 0x8069;
    /** Type: GLenum */
    readonly SAMPLE_BUFFERS: 0x80A8;
    /** Type: GLenum */
    readonly SAMPLES: 0x80A9;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE_VALUE: 0x80AA;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE_INVERT: 0x80AB;
    /** Type: GLenum */
    readonly COMPRESSED_TEXTURE_FORMATS: 0x86A3;
    /** Type: GLenum */
    readonly DONT_CARE: 0x1100;
    /** Type: GLenum */
    readonly FASTEST: 0x1101;
    /** Type: GLenum */
    readonly NICEST: 0x1102;
    /** Type: GLenum */
    readonly GENERATE_MIPMAP_HINT: 0x8192;
    /** Type: GLenum */
    readonly BYTE: 0x1400;
    /** Type: GLenum */
    readonly UNSIGNED_BYTE: 0x1401;
    /** Type: GLenum */
    readonly SHORT: 0x1402;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT: 0x1403;
    /** Type: GLenum */
    readonly INT: 0x1404;
    /** Type: GLenum */
    readonly UNSIGNED_INT: 0x1405;
    /** Type: GLenum */
    readonly FLOAT: 0x1406;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT: 0x1902;
    /** Type: GLenum */
    readonly ALPHA: 0x1906;
    /** Type: GLenum */
    readonly RGB: 0x1907;
    /** Type: GLenum */
    readonly RGBA: 0x1908;
    /** Type: GLenum */
    readonly LUMINANCE: 0x1909;
    /** Type: GLenum */
    readonly LUMINANCE_ALPHA: 0x190A;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_4_4_4_4: 0x8033;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_5_5_5_1: 0x8034;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_5_6_5: 0x8363;
    /** Type: GLenum */
    readonly FRAGMENT_SHADER: 0x8B30;
    /** Type: GLenum */
    readonly VERTEX_SHADER: 0x8B31;
    /** Type: GLenum */
    readonly MAX_VERTEX_ATTRIBS: 0x8869;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB;
    /** Type: GLenum */
    readonly MAX_VARYING_VECTORS: 0x8DFC;
    /** Type: GLenum */
    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D;
    /** Type: GLenum */
    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C;
    /** Type: GLenum */
    readonly MAX_TEXTURE_IMAGE_UNITS: 0x8872;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD;
    /** Type: GLenum */
    readonly SHADER_TYPE: 0x8B4F;
    /** Type: GLenum */
    readonly DELETE_STATUS: 0x8B80;
    /** Type: GLenum */
    readonly LINK_STATUS: 0x8B82;
    /** Type: GLenum */
    readonly VALIDATE_STATUS: 0x8B83;
    /** Type: GLenum */
    readonly ATTACHED_SHADERS: 0x8B85;
    /** Type: GLenum */
    readonly ACTIVE_UNIFORMS: 0x8B86;
    /** Type: GLenum */
    readonly ACTIVE_ATTRIBUTES: 0x8B89;
    /** Type: GLenum */
    readonly SHADING_LANGUAGE_VERSION: 0x8B8C;
    /** Type: GLenum */
    readonly CURRENT_PROGRAM: 0x8B8D;
    /** Type: GLenum */
    readonly NEVER: 0x0200;
    /** Type: GLenum */
    readonly LESS: 0x0201;
    /** Type: GLenum */
    readonly EQUAL: 0x0202;
    /** Type: GLenum */
    readonly LEQUAL: 0x0203;
    /** Type: GLenum */
    readonly GREATER: 0x0204;
    /** Type: GLenum */
    readonly NOTEQUAL: 0x0205;
    /** Type: GLenum */
    readonly GEQUAL: 0x0206;
    /** Type: GLenum */
    readonly ALWAYS: 0x0207;
    /** Type: GLenum */
    readonly KEEP: 0x1E00;
    /** Type: GLenum */
    readonly REPLACE: 0x1E01;
    /** Type: GLenum */
    readonly INCR: 0x1E02;
    /** Type: GLenum */
    readonly DECR: 0x1E03;
    /** Type: GLenum */
    readonly INVERT: 0x150A;
    /** Type: GLenum */
    readonly INCR_WRAP: 0x8507;
    /** Type: GLenum */
    readonly DECR_WRAP: 0x8508;
    /** Type: GLenum */
    readonly VENDOR: 0x1F00;
    /** Type: GLenum */
    readonly RENDERER: 0x1F01;
    /** Type: GLenum */
    readonly VERSION: 0x1F02;
    /** Type: GLenum */
    readonly NEAREST: 0x2600;
    /** Type: GLenum */
    readonly LINEAR: 0x2601;
    /** Type: GLenum */
    readonly NEAREST_MIPMAP_NEAREST: 0x2700;
    /** Type: GLenum */
    readonly LINEAR_MIPMAP_NEAREST: 0x2701;
    /** Type: GLenum */
    readonly NEAREST_MIPMAP_LINEAR: 0x2702;
    /** Type: GLenum */
    readonly LINEAR_MIPMAP_LINEAR: 0x2703;
    /** Type: GLenum */
    readonly TEXTURE_MAG_FILTER: 0x2800;
    /** Type: GLenum */
    readonly TEXTURE_MIN_FILTER: 0x2801;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_S: 0x2802;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_T: 0x2803;
    /** Type: GLenum */
    readonly TEXTURE_2D: 0x0DE1;
    /** Type: GLenum */
    readonly TEXTURE: 0x1702;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP: 0x8513;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_CUBE_MAP: 0x8514;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A;
    /** Type: GLenum */
    readonly MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C;
    /** Type: GLenum */
    readonly TEXTURE0: 0x84C0;
    /** Type: GLenum */
    readonly TEXTURE1: 0x84C1;
    /** Type: GLenum */
    readonly TEXTURE2: 0x84C2;
    /** Type: GLenum */
    readonly TEXTURE3: 0x84C3;
    /** Type: GLenum */
    readonly TEXTURE4: 0x84C4;
    /** Type: GLenum */
    readonly TEXTURE5: 0x84C5;
    /** Type: GLenum */
    readonly TEXTURE6: 0x84C6;
    /** Type: GLenum */
    readonly TEXTURE7: 0x84C7;
    /** Type: GLenum */
    readonly TEXTURE8: 0x84C8;
    /** Type: GLenum */
    readonly TEXTURE9: 0x84C9;
    /** Type: GLenum */
    readonly TEXTURE10: 0x84CA;
    /** Type: GLenum */
    readonly TEXTURE11: 0x84CB;
    /** Type: GLenum */
    readonly TEXTURE12: 0x84CC;
    /** Type: GLenum */
    readonly TEXTURE13: 0x84CD;
    /** Type: GLenum */
    readonly TEXTURE14: 0x84CE;
    /** Type: GLenum */
    readonly TEXTURE15: 0x84CF;
    /** Type: GLenum */
    readonly TEXTURE16: 0x84D0;
    /** Type: GLenum */
    readonly TEXTURE17: 0x84D1;
    /** Type: GLenum */
    readonly TEXTURE18: 0x84D2;
    /** Type: GLenum */
    readonly TEXTURE19: 0x84D3;
    /** Type: GLenum */
    readonly TEXTURE20: 0x84D4;
    /** Type: GLenum */
    readonly TEXTURE21: 0x84D5;
    /** Type: GLenum */
    readonly TEXTURE22: 0x84D6;
    /** Type: GLenum */
    readonly TEXTURE23: 0x84D7;
    /** Type: GLenum */
    readonly TEXTURE24: 0x84D8;
    /** Type: GLenum */
    readonly TEXTURE25: 0x84D9;
    /** Type: GLenum */
    readonly TEXTURE26: 0x84DA;
    /** Type: GLenum */
    readonly TEXTURE27: 0x84DB;
    /** Type: GLenum */
    readonly TEXTURE28: 0x84DC;
    /** Type: GLenum */
    readonly TEXTURE29: 0x84DD;
    /** Type: GLenum */
    readonly TEXTURE30: 0x84DE;
    /** Type: GLenum */
    readonly TEXTURE31: 0x84DF;
    /** Type: GLenum */
    readonly ACTIVE_TEXTURE: 0x84E0;
    /** Type: GLenum */
    readonly REPEAT: 0x2901;
    /** Type: GLenum */
    readonly CLAMP_TO_EDGE: 0x812F;
    /** Type: GLenum */
    readonly MIRRORED_REPEAT: 0x8370;
    /** Type: GLenum */
    readonly FLOAT_VEC2: 0x8B50;
    /** Type: GLenum */
    readonly FLOAT_VEC3: 0x8B51;
    /** Type: GLenum */
    readonly FLOAT_VEC4: 0x8B52;
    /** Type: GLenum */
    readonly INT_VEC2: 0x8B53;
    /** Type: GLenum */
    readonly INT_VEC3: 0x8B54;
    /** Type: GLenum */
    readonly INT_VEC4: 0x8B55;
    /** Type: GLenum */
    readonly BOOL: 0x8B56;
    /** Type: GLenum */
    readonly BOOL_VEC2: 0x8B57;
    /** Type: GLenum */
    readonly BOOL_VEC3: 0x8B58;
    /** Type: GLenum */
    readonly BOOL_VEC4: 0x8B59;
    /** Type: GLenum */
    readonly FLOAT_MAT2: 0x8B5A;
    /** Type: GLenum */
    readonly FLOAT_MAT3: 0x8B5B;
    /** Type: GLenum */
    readonly FLOAT_MAT4: 0x8B5C;
    /** Type: GLenum */
    readonly SAMPLER_2D: 0x8B5E;
    /** Type: GLenum */
    readonly SAMPLER_CUBE: 0x8B60;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_SIZE: 0x8623;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_TYPE: 0x8625;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_POINTER: 0x8645;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F;
    /** Type: GLenum */
    readonly IMPLEMENTATION_COLOR_READ_TYPE: 0x8B9A;
    /** Type: GLenum */
    readonly IMPLEMENTATION_COLOR_READ_FORMAT: 0x8B9B;
    /** Type: GLenum */
    readonly COMPILE_STATUS: 0x8B81;
    /** Type: GLenum */
    readonly LOW_FLOAT: 0x8DF0;
    /** Type: GLenum */
    readonly MEDIUM_FLOAT: 0x8DF1;
    /** Type: GLenum */
    readonly HIGH_FLOAT: 0x8DF2;
    /** Type: GLenum */
    readonly LOW_INT: 0x8DF3;
    /** Type: GLenum */
    readonly MEDIUM_INT: 0x8DF4;
    /** Type: GLenum */
    readonly HIGH_INT: 0x8DF5;
    /** Type: GLenum */
    readonly FRAMEBUFFER: 0x8D40;
    /** Type: GLenum */
    readonly RENDERBUFFER: 0x8D41;
    /** Type: GLenum */
    readonly RGBA4: 0x8056;
    /** Type: GLenum */
    readonly RGB5_A1: 0x8057;
    /** Type: GLenum */
    readonly RGBA8: 0x8058;
    /** Type: GLenum */
    readonly RGB565: 0x8D62;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT16: 0x81A5;
    /** Type: GLenum */
    readonly STENCIL_INDEX8: 0x8D48;
    /** Type: GLenum */
    readonly DEPTH_STENCIL: 0x84F9;
    /** Type: GLenum */
    readonly RENDERBUFFER_WIDTH: 0x8D42;
    /** Type: GLenum */
    readonly RENDERBUFFER_HEIGHT: 0x8D43;
    /** Type: GLenum */
    readonly RENDERBUFFER_INTERNAL_FORMAT: 0x8D44;
    /** Type: GLenum */
    readonly RENDERBUFFER_RED_SIZE: 0x8D50;
    /** Type: GLenum */
    readonly RENDERBUFFER_GREEN_SIZE: 0x8D51;
    /** Type: GLenum */
    readonly RENDERBUFFER_BLUE_SIZE: 0x8D52;
    /** Type: GLenum */
    readonly RENDERBUFFER_ALPHA_SIZE: 0x8D53;
    /** Type: GLenum */
    readonly RENDERBUFFER_DEPTH_SIZE: 0x8D54;
    /** Type: GLenum */
    readonly RENDERBUFFER_STENCIL_SIZE: 0x8D55;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT0: 0x8CE0;
    /** Type: GLenum */
    readonly DEPTH_ATTACHMENT: 0x8D00;
    /** Type: GLenum */
    readonly STENCIL_ATTACHMENT: 0x8D20;
    /** Type: GLenum */
    readonly DEPTH_STENCIL_ATTACHMENT: 0x821A;
    /** Type: GLenum */
    readonly NONE: 0;
    /** Type: GLenum */
    readonly FRAMEBUFFER_COMPLETE: 0x8CD5;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9;
    /** Type: GLenum */
    readonly FRAMEBUFFER_UNSUPPORTED: 0x8CDD;
    /** Type: GLenum */
    readonly FRAMEBUFFER_BINDING: 0x8CA6;
    /** Type: GLenum */
    readonly RENDERBUFFER_BINDING: 0x8CA7;
    /** Type: GLenum */
    readonly MAX_RENDERBUFFER_SIZE: 0x84E8;
    /** Type: GLenum */
    readonly INVALID_FRAMEBUFFER_OPERATION: 0x0506;
    /** Type: GLenum */
    readonly UNPACK_FLIP_Y_WEBGL: 0x9240;
    /** Type: GLenum */
    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241;
    /** Type: GLenum */
    readonly CONTEXT_LOST_WEBGL: 0x9242;
    /** Type: GLenum */
    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243;
    /** Type: GLenum */
    readonly BROWSER_DEFAULT_WEBGL: 0x9244;
};

interface WebGLRenderingContextBase {
    /**
     * Type: [object Object],[object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/canvas)
     */
    readonly canvas: HTMLCanvasElement | OffscreenCanvas;
    /**
     * Type: PredefinedColorSpace
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/drawingBufferColorSpace)
     */
    drawingBufferColorSpace: PredefinedColorSpace;
    /**
     * Type: GLsizei
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferHeight)
     */
    readonly drawingBufferHeight: GLsizei;
    /**
     * Type: GLsizei
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawingBufferWidth)
     */
    readonly drawingBufferWidth: GLsizei;
    /**
     * Type: PredefinedColorSpace
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGL2RenderingContext/unpackColorSpace)
     */
    unpackColorSpace: PredefinedColorSpace;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/activeTexture)
     */
    activeTexture(texture: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/attachShader)
     */
    attachShader(program: WebGLProgram, shader: WebGLShader): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindAttribLocation)
     */
    bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindBuffer)
     */
    bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindFramebuffer)
     */
    bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindRenderbuffer)
     */
    bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bindTexture)
     */
    bindTexture(target: GLenum, texture: WebGLTexture | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendColor)
     */
    blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquation)
     */
    blendEquation(mode: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendEquationSeparate)
     */
    blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFunc)
     */
    blendFunc(sfactor: GLenum, dfactor: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/blendFuncSeparate)
     */
    blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;
    /**
     * Type: GLenum
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/checkFramebufferStatus)
     */
    checkFramebufferStatus(target: GLenum): GLenum;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clear)
     */
    clear(mask: GLbitfield): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearColor)
     */
    clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearDepth)
     */
    clearDepth(depth: GLclampf): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/clearStencil)
     */
    clearStencil(s: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/colorMask)
     */
    colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compileShader)
     */
    compileShader(shader: WebGLShader): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexImage2D)
     */
    copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/copyTexSubImage2D)
     */
    copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
    /**
     * Type: WebGLBuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createBuffer)
     */
    createBuffer(): WebGLBuffer;
    /**
     * Type: WebGLFramebuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createFramebuffer)
     */
    createFramebuffer(): WebGLFramebuffer;
    /**
     * Type: WebGLProgram
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createProgram)
     */
    createProgram(): WebGLProgram;
    /**
     * Type: WebGLRenderbuffer
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createRenderbuffer)
     */
    createRenderbuffer(): WebGLRenderbuffer;
    /**
     * Type: WebGLShader
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createShader)
     */
    createShader(type: GLenum): WebGLShader | null;
    /**
     * Type: WebGLTexture
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/createTexture)
     */
    createTexture(): WebGLTexture;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/cullFace)
     */
    cullFace(mode: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteBuffer)
     */
    deleteBuffer(buffer: WebGLBuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteFramebuffer)
     */
    deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteProgram)
     */
    deleteProgram(program: WebGLProgram | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteRenderbuffer)
     */
    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteShader)
     */
    deleteShader(shader: WebGLShader | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/deleteTexture)
     */
    deleteTexture(texture: WebGLTexture | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthFunc)
     */
    depthFunc(func: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthMask)
     */
    depthMask(flag: GLboolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/depthRange)
     */
    depthRange(zNear: GLclampf, zFar: GLclampf): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/detachShader)
     */
    detachShader(program: WebGLProgram, shader: WebGLShader): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disable)
     */
    disable(cap: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/disableVertexAttribArray)
     */
    disableVertexAttribArray(index: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawArrays)
     */
    drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/drawElements)
     */
    drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enable)
     */
    enable(cap: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/enableVertexAttribArray)
     */
    enableVertexAttribArray(index: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/finish)
     */
    finish(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/flush)
     */
    flush(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferRenderbuffer)
     */
    framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/framebufferTexture2D)
     */
    framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture | null, level: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/frontFace)
     */
    frontFace(mode: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/generateMipmap)
     */
    generateMipmap(target: GLenum): void;
    /**
     * Type: WebGLActiveInfo
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveAttrib)
     */
    getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
    /**
     * Type: WebGLActiveInfo
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getActiveUniform)
     */
    getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttachedShaders)
     */
    getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;
    /**
     * Type: GLint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getAttribLocation)
     */
    getAttribLocation(program: WebGLProgram, name: string): GLint;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getBufferParameter)
     */
    getBufferParameter(target: GLenum, pname: GLenum): any;
    /**
     * Type: WebGLContextAttributes
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getContextAttributes)
     */
    getContextAttributes(): WebGLContextAttributes | null;
    /**
     * Type: GLenum
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getError)
     */
    getError(): GLenum;
    /**
     * Type: object
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getExtension)
     */
    getExtension(extensionName: "ANGLE_instanced_arrays"): ANGLE_instanced_arrays | null;
    getExtension(extensionName: "EXT_blend_minmax"): EXT_blend_minmax | null;
    getExtension(extensionName: "EXT_color_buffer_float"): EXT_color_buffer_float | null;
    getExtension(extensionName: "EXT_color_buffer_half_float"): EXT_color_buffer_half_float | null;
    getExtension(extensionName: "EXT_float_blend"): EXT_float_blend | null;
    getExtension(extensionName: "EXT_frag_depth"): EXT_frag_depth | null;
    getExtension(extensionName: "EXT_sRGB"): EXT_sRGB | null;
    getExtension(extensionName: "EXT_shader_texture_lod"): EXT_shader_texture_lod | null;
    getExtension(extensionName: "EXT_texture_compression_bptc"): EXT_texture_compression_bptc | null;
    getExtension(extensionName: "EXT_texture_compression_rgtc"): EXT_texture_compression_rgtc | null;
    getExtension(extensionName: "EXT_texture_filter_anisotropic"): EXT_texture_filter_anisotropic | null;
    getExtension(extensionName: "KHR_parallel_shader_compile"): KHR_parallel_shader_compile | null;
    getExtension(extensionName: "OES_element_index_uint"): OES_element_index_uint | null;
    getExtension(extensionName: "OES_fbo_render_mipmap"): OES_fbo_render_mipmap | null;
    getExtension(extensionName: "OES_standard_derivatives"): OES_standard_derivatives | null;
    getExtension(extensionName: "OES_texture_float"): OES_texture_float | null;
    getExtension(extensionName: "OES_texture_float_linear"): OES_texture_float_linear | null;
    getExtension(extensionName: "OES_texture_half_float"): OES_texture_half_float | null;
    getExtension(extensionName: "OES_texture_half_float_linear"): OES_texture_half_float_linear | null;
    getExtension(extensionName: "OES_vertex_array_object"): OES_vertex_array_object | null;
    getExtension(extensionName: "OVR_multiview2"): OVR_multiview2 | null;
    getExtension(extensionName: "WEBGL_color_buffer_float"): WEBGL_color_buffer_float | null;
    getExtension(extensionName: "WEBGL_compressed_texture_astc"): WEBGL_compressed_texture_astc | null;
    getExtension(extensionName: "WEBGL_compressed_texture_etc"): WEBGL_compressed_texture_etc | null;
    getExtension(extensionName: "WEBGL_compressed_texture_etc1"): WEBGL_compressed_texture_etc1 | null;
    getExtension(extensionName: "WEBGL_compressed_texture_pvrtc"): WEBGL_compressed_texture_pvrtc | null;
    getExtension(extensionName: "WEBGL_compressed_texture_s3tc"): WEBGL_compressed_texture_s3tc | null;
    getExtension(extensionName: "WEBGL_compressed_texture_s3tc_srgb"): WEBGL_compressed_texture_s3tc_srgb | null;
    getExtension(extensionName: "WEBGL_debug_renderer_info"): WEBGL_debug_renderer_info | null;
    getExtension(extensionName: "WEBGL_debug_shaders"): WEBGL_debug_shaders | null;
    getExtension(extensionName: "WEBGL_depth_texture"): WEBGL_depth_texture | null;
    getExtension(extensionName: "WEBGL_draw_buffers"): WEBGL_draw_buffers | null;
    getExtension(extensionName: "WEBGL_lose_context"): WEBGL_lose_context | null;
    getExtension(extensionName: "WEBGL_multi_draw"): WEBGL_multi_draw | null;
    getExtension(name: string): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getFramebufferAttachmentParameter)
     */
    getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getParameter)
     */
    getParameter(pname: GLenum): any;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramInfoLog)
     */
    getProgramInfoLog(program: WebGLProgram): string | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getProgramParameter)
     */
    getProgramParameter(program: WebGLProgram, pname: GLenum): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getRenderbufferParameter)
     */
    getRenderbufferParameter(target: GLenum, pname: GLenum): any;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderInfoLog)
     */
    getShaderInfoLog(shader: WebGLShader): string | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderParameter)
     */
    getShaderParameter(shader: WebGLShader, pname: GLenum): any;
    /**
     * Type: WebGLShaderPrecisionFormat
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderPrecisionFormat)
     */
    getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getShaderSource)
     */
    getShaderSource(shader: WebGLShader): string | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getSupportedExtensions)
     */
    getSupportedExtensions(): string[] | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getTexParameter)
     */
    getTexParameter(target: GLenum, pname: GLenum): any;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniform)
     */
    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;
    /**
     * Type: WebGLUniformLocation
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getUniformLocation)
     */
    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttrib)
     */
    getVertexAttrib(index: GLuint, pname: GLenum): any;
    /**
     * Type: GLintptr
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/getVertexAttribOffset)
     */
    getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/hint)
     */
    hint(target: GLenum, mode: GLenum): void;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isBuffer)
     */
    isBuffer(buffer: WebGLBuffer | null): GLboolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isContextLost)
     */
    isContextLost(): boolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isEnabled)
     */
    isEnabled(cap: GLenum): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isFramebuffer)
     */
    isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isProgram)
     */
    isProgram(program: WebGLProgram | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isRenderbuffer)
     */
    isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isShader)
     */
    isShader(shader: WebGLShader | null): GLboolean;
    /**
     * Type: GLboolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/isTexture)
     */
    isTexture(texture: WebGLTexture | null): GLboolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/lineWidth)
     */
    lineWidth(width: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/linkProgram)
     */
    linkProgram(program: WebGLProgram): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/pixelStorei)
     */
    pixelStorei(pname: GLenum, param: GLint | GLboolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/polygonOffset)
     */
    polygonOffset(factor: GLfloat, units: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/renderbufferStorage)
     */
    renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/sampleCoverage)
     */
    sampleCoverage(value: GLclampf, invert: GLboolean): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/scissor)
     */
    scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/shaderSource)
     */
    shaderSource(shader: WebGLShader, source: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFunc)
     */
    stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilFuncSeparate)
     */
    stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMask)
     */
    stencilMask(mask: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilMaskSeparate)
     */
    stencilMaskSeparate(face: GLenum, mask: GLuint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOp)
     */
    stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/stencilOpSeparate)
     */
    stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter)
     */
    texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texParameter)
     */
    texParameteri(target: GLenum, pname: GLenum, param: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform1i(location: WebGLUniformLocation | null, x: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform2f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform3f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform3i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform4f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform4i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint, w: GLint): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/useProgram)
     */
    useProgram(program: WebGLProgram | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/validateProgram)
     */
    validateProgram(program: WebGLProgram): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib1f(index: GLuint, x: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib1fv(index: GLuint, values: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib2fv(index: GLuint, values: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib3fv(index: GLuint, values: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttrib)
     */
    vertexAttrib4fv(index: GLuint, values: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/vertexAttribPointer)
     */
    vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/viewport)
     */
    viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
    /** Type: GLenum */
    readonly DEPTH_BUFFER_BIT: 0x00000100;
    /** Type: GLenum */
    readonly STENCIL_BUFFER_BIT: 0x00000400;
    /** Type: GLenum */
    readonly COLOR_BUFFER_BIT: 0x00004000;
    /** Type: GLenum */
    readonly POINTS: 0x0000;
    /** Type: GLenum */
    readonly LINES: 0x0001;
    /** Type: GLenum */
    readonly LINE_LOOP: 0x0002;
    /** Type: GLenum */
    readonly LINE_STRIP: 0x0003;
    /** Type: GLenum */
    readonly TRIANGLES: 0x0004;
    /** Type: GLenum */
    readonly TRIANGLE_STRIP: 0x0005;
    /** Type: GLenum */
    readonly TRIANGLE_FAN: 0x0006;
    /** Type: GLenum */
    readonly ZERO: 0;
    /** Type: GLenum */
    readonly ONE: 1;
    /** Type: GLenum */
    readonly SRC_COLOR: 0x0300;
    /** Type: GLenum */
    readonly ONE_MINUS_SRC_COLOR: 0x0301;
    /** Type: GLenum */
    readonly SRC_ALPHA: 0x0302;
    /** Type: GLenum */
    readonly ONE_MINUS_SRC_ALPHA: 0x0303;
    /** Type: GLenum */
    readonly DST_ALPHA: 0x0304;
    /** Type: GLenum */
    readonly ONE_MINUS_DST_ALPHA: 0x0305;
    /** Type: GLenum */
    readonly DST_COLOR: 0x0306;
    /** Type: GLenum */
    readonly ONE_MINUS_DST_COLOR: 0x0307;
    /** Type: GLenum */
    readonly SRC_ALPHA_SATURATE: 0x0308;
    /** Type: GLenum */
    readonly FUNC_ADD: 0x8006;
    /** Type: GLenum */
    readonly BLEND_EQUATION: 0x8009;
    /** Type: GLenum */
    readonly BLEND_EQUATION_RGB: 0x8009;
    /** Type: GLenum */
    readonly BLEND_EQUATION_ALPHA: 0x883D;
    /** Type: GLenum */
    readonly FUNC_SUBTRACT: 0x800A;
    /** Type: GLenum */
    readonly FUNC_REVERSE_SUBTRACT: 0x800B;
    /** Type: GLenum */
    readonly BLEND_DST_RGB: 0x80C8;
    /** Type: GLenum */
    readonly BLEND_SRC_RGB: 0x80C9;
    /** Type: GLenum */
    readonly BLEND_DST_ALPHA: 0x80CA;
    /** Type: GLenum */
    readonly BLEND_SRC_ALPHA: 0x80CB;
    /** Type: GLenum */
    readonly CONSTANT_COLOR: 0x8001;
    /** Type: GLenum */
    readonly ONE_MINUS_CONSTANT_COLOR: 0x8002;
    /** Type: GLenum */
    readonly CONSTANT_ALPHA: 0x8003;
    /** Type: GLenum */
    readonly ONE_MINUS_CONSTANT_ALPHA: 0x8004;
    /** Type: GLenum */
    readonly BLEND_COLOR: 0x8005;
    /** Type: GLenum */
    readonly ARRAY_BUFFER: 0x8892;
    /** Type: GLenum */
    readonly ELEMENT_ARRAY_BUFFER: 0x8893;
    /** Type: GLenum */
    readonly ARRAY_BUFFER_BINDING: 0x8894;
    /** Type: GLenum */
    readonly ELEMENT_ARRAY_BUFFER_BINDING: 0x8895;
    /** Type: GLenum */
    readonly STREAM_DRAW: 0x88E0;
    /** Type: GLenum */
    readonly STATIC_DRAW: 0x88E4;
    /** Type: GLenum */
    readonly DYNAMIC_DRAW: 0x88E8;
    /** Type: GLenum */
    readonly BUFFER_SIZE: 0x8764;
    /** Type: GLenum */
    readonly BUFFER_USAGE: 0x8765;
    /** Type: GLenum */
    readonly CURRENT_VERTEX_ATTRIB: 0x8626;
    /** Type: GLenum */
    readonly FRONT: 0x0404;
    /** Type: GLenum */
    readonly BACK: 0x0405;
    /** Type: GLenum */
    readonly FRONT_AND_BACK: 0x0408;
    /** Type: GLenum */
    readonly CULL_FACE: 0x0B44;
    /** Type: GLenum */
    readonly BLEND: 0x0BE2;
    /** Type: GLenum */
    readonly DITHER: 0x0BD0;
    /** Type: GLenum */
    readonly STENCIL_TEST: 0x0B90;
    /** Type: GLenum */
    readonly DEPTH_TEST: 0x0B71;
    /** Type: GLenum */
    readonly SCISSOR_TEST: 0x0C11;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_FILL: 0x8037;
    /** Type: GLenum */
    readonly SAMPLE_ALPHA_TO_COVERAGE: 0x809E;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE: 0x80A0;
    /** Type: GLenum */
    readonly NO_ERROR: 0;
    /** Type: GLenum */
    readonly INVALID_ENUM: 0x0500;
    /** Type: GLenum */
    readonly INVALID_VALUE: 0x0501;
    /** Type: GLenum */
    readonly INVALID_OPERATION: 0x0502;
    /** Type: GLenum */
    readonly OUT_OF_MEMORY: 0x0505;
    /** Type: GLenum */
    readonly CW: 0x0900;
    /** Type: GLenum */
    readonly CCW: 0x0901;
    /** Type: GLenum */
    readonly LINE_WIDTH: 0x0B21;
    /** Type: GLenum */
    readonly ALIASED_POINT_SIZE_RANGE: 0x846D;
    /** Type: GLenum */
    readonly ALIASED_LINE_WIDTH_RANGE: 0x846E;
    /** Type: GLenum */
    readonly CULL_FACE_MODE: 0x0B45;
    /** Type: GLenum */
    readonly FRONT_FACE: 0x0B46;
    /** Type: GLenum */
    readonly DEPTH_RANGE: 0x0B70;
    /** Type: GLenum */
    readonly DEPTH_WRITEMASK: 0x0B72;
    /** Type: GLenum */
    readonly DEPTH_CLEAR_VALUE: 0x0B73;
    /** Type: GLenum */
    readonly DEPTH_FUNC: 0x0B74;
    /** Type: GLenum */
    readonly STENCIL_CLEAR_VALUE: 0x0B91;
    /** Type: GLenum */
    readonly STENCIL_FUNC: 0x0B92;
    /** Type: GLenum */
    readonly STENCIL_FAIL: 0x0B94;
    /** Type: GLenum */
    readonly STENCIL_PASS_DEPTH_FAIL: 0x0B95;
    /** Type: GLenum */
    readonly STENCIL_PASS_DEPTH_PASS: 0x0B96;
    /** Type: GLenum */
    readonly STENCIL_REF: 0x0B97;
    /** Type: GLenum */
    readonly STENCIL_VALUE_MASK: 0x0B93;
    /** Type: GLenum */
    readonly STENCIL_WRITEMASK: 0x0B98;
    /** Type: GLenum */
    readonly STENCIL_BACK_FUNC: 0x8800;
    /** Type: GLenum */
    readonly STENCIL_BACK_FAIL: 0x8801;
    /** Type: GLenum */
    readonly STENCIL_BACK_PASS_DEPTH_FAIL: 0x8802;
    /** Type: GLenum */
    readonly STENCIL_BACK_PASS_DEPTH_PASS: 0x8803;
    /** Type: GLenum */
    readonly STENCIL_BACK_REF: 0x8CA3;
    /** Type: GLenum */
    readonly STENCIL_BACK_VALUE_MASK: 0x8CA4;
    /** Type: GLenum */
    readonly STENCIL_BACK_WRITEMASK: 0x8CA5;
    /** Type: undefined */
    readonly VIEWPORT: 0x0BA2;
    /** Type: GLenum */
    readonly SCISSOR_BOX: 0x0C10;
    /** Type: GLenum */
    readonly COLOR_CLEAR_VALUE: 0x0C22;
    /** Type: GLenum */
    readonly COLOR_WRITEMASK: 0x0C23;
    /** Type: GLenum */
    readonly UNPACK_ALIGNMENT: 0x0CF5;
    /** Type: GLenum */
    readonly PACK_ALIGNMENT: 0x0D05;
    /** Type: GLenum */
    readonly MAX_TEXTURE_SIZE: 0x0D33;
    /** Type: GLenum */
    readonly MAX_VIEWPORT_DIMS: 0x0D3A;
    /** Type: GLenum */
    readonly SUBPIXEL_BITS: 0x0D50;
    /** Type: GLenum */
    readonly RED_BITS: 0x0D52;
    /** Type: GLenum */
    readonly GREEN_BITS: 0x0D53;
    /** Type: GLenum */
    readonly BLUE_BITS: 0x0D54;
    /** Type: GLenum */
    readonly ALPHA_BITS: 0x0D55;
    /** Type: GLenum */
    readonly DEPTH_BITS: 0x0D56;
    /** Type: GLenum */
    readonly STENCIL_BITS: 0x0D57;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_UNITS: 0x2A00;
    /** Type: GLenum */
    readonly POLYGON_OFFSET_FACTOR: 0x8038;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_2D: 0x8069;
    /** Type: GLenum */
    readonly SAMPLE_BUFFERS: 0x80A8;
    /** Type: GLenum */
    readonly SAMPLES: 0x80A9;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE_VALUE: 0x80AA;
    /** Type: GLenum */
    readonly SAMPLE_COVERAGE_INVERT: 0x80AB;
    /** Type: GLenum */
    readonly COMPRESSED_TEXTURE_FORMATS: 0x86A3;
    /** Type: GLenum */
    readonly DONT_CARE: 0x1100;
    /** Type: GLenum */
    readonly FASTEST: 0x1101;
    /** Type: GLenum */
    readonly NICEST: 0x1102;
    /** Type: GLenum */
    readonly GENERATE_MIPMAP_HINT: 0x8192;
    /** Type: GLenum */
    readonly BYTE: 0x1400;
    /** Type: GLenum */
    readonly UNSIGNED_BYTE: 0x1401;
    /** Type: GLenum */
    readonly SHORT: 0x1402;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT: 0x1403;
    /** Type: GLenum */
    readonly INT: 0x1404;
    /** Type: GLenum */
    readonly UNSIGNED_INT: 0x1405;
    /** Type: GLenum */
    readonly FLOAT: 0x1406;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT: 0x1902;
    /** Type: GLenum */
    readonly ALPHA: 0x1906;
    /** Type: GLenum */
    readonly RGB: 0x1907;
    /** Type: GLenum */
    readonly RGBA: 0x1908;
    /** Type: GLenum */
    readonly LUMINANCE: 0x1909;
    /** Type: GLenum */
    readonly LUMINANCE_ALPHA: 0x190A;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_4_4_4_4: 0x8033;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_5_5_5_1: 0x8034;
    /** Type: GLenum */
    readonly UNSIGNED_SHORT_5_6_5: 0x8363;
    /** Type: GLenum */
    readonly FRAGMENT_SHADER: 0x8B30;
    /** Type: GLenum */
    readonly VERTEX_SHADER: 0x8B31;
    /** Type: GLenum */
    readonly MAX_VERTEX_ATTRIBS: 0x8869;
    /** Type: GLenum */
    readonly MAX_VERTEX_UNIFORM_VECTORS: 0x8DFB;
    /** Type: GLenum */
    readonly MAX_VARYING_VECTORS: 0x8DFC;
    /** Type: GLenum */
    readonly MAX_COMBINED_TEXTURE_IMAGE_UNITS: 0x8B4D;
    /** Type: GLenum */
    readonly MAX_VERTEX_TEXTURE_IMAGE_UNITS: 0x8B4C;
    /** Type: GLenum */
    readonly MAX_TEXTURE_IMAGE_UNITS: 0x8872;
    /** Type: GLenum */
    readonly MAX_FRAGMENT_UNIFORM_VECTORS: 0x8DFD;
    /** Type: GLenum */
    readonly SHADER_TYPE: 0x8B4F;
    /** Type: GLenum */
    readonly DELETE_STATUS: 0x8B80;
    /** Type: GLenum */
    readonly LINK_STATUS: 0x8B82;
    /** Type: GLenum */
    readonly VALIDATE_STATUS: 0x8B83;
    /** Type: GLenum */
    readonly ATTACHED_SHADERS: 0x8B85;
    /** Type: GLenum */
    readonly ACTIVE_UNIFORMS: 0x8B86;
    /** Type: GLenum */
    readonly ACTIVE_ATTRIBUTES: 0x8B89;
    /** Type: GLenum */
    readonly SHADING_LANGUAGE_VERSION: 0x8B8C;
    /** Type: GLenum */
    readonly CURRENT_PROGRAM: 0x8B8D;
    /** Type: GLenum */
    readonly NEVER: 0x0200;
    /** Type: GLenum */
    readonly LESS: 0x0201;
    /** Type: GLenum */
    readonly EQUAL: 0x0202;
    /** Type: GLenum */
    readonly LEQUAL: 0x0203;
    /** Type: GLenum */
    readonly GREATER: 0x0204;
    /** Type: GLenum */
    readonly NOTEQUAL: 0x0205;
    /** Type: GLenum */
    readonly GEQUAL: 0x0206;
    /** Type: GLenum */
    readonly ALWAYS: 0x0207;
    /** Type: GLenum */
    readonly KEEP: 0x1E00;
    /** Type: GLenum */
    readonly REPLACE: 0x1E01;
    /** Type: GLenum */
    readonly INCR: 0x1E02;
    /** Type: GLenum */
    readonly DECR: 0x1E03;
    /** Type: GLenum */
    readonly INVERT: 0x150A;
    /** Type: GLenum */
    readonly INCR_WRAP: 0x8507;
    /** Type: GLenum */
    readonly DECR_WRAP: 0x8508;
    /** Type: GLenum */
    readonly VENDOR: 0x1F00;
    /** Type: GLenum */
    readonly RENDERER: 0x1F01;
    /** Type: GLenum */
    readonly VERSION: 0x1F02;
    /** Type: GLenum */
    readonly NEAREST: 0x2600;
    /** Type: GLenum */
    readonly LINEAR: 0x2601;
    /** Type: GLenum */
    readonly NEAREST_MIPMAP_NEAREST: 0x2700;
    /** Type: GLenum */
    readonly LINEAR_MIPMAP_NEAREST: 0x2701;
    /** Type: GLenum */
    readonly NEAREST_MIPMAP_LINEAR: 0x2702;
    /** Type: GLenum */
    readonly LINEAR_MIPMAP_LINEAR: 0x2703;
    /** Type: GLenum */
    readonly TEXTURE_MAG_FILTER: 0x2800;
    /** Type: GLenum */
    readonly TEXTURE_MIN_FILTER: 0x2801;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_S: 0x2802;
    /** Type: GLenum */
    readonly TEXTURE_WRAP_T: 0x2803;
    /** Type: GLenum */
    readonly TEXTURE_2D: 0x0DE1;
    /** Type: GLenum */
    readonly TEXTURE: 0x1702;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP: 0x8513;
    /** Type: GLenum */
    readonly TEXTURE_BINDING_CUBE_MAP: 0x8514;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_X: 0x8515;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_X: 0x8516;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_Y: 0x8517;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Y: 0x8518;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_POSITIVE_Z: 0x8519;
    /** Type: GLenum */
    readonly TEXTURE_CUBE_MAP_NEGATIVE_Z: 0x851A;
    /** Type: GLenum */
    readonly MAX_CUBE_MAP_TEXTURE_SIZE: 0x851C;
    /** Type: GLenum */
    readonly TEXTURE0: 0x84C0;
    /** Type: GLenum */
    readonly TEXTURE1: 0x84C1;
    /** Type: GLenum */
    readonly TEXTURE2: 0x84C2;
    /** Type: GLenum */
    readonly TEXTURE3: 0x84C3;
    /** Type: GLenum */
    readonly TEXTURE4: 0x84C4;
    /** Type: GLenum */
    readonly TEXTURE5: 0x84C5;
    /** Type: GLenum */
    readonly TEXTURE6: 0x84C6;
    /** Type: GLenum */
    readonly TEXTURE7: 0x84C7;
    /** Type: GLenum */
    readonly TEXTURE8: 0x84C8;
    /** Type: GLenum */
    readonly TEXTURE9: 0x84C9;
    /** Type: GLenum */
    readonly TEXTURE10: 0x84CA;
    /** Type: GLenum */
    readonly TEXTURE11: 0x84CB;
    /** Type: GLenum */
    readonly TEXTURE12: 0x84CC;
    /** Type: GLenum */
    readonly TEXTURE13: 0x84CD;
    /** Type: GLenum */
    readonly TEXTURE14: 0x84CE;
    /** Type: GLenum */
    readonly TEXTURE15: 0x84CF;
    /** Type: GLenum */
    readonly TEXTURE16: 0x84D0;
    /** Type: GLenum */
    readonly TEXTURE17: 0x84D1;
    /** Type: GLenum */
    readonly TEXTURE18: 0x84D2;
    /** Type: GLenum */
    readonly TEXTURE19: 0x84D3;
    /** Type: GLenum */
    readonly TEXTURE20: 0x84D4;
    /** Type: GLenum */
    readonly TEXTURE21: 0x84D5;
    /** Type: GLenum */
    readonly TEXTURE22: 0x84D6;
    /** Type: GLenum */
    readonly TEXTURE23: 0x84D7;
    /** Type: GLenum */
    readonly TEXTURE24: 0x84D8;
    /** Type: GLenum */
    readonly TEXTURE25: 0x84D9;
    /** Type: GLenum */
    readonly TEXTURE26: 0x84DA;
    /** Type: GLenum */
    readonly TEXTURE27: 0x84DB;
    /** Type: GLenum */
    readonly TEXTURE28: 0x84DC;
    /** Type: GLenum */
    readonly TEXTURE29: 0x84DD;
    /** Type: GLenum */
    readonly TEXTURE30: 0x84DE;
    /** Type: GLenum */
    readonly TEXTURE31: 0x84DF;
    /** Type: GLenum */
    readonly ACTIVE_TEXTURE: 0x84E0;
    /** Type: GLenum */
    readonly REPEAT: 0x2901;
    /** Type: GLenum */
    readonly CLAMP_TO_EDGE: 0x812F;
    /** Type: GLenum */
    readonly MIRRORED_REPEAT: 0x8370;
    /** Type: GLenum */
    readonly FLOAT_VEC2: 0x8B50;
    /** Type: GLenum */
    readonly FLOAT_VEC3: 0x8B51;
    /** Type: GLenum */
    readonly FLOAT_VEC4: 0x8B52;
    /** Type: GLenum */
    readonly INT_VEC2: 0x8B53;
    /** Type: GLenum */
    readonly INT_VEC3: 0x8B54;
    /** Type: GLenum */
    readonly INT_VEC4: 0x8B55;
    /** Type: GLenum */
    readonly BOOL: 0x8B56;
    /** Type: GLenum */
    readonly BOOL_VEC2: 0x8B57;
    /** Type: GLenum */
    readonly BOOL_VEC3: 0x8B58;
    /** Type: GLenum */
    readonly BOOL_VEC4: 0x8B59;
    /** Type: GLenum */
    readonly FLOAT_MAT2: 0x8B5A;
    /** Type: GLenum */
    readonly FLOAT_MAT3: 0x8B5B;
    /** Type: GLenum */
    readonly FLOAT_MAT4: 0x8B5C;
    /** Type: GLenum */
    readonly SAMPLER_2D: 0x8B5E;
    /** Type: GLenum */
    readonly SAMPLER_CUBE: 0x8B60;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_ENABLED: 0x8622;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_SIZE: 0x8623;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_STRIDE: 0x8624;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_TYPE: 0x8625;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_NORMALIZED: 0x886A;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_POINTER: 0x8645;
    /** Type: GLenum */
    readonly VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: 0x889F;
    /** Type: GLenum */
    readonly IMPLEMENTATION_COLOR_READ_TYPE: 0x8B9A;
    /** Type: GLenum */
    readonly IMPLEMENTATION_COLOR_READ_FORMAT: 0x8B9B;
    /** Type: GLenum */
    readonly COMPILE_STATUS: 0x8B81;
    /** Type: GLenum */
    readonly LOW_FLOAT: 0x8DF0;
    /** Type: GLenum */
    readonly MEDIUM_FLOAT: 0x8DF1;
    /** Type: GLenum */
    readonly HIGH_FLOAT: 0x8DF2;
    /** Type: GLenum */
    readonly LOW_INT: 0x8DF3;
    /** Type: GLenum */
    readonly MEDIUM_INT: 0x8DF4;
    /** Type: GLenum */
    readonly HIGH_INT: 0x8DF5;
    /** Type: GLenum */
    readonly FRAMEBUFFER: 0x8D40;
    /** Type: GLenum */
    readonly RENDERBUFFER: 0x8D41;
    /** Type: GLenum */
    readonly RGBA4: 0x8056;
    /** Type: GLenum */
    readonly RGB5_A1: 0x8057;
    /** Type: GLenum */
    readonly RGBA8: 0x8058;
    /** Type: GLenum */
    readonly RGB565: 0x8D62;
    /** Type: GLenum */
    readonly DEPTH_COMPONENT16: 0x81A5;
    /** Type: GLenum */
    readonly STENCIL_INDEX8: 0x8D48;
    /** Type: GLenum */
    readonly DEPTH_STENCIL: 0x84F9;
    /** Type: GLenum */
    readonly RENDERBUFFER_WIDTH: 0x8D42;
    /** Type: GLenum */
    readonly RENDERBUFFER_HEIGHT: 0x8D43;
    /** Type: GLenum */
    readonly RENDERBUFFER_INTERNAL_FORMAT: 0x8D44;
    /** Type: GLenum */
    readonly RENDERBUFFER_RED_SIZE: 0x8D50;
    /** Type: GLenum */
    readonly RENDERBUFFER_GREEN_SIZE: 0x8D51;
    /** Type: GLenum */
    readonly RENDERBUFFER_BLUE_SIZE: 0x8D52;
    /** Type: GLenum */
    readonly RENDERBUFFER_ALPHA_SIZE: 0x8D53;
    /** Type: GLenum */
    readonly RENDERBUFFER_DEPTH_SIZE: 0x8D54;
    /** Type: GLenum */
    readonly RENDERBUFFER_STENCIL_SIZE: 0x8D55;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: 0x8CD0;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: 0x8CD1;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: 0x8CD2;
    /** Type: GLenum */
    readonly FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: 0x8CD3;
    /** Type: GLenum */
    readonly COLOR_ATTACHMENT0: 0x8CE0;
    /** Type: GLenum */
    readonly DEPTH_ATTACHMENT: 0x8D00;
    /** Type: GLenum */
    readonly STENCIL_ATTACHMENT: 0x8D20;
    /** Type: GLenum */
    readonly DEPTH_STENCIL_ATTACHMENT: 0x821A;
    /** Type: GLenum */
    readonly NONE: 0;
    /** Type: GLenum */
    readonly FRAMEBUFFER_COMPLETE: 0x8CD5;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_ATTACHMENT: 0x8CD6;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: 0x8CD7;
    /** Type: GLenum */
    readonly FRAMEBUFFER_INCOMPLETE_DIMENSIONS: 0x8CD9;
    /** Type: GLenum */
    readonly FRAMEBUFFER_UNSUPPORTED: 0x8CDD;
    /** Type: GLenum */
    readonly FRAMEBUFFER_BINDING: 0x8CA6;
    /** Type: GLenum */
    readonly RENDERBUFFER_BINDING: 0x8CA7;
    /** Type: GLenum */
    readonly MAX_RENDERBUFFER_SIZE: 0x84E8;
    /** Type: GLenum */
    readonly INVALID_FRAMEBUFFER_OPERATION: 0x0506;
    /** Type: GLenum */
    readonly UNPACK_FLIP_Y_WEBGL: 0x9240;
    /** Type: GLenum */
    readonly UNPACK_PREMULTIPLY_ALPHA_WEBGL: 0x9241;
    /** Type: GLenum */
    readonly CONTEXT_LOST_WEBGL: 0x9242;
    /** Type: GLenum */
    readonly UNPACK_COLORSPACE_CONVERSION_WEBGL: 0x9243;
    /** Type: GLenum */
    readonly BROWSER_DEFAULT_WEBGL: 0x9244;
}

interface WebGLRenderingContextOverloads {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferData)
     */
    bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;
    bufferData(target: GLenum, data: AllowSharedBufferSource | null, usage: GLenum): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/bufferSubData)
     */
    bufferSubData(target: GLenum, offset: GLintptr, data: AllowSharedBufferSource): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexImage2D)
     */
    compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, data: ArrayBufferView<ArrayBufferLike>): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/compressedTexSubImage2D)
     */
    compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, data: ArrayBufferView<ArrayBufferLike>): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/readPixels)
     */
    readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView<ArrayBufferLike> | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texImage2D)
     */
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView<ArrayBufferLike> | null): void;
    texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/texSubImage2D)
     */
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView<ArrayBufferLike> | null): void;
    texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform1fv(location: WebGLUniformLocation | null, v: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform1iv(location: WebGLUniformLocation | null, v: Int32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform2fv(location: WebGLUniformLocation | null, v: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform2iv(location: WebGLUniformLocation | null, v: Int32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform3fv(location: WebGLUniformLocation | null, v: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform3iv(location: WebGLUniformLocation | null, v: Int32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform4fv(location: WebGLUniformLocation | null, v: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniform)
     */
    uniform4iv(location: WebGLUniformLocation | null, v: Int32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
     */
    uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
     */
    uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLRenderingContext/uniformMatrix)
     */
    uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, value: Float32List): void;
}

/**
 * The **`WebGLSampler`** interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSampler)
 */
interface WebGLSampler {
}

declare var WebGLSampler: {
    prototype: WebGLSampler;
    new(): WebGLSampler;
};

/**
 * The **WebGLShader** is part of the WebGL API and can either be a vertex or a fragment shader.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShader)
 */
interface WebGLShader {
}

declare var WebGLShader: {
    prototype: WebGLShader;
    new(): WebGLShader;
};

/**
 * The **WebGLShaderPrecisionFormat** interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat)
 */
interface WebGLShaderPrecisionFormat {
    /**
     * Type: GLint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/precision)
     */
    readonly precision: GLint;
    /**
     * Type: GLint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMax)
     */
    readonly rangeMax: GLint;
    /**
     * Type: GLint
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLShaderPrecisionFormat/rangeMin)
     */
    readonly rangeMin: GLint;
}

declare var WebGLShaderPrecisionFormat: {
    prototype: WebGLShaderPrecisionFormat;
    new(): WebGLShaderPrecisionFormat;
};

/**
 * The **`WebGLSync`** interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLSync)
 */
interface WebGLSync {
}

declare var WebGLSync: {
    prototype: WebGLSync;
    new(): WebGLSync;
};

/**
 * The **WebGLTexture** interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTexture)
 */
interface WebGLTexture {
}

declare var WebGLTexture: {
    prototype: WebGLTexture;
    new(): WebGLTexture;
};

/**
 * The **`WebGLTransformFeedback`** interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLTransformFeedback)
 */
interface WebGLTransformFeedback {
}

declare var WebGLTransformFeedback: {
    prototype: WebGLTransformFeedback;
    new(): WebGLTransformFeedback;
};

/**
 * The **WebGLUniformLocation** interface is part of the WebGL API and represents the location of a uniform variable in a shader program.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLUniformLocation)
 */
interface WebGLUniformLocation {
}

declare var WebGLUniformLocation: {
    prototype: WebGLUniformLocation;
    new(): WebGLUniformLocation;
};

/**
 * The **`WebGLVertexArrayObject`** interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject)
 */
interface WebGLVertexArrayObject {
}

declare var WebGLVertexArrayObject: {
    prototype: WebGLVertexArrayObject;
    new(): WebGLVertexArrayObject;
};

/** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebGLVertexArrayObject) */
interface WebGLVertexArrayObjectOES {
}

interface WebSocketEventMap {
    "close": CloseEvent;
    "error": Event;
    "message": MessageEvent;
    "open": Event;
}

/**
 * The `WebSocket` object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket)
 */
interface WebSocket extends EventTarget {
    /**
     * Type: BinaryType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/binaryType)
     */
    binaryType: BinaryType;
    /**
     * Type: unsigned long long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/bufferedAmount)
     */
    readonly bufferedAmount: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/extensions)
     */
    readonly extensions: string;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close_event)
     */
    onclose: ((this: WebSocket, ev: CloseEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/error_event)
     */
    onerror: ((this: WebSocket, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/message_event)
     */
    onmessage: ((this: WebSocket, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/open_event)
     */
    onopen: ((this: WebSocket, ev: Event) => any) | null;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/protocol)
     */
    readonly protocol: string;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/readyState)
     */
    readonly readyState: number;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/url)
     */
    readonly url: string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/close)
     */
    close(code?: number, reason?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebSocket/send)
     */
    send(data: string | ArrayBufferLike | Blob | ArrayBufferView): void;
    /** Type: unsigned short */
    readonly CONNECTING: 0;
    /** Type: unsigned short */
    readonly OPEN: 1;
    /** Type: unsigned short */
    readonly CLOSING: 2;
    /** Type: unsigned short */
    readonly CLOSED: 3;
    addEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof WebSocketEventMap>(type: K, listener: (this: WebSocket, ev: WebSocketEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var WebSocket: {
    prototype: WebSocket;
    new(url: string | URL, protocols?: string | string[]): WebSocket;
    /** Type: unsigned short */
    readonly CONNECTING: 0;
    /** Type: unsigned short */
    readonly OPEN: 1;
    /** Type: unsigned short */
    readonly CLOSING: 2;
    /** Type: unsigned short */
    readonly CLOSED: 3;
};

/**
 * The **`WebTransport`** interface of the WebTransport API provides functionality to enable a user agent to connect to an HTTP/3 server, initiate reliable and unreliable transport in either or both directions, and close the connection once it is no longer needed.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport)
 */
interface WebTransport {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/closed)
     */
    readonly closed: Promise<WebTransportCloseInfo>;
    /**
     * Type: WebTransportDatagramDuplexStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/datagrams)
     */
    readonly datagrams: WebTransportDatagramDuplexStream;
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingBidirectionalStreams)
     */
    readonly incomingBidirectionalStreams: ReadableStream;
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/incomingUnidirectionalStreams)
     */
    readonly incomingUnidirectionalStreams: ReadableStream;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/ready)
     */
    readonly ready: Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/close)
     */
    close(closeInfo?: WebTransportCloseInfo): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/createBidirectionalStream)
     */
    createBidirectionalStream(options?: WebTransportSendStreamOptions): Promise<WebTransportBidirectionalStream>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransport/createUnidirectionalStream)
     */
    createUnidirectionalStream(options?: WebTransportSendStreamOptions): Promise<WritableStream>;
}

declare var WebTransport: {
    prototype: WebTransport;
    new(url: string | URL, options?: WebTransportOptions): WebTransport;
};

/**
 * The **`WebTransportBidirectionalStream`** interface of the WebTransport API represents a bidirectional stream created by a server or a client that can be used for reliable transport.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream)
 */
interface WebTransportBidirectionalStream {
    /**
     * Type: WebTransportReceiveStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/readable)
     */
    readonly readable: ReadableStream;
    /**
     * Type: WebTransportSendStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportBidirectionalStream/writable)
     */
    readonly writable: WritableStream;
}

declare var WebTransportBidirectionalStream: {
    prototype: WebTransportBidirectionalStream;
    new(): WebTransportBidirectionalStream;
};

/**
 * The **`WebTransportDatagramDuplexStream`** interface of the WebTransport API represents a duplex stream that can be used for unreliable transport of datagrams between client and server.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream)
 */
interface WebTransportDatagramDuplexStream {
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingHighWaterMark)
     */
    incomingHighWaterMark: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/incomingMaxAge)
     */
    incomingMaxAge: number | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/maxDatagramSize)
     */
    readonly maxDatagramSize: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingHighWaterMark)
     */
    outgoingHighWaterMark: number;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/outgoingMaxAge)
     */
    outgoingMaxAge: number | null;
    /**
     * Type: ReadableStream
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/readable)
     */
    readonly readable: ReadableStream;
    /** [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportDatagramDuplexStream/writable) */
    readonly writable: WritableStream;
}

declare var WebTransportDatagramDuplexStream: {
    prototype: WebTransportDatagramDuplexStream;
    new(): WebTransportDatagramDuplexStream;
};

/**
 * The **`WebTransportError`** interface of the WebTransport API represents an error related to the API, which can arise from server errors, network connection problems, or client-initiated abort operations (for example, arising from a WritableStream.abort() call).
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError)
 */
interface WebTransportError extends DOMException {
    /**
     * Type: WebTransportErrorSource
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/source)
     */
    readonly source: WebTransportErrorSource;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WebTransportError/streamErrorCode)
     */
    readonly streamErrorCode: number | null;
}

declare var WebTransportError: {
    prototype: WebTransportError;
    new(message?: string, options?: WebTransportErrorOptions): WebTransportError;
};

/**
 * The **`WheelEvent`** interface represents events that occur due to the user moving a mouse wheel or similar input device.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent)
 */
interface WheelEvent extends MouseEvent {
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaMode)
     */
    readonly deltaMode: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaX)
     */
    readonly deltaX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaY)
     */
    readonly deltaY: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WheelEvent/deltaZ)
     */
    readonly deltaZ: number;
    /** Type: unsigned long */
    readonly DOM_DELTA_PIXEL: 0x00;
    /** Type: unsigned long */
    readonly DOM_DELTA_LINE: 0x01;
    /** Type: unsigned long */
    readonly DOM_DELTA_PAGE: 0x02;
}

declare var WheelEvent: {
    prototype: WheelEvent;
    new(type: string, eventInitDict?: WheelEventInit): WheelEvent;
    /** Type: unsigned long */
    readonly DOM_DELTA_PIXEL: 0x00;
    /** Type: unsigned long */
    readonly DOM_DELTA_LINE: 0x01;
    /** Type: unsigned long */
    readonly DOM_DELTA_PAGE: 0x02;
};

interface WindowEventMap extends GlobalEventHandlersEventMap, WindowEventHandlersEventMap {
    "DOMContentLoaded": Event;
    "devicemotion": DeviceMotionEvent;
    "deviceorientation": DeviceOrientationEvent;
    "deviceorientationabsolute": DeviceOrientationEvent;
    "gamepadconnected": GamepadEvent;
    "gamepaddisconnected": GamepadEvent;
    "orientationchange": Event;
}

/**
 * The **`Window`** interface represents a window containing a DOM document; the `document` property points to the DOM document loaded in that window.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window)
 */
interface Window extends EventTarget, AnimationFrameProvider, GlobalEventHandlers, WindowEventHandlers, WindowLocalStorage, WindowOrWorkerGlobalScope, WindowSessionStorage {
    /**
     * Type: Navigator
     * @deprecated This is a legacy alias of `navigator`.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
     */
    readonly clientInformation: Navigator;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)
     */
    readonly closed: boolean;
    /**
     * Type: CookieStore
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cookieStore)
     */
    readonly cookieStore: CookieStore;
    /**
     * Type: CustomElementRegistry
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
     */
    readonly customElements: CustomElementRegistry;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)
     */
    readonly devicePixelRatio: number;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)
     */
    readonly document: Document;
    /**
     * Type: [object Object],[object Object]
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)
     */
    readonly event: Event | undefined;
    /**
     * Type: External
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/external)
     */
    readonly external: External;
    /**
     * Type: Element
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)
     */
    readonly frameElement: Element | null;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames)
     */
    readonly frames: WindowProxy;
    /**
     * Type: History
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history)
     */
    readonly history: History;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)
     */
    readonly innerHeight: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth)
     */
    readonly innerWidth: number;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length)
     */
    readonly length: number;
    /**
     * Type: Location
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/location)
     */
    get location(): Location;
    set location(href: string);
    /**
     * Type: BarProp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
     */
    readonly locationbar: BarProp;
    /**
     * Type: BarProp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
     */
    readonly menubar: BarProp;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name)
     */
    name: string;
    /**
     * Type: Navigator
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
     */
    readonly navigator: Navigator;
    /**
     * Type: EventHandler
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
     */
    ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;
    /**
     * Type: EventHandler
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
     */
    ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
    /**
     * Type: EventHandler
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
     */
    ondeviceorientationabsolute: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)
     */
    onorientationchange: ((this: Window, ev: Event) => any) | null;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener)
     */
    opener: any;
    /**
     * Type: short
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientation)
     */
    readonly orientation: number;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/originAgentCluster)
     */
    readonly originAgentCluster: boolean;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)
     */
    readonly outerHeight: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth)
     */
    readonly outerWidth: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
     */
    readonly pageXOffset: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
     */
    readonly pageYOffset: number;
    /**
     * Refers to either the parent WindowProxy, or itself.
     *
     * It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)
     */
    readonly parent: WindowProxy;
    /**
     * Type: BarProp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
     */
    readonly personalbar: BarProp;
    /**
     * Type: Screen
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen)
     */
    readonly screen: Screen;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft)
     */
    readonly screenLeft: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop)
     */
    readonly screenTop: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX)
     */
    readonly screenX: number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY)
     */
    readonly screenY: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
     */
    readonly scrollX: number;
    /**
     * Type: double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
     */
    readonly scrollY: number;
    /**
     * Type: BarProp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
     */
    readonly scrollbars: BarProp;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self)
     */
    readonly self: Window & typeof globalThis;
    /**
     * Type: SpeechSynthesis
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)
     */
    readonly speechSynthesis: SpeechSynthesis;
    /**
     * Type: DOMString
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/status)
     */
    status: string;
    /**
     * Type: BarProp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
     */
    readonly statusbar: BarProp;
    /**
     * Type: BarProp
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
     */
    readonly toolbar: BarProp;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top)
     */
    readonly top: WindowProxy | null;
    /**
     * Type: VisualViewport
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)
     */
    readonly visualViewport: VisualViewport | null;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)
     */
    readonly window: Window & typeof globalThis;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/alert)
     */
    alert(message?: any): void;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/blur)
     */
    blur(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback)
     */
    cancelIdleCallback(handle: number): void;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/captureEvents)
     */
    captureEvents(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/close)
     */
    close(): void;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/confirm)
     */
    confirm(message?: string): boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/focus)
     */
    focus(): void;
    /**
     * Type: CSSStyleDeclaration
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle)
     */
    getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;
    /**
     * Type: Selection
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getSelection)
     */
    getSelection(): Selection | null;
    /**
     * Type: MediaQueryList
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/matchMedia)
     */
    matchMedia(query: string): MediaQueryList;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveBy)
     */
    moveBy(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveTo)
     */
    moveTo(x: number, y: number): void;
    /**
     * Type: WindowProxy
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/open)
     */
    open(url?: string | URL, target?: string, features?: string): WindowProxy | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
     */
    postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;
    postMessage(message: any, options?: WindowPostMessageOptions): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/print)
     */
    print(): void;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/prompt)
     */
    prompt(message?: string, _default?: string): string | null;
    /**
     * Type: undefined
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/releaseEvents)
     */
    releaseEvents(): void;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
     */
    requestIdleCallback(callback: IdleRequestCallback, options?: IdleRequestOptions): number;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeBy)
     */
    resizeBy(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeTo)
     */
    resizeTo(width: number, height: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scroll)
     */
    scroll(options?: ScrollToOptions): void;
    scroll(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollBy)
     */
    scrollBy(options?: ScrollToOptions): void;
    scrollBy(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollTo)
     */
    scrollTo(options?: ScrollToOptions): void;
    scrollTo(x: number, y: number): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/stop)
     */
    stop(): void;
    addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    [index: number]: Window;
}

declare var Window: {
    prototype: Window;
    new(): Window;
};

interface WindowEventHandlersEventMap {
    "afterprint": Event;
    "beforeprint": Event;
    "beforeunload": BeforeUnloadEvent;
    "gamepadconnected": GamepadEvent;
    "gamepaddisconnected": GamepadEvent;
    "hashchange": HashChangeEvent;
    "languagechange": Event;
    "message": MessageEvent;
    "messageerror": MessageEvent;
    "offline": Event;
    "online": Event;
    "pagehide": PageTransitionEvent;
    "pagereveal": PageRevealEvent;
    "pageshow": PageTransitionEvent;
    "pageswap": PageSwapEvent;
    "popstate": PopStateEvent;
    "rejectionhandled": PromiseRejectionEvent;
    "storage": StorageEvent;
    "unhandledrejection": PromiseRejectionEvent;
    "unload": Event;
}

interface WindowEventHandlers {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)
     */
    onafterprint: ((this: WindowEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)
     */
    onbeforeprint: ((this: WindowEventHandlers, ev: Event) => any) | null;
    /**
     * Type: OnBeforeUnloadEventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)
     */
    onbeforeunload: ((this: WindowEventHandlers, ev: BeforeUnloadEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)
     */
    ongamepadconnected: ((this: WindowEventHandlers, ev: GamepadEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)
     */
    ongamepaddisconnected: ((this: WindowEventHandlers, ev: GamepadEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)
     */
    onhashchange: ((this: WindowEventHandlers, ev: HashChangeEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
     */
    onlanguagechange: ((this: WindowEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)
     */
    onmessage: ((this: WindowEventHandlers, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
     */
    onmessageerror: ((this: WindowEventHandlers, ev: MessageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
     */
    onoffline: ((this: WindowEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)
     */
    ononline: ((this: WindowEventHandlers, ev: Event) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)
     */
    onpagehide: ((this: WindowEventHandlers, ev: PageTransitionEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagereveal_event)
     */
    onpagereveal: ((this: WindowEventHandlers, ev: PageRevealEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)
     */
    onpageshow: ((this: WindowEventHandlers, ev: PageTransitionEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageswap_event)
     */
    onpageswap: ((this: WindowEventHandlers, ev: PageSwapEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)
     */
    onpopstate: ((this: WindowEventHandlers, ev: PopStateEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)
     */
    onrejectionhandled: ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)
     */
    onstorage: ((this: WindowEventHandlers, ev: StorageEvent) => any) | null;
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)
     */
    onunhandledrejection: ((this: WindowEventHandlers, ev: PromiseRejectionEvent) => any) | null;
    /**
     * Type: EventHandler
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)
     */
    onunload: ((this: WindowEventHandlers, ev: Event) => any) | null;
    addEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: WindowEventHandlers, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof WindowEventHandlersEventMap>(type: K, listener: (this: WindowEventHandlers, ev: WindowEventHandlersEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

interface WindowLocalStorage {
    /**
     * Type: Storage
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)
     */
    readonly localStorage: Storage;
}

interface WindowOrWorkerGlobalScope {
    /**
     * Type: CacheStorage
     * Available only in secure contexts.
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/caches)
     */
    readonly caches: CacheStorage;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crossOriginIsolated)
     */
    readonly crossOriginIsolated: boolean;
    /**
     * Type: Crypto
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crypto)
     */
    readonly crypto: Crypto;
    /**
     * Type: IDBFactory
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/indexedDB)
     */
    readonly indexedDB: IDBFactory;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/isSecureContext)
     */
    readonly isSecureContext: boolean;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/origin)
     */
    readonly origin: string;
    /**
     * Type: Performance
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/performance)
     */
    readonly performance: Performance;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/atob)
     */
    atob(data: string): string;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/btoa)
     */
    btoa(data: string): string;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/clearInterval)
     */
    clearInterval(id: number | undefined): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/clearTimeout)
     */
    clearTimeout(id: number | undefined): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/createImageBitmap)
     */
    createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;
    createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/fetch)
     */
    fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/queueMicrotask)
     */
    queueMicrotask(callback: VoidFunction): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/reportError)
     */
    reportError(e: any): void;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/setInterval)
     */
    setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
    /**
     * Type: long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/setTimeout)
     */
    setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/structuredClone)
     */
    structuredClone<T = any>(value: T, options?: StructuredSerializeOptions): T;
}

interface WindowSessionStorage {
    /**
     * Type: Storage
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)
     */
    readonly sessionStorage: Storage;
}

interface WorkerEventMap extends AbstractWorkerEventMap, MessageEventTargetEventMap {
}

/**
 * The **`Worker`** interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker)
 */
interface Worker extends EventTarget, AbstractWorker, MessageEventTarget<Worker> {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/postMessage)
     */
    postMessage(message: any, transfer: Transferable[]): void;
    postMessage(message: any, options?: StructuredSerializeOptions): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worker/terminate)
     */
    terminate(): void;
    addEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof WorkerEventMap>(type: K, listener: (this: Worker, ev: WorkerEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var Worker: {
    prototype: Worker;
    new(scriptURL: string | URL, options?: WorkerOptions): Worker;
};

/**
 * The **`Worklet`** interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline.
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet)
 */
interface Worklet {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Worklet/addModule)
     */
    addModule(moduleURL: string | URL, options?: WorkletOptions): Promise<void>;
}

declare var Worklet: {
    prototype: Worklet;
    new(): Worklet;
};

/**
 * The **`WritableStream`** interface of the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream)
 */
interface WritableStream<W = any> {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/locked)
     */
    readonly locked: boolean;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/abort)
     */
    abort(reason?: any): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/close)
     */
    close(): Promise<void>;
    /**
     * Type: WritableStreamDefaultWriter
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStream/getWriter)
     */
    getWriter(): WritableStreamDefaultWriter<W>;
}

declare var WritableStream: {
    prototype: WritableStream;
    new<W = any>(underlyingSink?: UnderlyingSink<W>, strategy?: QueuingStrategy<W>): WritableStream<W>;
};

/**
 * The **`WritableStreamDefaultController`** interface of the Streams API represents a controller allowing control of a WritableStream's state.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController)
 */
interface WritableStreamDefaultController {
    /**
     * Type: AbortSignal
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/signal)
     */
    readonly signal: AbortSignal;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultController/error)
     */
    error(e?: any): void;
}

declare var WritableStreamDefaultController: {
    prototype: WritableStreamDefaultController;
    new(): WritableStreamDefaultController;
};

/**
 * The **`WritableStreamDefaultWriter`** interface of the Streams API is the object returned by WritableStream.getWriter() and once created locks the writer to the `WritableStream` ensuring that no other streams can write to the underlying sink.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter)
 */
interface WritableStreamDefaultWriter<W = any> {
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/closed)
     */
    readonly closed: Promise<void>;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/desiredSize)
     */
    readonly desiredSize: number | null;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/ready)
     */
    readonly ready: Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/abort)
     */
    abort(reason?: any): Promise<void>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/close)
     */
    close(): Promise<void>;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/releaseLock)
     */
    releaseLock(): void;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/WritableStreamDefaultWriter/write)
     */
    write(chunk?: W): Promise<void>;
}

declare var WritableStreamDefaultWriter: {
    prototype: WritableStreamDefaultWriter;
    new<W = any>(stream: WritableStream<W>): WritableStreamDefaultWriter<W>;
};

/**
 * The **XMLDocument** interface represents an XML document.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLDocument)
 */
interface XMLDocument extends Document {
    addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: XMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: XMLDocument, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var XMLDocument: {
    prototype: XMLDocument;
    new(): XMLDocument;
};

interface XMLHttpRequestEventMap extends XMLHttpRequestEventTargetEventMap {
    "readystatechange": Event;
}

/**
 * `XMLHttpRequest` (XHR) objects are used to interact with servers.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest)
 */
interface XMLHttpRequest extends XMLHttpRequestEventTarget {
    /**
     * Type: EventHandler
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readystatechange_event)
     */
    onreadystatechange: ((this: XMLHttpRequest, ev: Event) => any) | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/readyState)
     */
    readonly readyState: number;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/response)
     */
    readonly response: any;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseText)
     */
    readonly responseText: string;
    /**
     * Type: XMLHttpRequestResponseType
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseType)
     */
    responseType: XMLHttpRequestResponseType;
    /**
     * Type: USVString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseURL)
     */
    readonly responseURL: string;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/responseXML)
     */
    readonly responseXML: Document | null;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/status)
     */
    readonly status: number;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/statusText)
     */
    readonly statusText: string;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/timeout)
     */
    timeout: number;
    /**
     * Type: XMLHttpRequestUpload
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/upload)
     */
    readonly upload: XMLHttpRequestUpload;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/withCredentials)
     */
    withCredentials: boolean;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/abort)
     */
    abort(): void;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getAllResponseHeaders)
     */
    getAllResponseHeaders(): string;
    /**
     * Type: ByteString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/getResponseHeader)
     */
    getResponseHeader(name: string): string | null;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/open)
     */
    open(method: string, url: string | URL): void;
    open(method: string, url: string | URL, async: boolean, username?: string | null, password?: string | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/overrideMimeType)
     */
    overrideMimeType(mime: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/send)
     */
    send(body?: Document | XMLHttpRequestBodyInit | null): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequest/setRequestHeader)
     */
    setRequestHeader(name: string, value: string): void;
    /** Type: unsigned short */
    readonly UNSENT: 0;
    /** Type: unsigned short */
    readonly OPENED: 1;
    /** Type: unsigned short */
    readonly HEADERS_RECEIVED: 2;
    /** Type: unsigned short */
    readonly LOADING: 3;
    /** Type: unsigned short */
    readonly DONE: 4;
    addEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof XMLHttpRequestEventMap>(type: K, listener: (this: XMLHttpRequest, ev: XMLHttpRequestEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var XMLHttpRequest: {
    prototype: XMLHttpRequest;
    new(): XMLHttpRequest;
    /** Type: unsigned short */
    readonly UNSENT: 0;
    /** Type: unsigned short */
    readonly OPENED: 1;
    /** Type: unsigned short */
    readonly HEADERS_RECEIVED: 2;
    /** Type: unsigned short */
    readonly LOADING: 3;
    /** Type: unsigned short */
    readonly DONE: 4;
};

interface XMLHttpRequestEventTargetEventMap {
    "abort": ProgressEvent<XMLHttpRequestEventTarget>;
    "error": ProgressEvent<XMLHttpRequestEventTarget>;
    "load": ProgressEvent<XMLHttpRequestEventTarget>;
    "loadend": ProgressEvent<XMLHttpRequestEventTarget>;
    "loadstart": ProgressEvent<XMLHttpRequestEventTarget>;
    "progress": ProgressEvent<XMLHttpRequestEventTarget>;
    "timeout": ProgressEvent<XMLHttpRequestEventTarget>;
}

/**
 * `XMLHttpRequestEventTarget` is the interface that describes the event handlers shared on XMLHttpRequest and XMLHttpRequestUpload.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestEventTarget)
 */
interface XMLHttpRequestEventTarget extends EventTarget {
    /** Type: EventHandler */
    onabort: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /** Type: EventHandler */
    onerror: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /** Type: EventHandler */
    onload: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /** Type: EventHandler */
    onloadend: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /** Type: EventHandler */
    onloadstart: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /** Type: EventHandler */
    onprogress: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    /** Type: EventHandler */
    ontimeout: ((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;
    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestEventTarget, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var XMLHttpRequestEventTarget: {
    prototype: XMLHttpRequestEventTarget;
    new(): XMLHttpRequestEventTarget;
};

/**
 * The **`XMLHttpRequestUpload`** interface represents the upload process for a specific XMLHttpRequest.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLHttpRequestUpload)
 */
interface XMLHttpRequestUpload extends XMLHttpRequestEventTarget {
    addEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
    removeEventListener<K extends keyof XMLHttpRequestEventTargetEventMap>(type: K, listener: (this: XMLHttpRequestUpload, ev: XMLHttpRequestEventTargetEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
}

declare var XMLHttpRequestUpload: {
    prototype: XMLHttpRequestUpload;
    new(): XMLHttpRequestUpload;
};

/**
 * The `XMLSerializer` interface provides the XMLSerializer.serializeToString method to construct an XML string representing a DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer)
 */
interface XMLSerializer {
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XMLSerializer/serializeToString)
     */
    serializeToString(root: Node): string;
}

declare var XMLSerializer: {
    prototype: XMLSerializer;
    new(): XMLSerializer;
};

/**
 * The `XPathEvaluator` interface allows to compile and evaluate XPath expressions.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathEvaluator)
 */
interface XPathEvaluator extends XPathEvaluatorBase {
}

declare var XPathEvaluator: {
    prototype: XPathEvaluator;
    new(): XPathEvaluator;
};

interface XPathEvaluatorBase {
    /**
     * Type: XPathExpression
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createExpression)
     */
    createExpression(expression: string, resolver?: XPathNSResolver | null): XPathExpression;
    /**
     * Type: Node
     * @deprecated
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/createNSResolver)
     */
    createNSResolver(nodeResolver: Node): Node;
    /**
     * Type: XPathResult
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/evaluate)
     */
    evaluate(expression: string, contextNode: Node, resolver?: XPathNSResolver | null, type?: number, result?: XPathResult | null): XPathResult;
}

/**
 * This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its DOM tree.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression)
 */
interface XPathExpression {
    /**
     * Type: XPathResult
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathExpression/evaluate)
     */
    evaluate(contextNode: Node, type?: number, result?: XPathResult | null): XPathResult;
}

declare var XPathExpression: {
    prototype: XPathExpression;
    new(): XPathExpression;
};

/**
 * The **`XPathResult`** interface represents the results generated by evaluating an XPath expression within the context of a given node.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult)
 */
interface XPathResult {
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/booleanValue)
     */
    readonly booleanValue: boolean;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/invalidIteratorState)
     */
    readonly invalidIteratorState: boolean;
    /**
     * Type: unrestricted double
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/numberValue)
     */
    readonly numberValue: number;
    /**
     * Type: unsigned short
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/resultType)
     */
    readonly resultType: number;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/singleNodeValue)
     */
    readonly singleNodeValue: Node | null;
    /**
     * Type: unsigned long
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotLength)
     */
    readonly snapshotLength: number;
    /**
     * Type: DOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/stringValue)
     */
    readonly stringValue: string;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/iterateNext)
     */
    iterateNext(): Node | null;
    /**
     * Type: Node
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XPathResult/snapshotItem)
     */
    snapshotItem(index: number): Node | null;
    /** Type: unsigned short */
    readonly ANY_TYPE: 0;
    /** Type: unsigned short */
    readonly NUMBER_TYPE: 1;
    /** Type: unsigned short */
    readonly STRING_TYPE: 2;
    /** Type: unsigned short */
    readonly BOOLEAN_TYPE: 3;
    /** Type: unsigned short */
    readonly UNORDERED_NODE_ITERATOR_TYPE: 4;
    /** Type: unsigned short */
    readonly ORDERED_NODE_ITERATOR_TYPE: 5;
    /** Type: unsigned short */
    readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6;
    /** Type: unsigned short */
    readonly ORDERED_NODE_SNAPSHOT_TYPE: 7;
    /** Type: unsigned short */
    readonly ANY_UNORDERED_NODE_TYPE: 8;
    /** Type: unsigned short */
    readonly FIRST_ORDERED_NODE_TYPE: 9;
}

declare var XPathResult: {
    prototype: XPathResult;
    new(): XPathResult;
    /** Type: unsigned short */
    readonly ANY_TYPE: 0;
    /** Type: unsigned short */
    readonly NUMBER_TYPE: 1;
    /** Type: unsigned short */
    readonly STRING_TYPE: 2;
    /** Type: unsigned short */
    readonly BOOLEAN_TYPE: 3;
    /** Type: unsigned short */
    readonly UNORDERED_NODE_ITERATOR_TYPE: 4;
    /** Type: unsigned short */
    readonly ORDERED_NODE_ITERATOR_TYPE: 5;
    /** Type: unsigned short */
    readonly UNORDERED_NODE_SNAPSHOT_TYPE: 6;
    /** Type: unsigned short */
    readonly ORDERED_NODE_SNAPSHOT_TYPE: 7;
    /** Type: unsigned short */
    readonly ANY_UNORDERED_NODE_TYPE: 8;
    /** Type: unsigned short */
    readonly FIRST_ORDERED_NODE_TYPE: 9;
};

/**
 * An **`XSLTProcessor`** applies an XSLT stylesheet transformation to an XML document to produce a new XML document as output.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor)
 */
interface XSLTProcessor {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/clearParameters)
     */
    clearParameters(): void;
    /**
     * Type: any
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/getParameter)
     */
    getParameter(namespaceURI: string | null, localName: string): any;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/importStylesheet)
     */
    importStylesheet(style: Node): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/removeParameter)
     */
    removeParameter(namespaceURI: string | null, localName: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/reset)
     */
    reset(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/setParameter)
     */
    setParameter(namespaceURI: string | null, localName: string, value: any): void;
    /**
     * Type: Document
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToDocument)
     */
    transformToDocument(source: Node): Document;
    /**
     * Type: DocumentFragment
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/XSLTProcessor/transformToFragment)
     */
    transformToFragment(source: Node, output: Document): DocumentFragment;
}

declare var XSLTProcessor: {
    prototype: XSLTProcessor;
    new(): XSLTProcessor;
};

/** The **`CSS`** interface holds useful CSS-related methods. */
declare namespace CSS {
    /**
     * Type: HighlightRegistry
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/highlights_static)
     */
    var highlights: HighlightRegistry;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function Hz(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function Q(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function cap(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function ch(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cm(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cqb(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cqh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cqi(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cqmax(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cqmin(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function cqw(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function deg(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dpcm(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dpi(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dppx(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dvb(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dvh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dvi(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dvmax(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dvmin(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function dvw(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function em(value: number): CSSUnitValue;
    /**
     * Type: CSSOMString
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/escape_static)
     */
    function escape(ident: string): string;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function ex(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function fr(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function grad(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function ic(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function kHz(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function lh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function lvb(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function lvh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function lvi(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function lvmax(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function lvmin(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function lvw(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function mm(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function ms(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function number(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function pc(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function percent(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function pt(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function px(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function rad(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function rcap(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function rch(value: number): CSSUnitValue;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/registerProperty_static)
     */
    function registerProperty(definition: PropertyDefinition): void;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function rem(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function rex(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function ric(value: number): CSSUnitValue;
    /** Type: CSSUnitValue */
    function rlh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function s(value: number): CSSUnitValue;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/supports_static)
     */
    function supports(property: string, value: string): boolean;
    function supports(conditionText: string): boolean;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function svb(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function svh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function svi(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function svmax(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function svmin(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function svw(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function turn(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function vb(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function vh(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function vi(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function vmax(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function vmin(value: number): CSSUnitValue;
    /**
     * Type: CSSUnitValue
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/CSS/factory_functions_static)
     */
    function vw(value: number): CSSUnitValue;
}

declare namespace WebAssembly {
    interface CompileError extends Error {
    }

    var CompileError: {
        prototype: CompileError;
        new(message?: string): CompileError;
        (message?: string): CompileError;
    };

    /** [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Global) */
    interface Global<T extends ValueType = ValueType> {
        /** Type: any */
        value: ValueTypeMap[T];
        /** Type: any */
        valueOf(): ValueTypeMap[T];
    }

    var Global: {
        prototype: Global;
        new<T extends ValueType = ValueType>(descriptor: GlobalDescriptor<T>, v?: ValueTypeMap[T]): Global<T>;
    };

    /** [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Instance) */
    interface Instance {
        /**
         * Type: object
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Instance/exports)
         */
        readonly exports: Exports;
    }

    var Instance: {
        prototype: Instance;
        new(module: Module, importObject?: Imports): Instance;
    };

    interface LinkError extends Error {
    }

    var LinkError: {
        prototype: LinkError;
        new(message?: string): LinkError;
        (message?: string): LinkError;
    };

    /** [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Memory) */
    interface Memory {
        /**
         * Type: ArrayBuffer
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Memory/buffer)
         */
        readonly buffer: ArrayBuffer;
        /**
         * Type: unsigned long
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Memory/grow)
         */
        grow(delta: number): number;
    }

    var Memory: {
        prototype: Memory;
        new(descriptor: MemoryDescriptor): Memory;
    };

    /** [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module) */
    interface Module {
    }

    var Module: {
        prototype: Module;
        new(bytes: BufferSource): Module;
        /**
         * Type: [object Object]
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module/customSections_static)
         */
        customSections(moduleObject: Module, sectionName: string): ArrayBuffer[];
        /**
         * Type: [object Object]
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module/exports_static)
         */
        exports(moduleObject: Module): ModuleExportDescriptor[];
        /**
         * Type: [object Object]
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Module/imports_static)
         */
        imports(moduleObject: Module): ModuleImportDescriptor[];
    };

    interface RuntimeError extends Error {
    }

    var RuntimeError: {
        prototype: RuntimeError;
        new(message?: string): RuntimeError;
        (message?: string): RuntimeError;
    };

    /** [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Table) */
    interface Table {
        /**
         * Type: unsigned long
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Table/length)
         */
        readonly length: number;
        /**
         * Type: any
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Table/get)
         */
        get(index: number): any;
        /**
         * Type: unsigned long
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Table/grow)
         */
        grow(delta: number, value?: any): number;
        /**
         * Type: undefined
         *
         * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/Table/set)
         */
        set(index: number, value?: any): void;
    }

    var Table: {
        prototype: Table;
        new(descriptor: TableDescriptor, value?: any): Table;
    };

    interface GlobalDescriptor<T extends ValueType = ValueType> {
        /** Type: boolean */
        mutable?: boolean;
        /** Type: ValueType */
        value: T;
    }

    interface MemoryDescriptor {
        /** Type: unsigned long */
        initial: number;
        /** Type: unsigned long */
        maximum?: number;
        shared?: boolean;
    }

    interface ModuleExportDescriptor {
        /** Type: ImportExportKind */
        kind: ImportExportKind;
        /** Type: USVString */
        name: string;
    }

    interface ModuleImportDescriptor {
        /** Type: ImportExportKind */
        kind: ImportExportKind;
        /** Type: USVString */
        module: string;
        /** Type: USVString */
        name: string;
    }

    interface TableDescriptor {
        /** Type: TableKind */
        element: TableKind;
        /** Type: unsigned long */
        initial: number;
        /** Type: unsigned long */
        maximum?: number;
    }

    interface ValueTypeMap {
        anyfunc: Function;
        externref: any;
        f32: number;
        f64: number;
        i32: number;
        i64: bigint;
        v128: never;
    }

    interface WebAssemblyInstantiatedSource {
        /** Type: Instance */
        instance: Instance;
        /** Type: Module */
        module: Module;
    }

    type ImportExportKind = "function" | "global" | "memory" | "table";
    type TableKind = "anyfunc" | "externref";
    type ExportValue = Function | Global | Memory | Table;
    type Exports = Record<string, ExportValue>;
    type ImportValue = ExportValue | number;
    type Imports = Record<string, ModuleImports>;
    type ModuleImports = Record<string, ImportValue>;
    type ValueType = keyof ValueTypeMap;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/compile_static)
     */
    function compile(bytes: BufferSource): Promise<Module>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/compileStreaming_static)
     */
    function compileStreaming(source: Response | PromiseLike<Response>): Promise<Module>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/instantiate_static)
     */
    function instantiate(bytes: BufferSource, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;
    function instantiate(moduleObject: Module, importObject?: Imports): Promise<Instance>;
    /**
     * Type: [object Object]
     *
     * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/instantiateStreaming_static)
     */
    function instantiateStreaming(source: Response | PromiseLike<Response>, importObject?: Imports): Promise<WebAssemblyInstantiatedSource>;
    /**
     * Type: boolean
     *
     * [MDN Reference](https://developer.mozilla.org/docs/WebAssembly/Reference/JavaScript_interface/validate_static)
     */
    function validate(bytes: BufferSource): boolean;
}

/** The **`console`** object provides access to the debugging console (e.g., the Web console in Firefox). */
/**
 * The **`console`** object provides access to the debugging console (e.g., the Web console in Firefox).
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console)
 */
interface Console {
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/assert_static)
     */
    assert(condition?: boolean, ...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/clear_static)
     */
    clear(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/count_static)
     */
    count(label?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/countReset_static)
     */
    countReset(label?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/debug_static)
     */
    debug(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/dir_static)
     */
    dir(item?: any, options?: any): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/dirxml_static)
     */
    dirxml(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/error_static)
     */
    error(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/group_static)
     */
    group(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/groupCollapsed_static)
     */
    groupCollapsed(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/groupEnd_static)
     */
    groupEnd(): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/info_static)
     */
    info(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/log_static)
     */
    log(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/table_static)
     */
    table(tabularData?: any, properties?: string[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/time_static)
     */
    time(label?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/timeEnd_static)
     */
    timeEnd(label?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/timeLog_static)
     */
    timeLog(label?: string, ...data: any[]): void;
    timeStamp(label?: string): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/trace_static)
     */
    trace(...data: any[]): void;
    /**
     * Type: undefined
     *
     * [MDN Reference](https://developer.mozilla.org/docs/Web/API/console/warn_static)
     */
    warn(...data: any[]): void;
}

declare var console: Console;

interface AudioDataOutputCallback {
    (output: AudioData): void;
}

interface BlobCallback {
    (blob: Blob | null): void;
}

interface CustomElementConstructor {
    new (...params: any[]): HTMLElement;
}

interface DecodeErrorCallback {
    (error: DOMException): void;
}

interface DecodeSuccessCallback {
    (decodedData: AudioBuffer): void;
}

interface EncodedAudioChunkOutputCallback {
    (output: EncodedAudioChunk, metadata?: EncodedAudioChunkMetadata): void;
}

interface EncodedVideoChunkOutputCallback {
    (chunk: EncodedVideoChunk, metadata?: EncodedVideoChunkMetadata): void;
}

interface ErrorCallback {
    (err: DOMException): void;
}

interface FileCallback {
    (file: File): void;
}

interface FileSystemEntriesCallback {
    (entries: FileSystemEntry[]): void;
}

interface FileSystemEntryCallback {
    (entry: FileSystemEntry): void;
}

interface FrameRequestCallback {
    (time: DOMHighResTimeStamp): void;
}

interface FunctionStringCallback {
    (data: string): void;
}

interface IdleRequestCallback {
    (deadline: IdleDeadline): void;
}

interface IntersectionObserverCallback {
    (entries: IntersectionObserverEntry[], observer: IntersectionObserver): void;
}

interface LockGrantedCallback<T> {
    (lock: Lock | null): T;
}

interface MediaSessionActionHandler {
    (details: MediaSessionActionDetails): void;
}

interface MutationCallback {
    (mutations: MutationRecord[], observer: MutationObserver): void;
}

interface NotificationPermissionCallback {
    (permission: NotificationPermission): void;
}

interface OnBeforeUnloadEventHandlerNonNull {
    (event: Event): string | null;
}

interface OnErrorEventHandlerNonNull {
    (event: Event | string, source?: string, lineno?: number, colno?: number, error?: Error): any;
}

interface PerformanceObserverCallback {
    (entries: PerformanceObserverEntryList, observer: PerformanceObserver): void;
}

interface PositionCallback {
    (position: GeolocationPosition): void;
}

interface PositionErrorCallback {
    (positionError: GeolocationPositionError): void;
}

interface QueuingStrategySize<T = any> {
    (chunk: T): number;
}

interface RTCPeerConnectionErrorCallback {
    (error: DOMException): void;
}

interface RTCSessionDescriptionCallback {
    (description: RTCSessionDescriptionInit): void;
}

interface RemotePlaybackAvailabilityCallback {
    (available: boolean): void;
}

interface ReportingObserverCallback {
    (reports: Report[], observer: ReportingObserver): void;
}

interface ResizeObserverCallback {
    (entries: ResizeObserverEntry[], observer: ResizeObserver): void;
}

interface TransformerFlushCallback<O> {
    (controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;
}

interface TransformerStartCallback<O> {
    (controller: TransformStreamDefaultController<O>): any;
}

interface TransformerTransformCallback<I, O> {
    (chunk: I, controller: TransformStreamDefaultController<O>): void | PromiseLike<void>;
}

interface UnderlyingSinkAbortCallback {
    (reason?: any): void | PromiseLike<void>;
}

interface UnderlyingSinkCloseCallback {
    (): void | PromiseLike<void>;
}

interface UnderlyingSinkStartCallback {
    (controller: WritableStreamDefaultController): any;
}

interface UnderlyingSinkWriteCallback<W> {
    (chunk: W, controller: WritableStreamDefaultController): void | PromiseLike<void>;
}

interface UnderlyingSourceCancelCallback {
    (reason?: any): void | PromiseLike<void>;
}

interface UnderlyingSourcePullCallback<R> {
    (controller: ReadableStreamController<R>): void | PromiseLike<void>;
}

interface UnderlyingSourceStartCallback<R> {
    (controller: ReadableStreamController<R>): any;
}

interface VideoFrameOutputCallback {
    (output: VideoFrame): void;
}

interface VideoFrameRequestCallback {
    (now: DOMHighResTimeStamp, metadata: VideoFrameCallbackMetadata): void;
}

interface ViewTransitionUpdateCallback {
    (): any;
}

interface VoidFunction {
    (): void;
}

interface WebCodecsErrorCallback {
    (error: DOMException): void;
}

interface HTMLElementTagNameMap {
    "a": HTMLAnchorElement;
    "abbr": HTMLElement;
    "address": HTMLElement;
    "area": HTMLAreaElement;
    "article": HTMLElement;
    "aside": HTMLElement;
    "audio": HTMLAudioElement;
    "b": HTMLElement;
    "base": HTMLBaseElement;
    "bdi": HTMLElement;
    "bdo": HTMLElement;
    "blockquote": HTMLQuoteElement;
    "body": HTMLBodyElement;
    "br": HTMLBRElement;
    "button": HTMLButtonElement;
    "canvas": HTMLCanvasElement;
    "caption": HTMLTableCaptionElement;
    "cite": HTMLElement;
    "code": HTMLElement;
    "col": HTMLTableColElement;
    "colgroup": HTMLTableColElement;
    "data": HTMLDataElement;
    "datalist": HTMLDataListElement;
    "dd": HTMLElement;
    "del": HTMLModElement;
    "details": HTMLDetailsElement;
    "dfn": HTMLElement;
    "dialog": HTMLDialogElement;
    "div": HTMLDivElement;
    "dl": HTMLDListElement;
    "dt": HTMLElement;
    "em": HTMLElement;
    "embed": HTMLEmbedElement;
    "fieldset": HTMLFieldSetElement;
    "figcaption": HTMLElement;
    "figure": HTMLElement;
    "footer": HTMLElement;
    "form": HTMLFormElement;
    "h1": HTMLHeadingElement;
    "h2": HTMLHeadingElement;
    "h3": HTMLHeadingElement;
    "h4": HTMLHeadingElement;
    "h5": HTMLHeadingElement;
    "h6": HTMLHeadingElement;
    "head": HTMLHeadElement;
    "header": HTMLElement;
    "hgroup": HTMLElement;
    "hr": HTMLHRElement;
    "html": HTMLHtmlElement;
    "i": HTMLElement;
    "iframe": HTMLIFrameElement;
    "img": HTMLImageElement;
    "input": HTMLInputElement;
    "ins": HTMLModElement;
    "kbd": HTMLElement;
    "label": HTMLLabelElement;
    "legend": HTMLLegendElement;
    "li": HTMLLIElement;
    "link": HTMLLinkElement;
    "main": HTMLElement;
    "map": HTMLMapElement;
    "mark": HTMLElement;
    "menu": HTMLMenuElement;
    "meta": HTMLMetaElement;
    "meter": HTMLMeterElement;
    "nav": HTMLElement;
    "noscript": HTMLElement;
    "object": HTMLObjectElement;
    "ol": HTMLOListElement;
    "optgroup": HTMLOptGroupElement;
    "option": HTMLOptionElement;
    "output": HTMLOutputElement;
    "p": HTMLParagraphElement;
    "picture": HTMLPictureElement;
    "pre": HTMLPreElement;
    "progress": HTMLProgressElement;
    "q": HTMLQuoteElement;
    "rp": HTMLElement;
    "rt": HTMLElement;
    "ruby": HTMLElement;
    "s": HTMLElement;
    "samp": HTMLElement;
    "script": HTMLScriptElement;
    "search": HTMLElement;
    "section": HTMLElement;
    "select": HTMLSelectElement;
    "slot": HTMLSlotElement;
    "small": HTMLElement;
    "source": HTMLSourceElement;
    "span": HTMLSpanElement;
    "strong": HTMLElement;
    "style": HTMLStyleElement;
    "sub": HTMLElement;
    "summary": HTMLElement;
    "sup": HTMLElement;
    "table": HTMLTableElement;
    "tbody": HTMLTableSectionElement;
    "td": HTMLTableCellElement;
    "template": HTMLTemplateElement;
    "textarea": HTMLTextAreaElement;
    "tfoot": HTMLTableSectionElement;
    "th": HTMLTableCellElement;
    "thead": HTMLTableSectionElement;
    "time": HTMLTimeElement;
    "title": HTMLTitleElement;
    "tr": HTMLTableRowElement;
    "track": HTMLTrackElement;
    "u": HTMLElement;
    "ul": HTMLUListElement;
    "var": HTMLElement;
    "video": HTMLVideoElement;
    "wbr": HTMLElement;
}

interface HTMLElementDeprecatedTagNameMap {
    "acronym": HTMLElement;
    "applet": HTMLUnknownElement;
    "basefont": HTMLElement;
    "bgsound": HTMLUnknownElement;
    "big": HTMLElement;
    "blink": HTMLUnknownElement;
    "center": HTMLElement;
    "dir": HTMLDirectoryElement;
    "font": HTMLFontElement;
    "frame": HTMLFrameElement;
    "frameset": HTMLFrameSetElement;
    "isindex": HTMLUnknownElement;
    "keygen": HTMLUnknownElement;
    "listing": HTMLPreElement;
    "marquee": HTMLMarqueeElement;
    "menuitem": HTMLElement;
    "multicol": HTMLUnknownElement;
    "nextid": HTMLUnknownElement;
    "nobr": HTMLElement;
    "noembed": HTMLElement;
    "noframes": HTMLElement;
    "param": HTMLParamElement;
    "plaintext": HTMLElement;
    "rb": HTMLElement;
    "rtc": HTMLElement;
    "spacer": HTMLUnknownElement;
    "strike": HTMLElement;
    "tt": HTMLElement;
    "xmp": HTMLPreElement;
}

interface SVGElementTagNameMap {
    "a": SVGAElement;
    "animate": SVGAnimateElement;
    "animateMotion": SVGAnimateMotionElement;
    "animateTransform": SVGAnimateTransformElement;
    "circle": SVGCircleElement;
    "clipPath": SVGClipPathElement;
    "defs": SVGDefsElement;
    "desc": SVGDescElement;
    "ellipse": SVGEllipseElement;
    "feBlend": SVGFEBlendElement;
    "feColorMatrix": SVGFEColorMatrixElement;
    "feComponentTransfer": SVGFEComponentTransferElement;
    "feComposite": SVGFECompositeElement;
    "feConvolveMatrix": SVGFEConvolveMatrixElement;
    "feDiffuseLighting": SVGFEDiffuseLightingElement;
    "feDisplacementMap": SVGFEDisplacementMapElement;
    "feDistantLight": SVGFEDistantLightElement;
    "feDropShadow": SVGFEDropShadowElement;
    "feFlood": SVGFEFloodElement;
    "feFuncA": SVGFEFuncAElement;
    "feFuncB": SVGFEFuncBElement;
    "feFuncG": SVGFEFuncGElement;
    "feFuncR": SVGFEFuncRElement;
    "feGaussianBlur": SVGFEGaussianBlurElement;
    "feImage": SVGFEImageElement;
    "feMerge": SVGFEMergeElement;
    "feMergeNode": SVGFEMergeNodeElement;
    "feMorphology": SVGFEMorphologyElement;
    "feOffset": SVGFEOffsetElement;
    "fePointLight": SVGFEPointLightElement;
    "feSpecularLighting": SVGFESpecularLightingElement;
    "feSpotLight": SVGFESpotLightElement;
    "feTile": SVGFETileElement;
    "feTurbulence": SVGFETurbulenceElement;
    "filter": SVGFilterElement;
    "foreignObject": SVGForeignObjectElement;
    "g": SVGGElement;
    "image": SVGImageElement;
    "line": SVGLineElement;
    "linearGradient": SVGLinearGradientElement;
    "marker": SVGMarkerElement;
    "mask": SVGMaskElement;
    "metadata": SVGMetadataElement;
    "mpath": SVGMPathElement;
    "path": SVGPathElement;
    "pattern": SVGPatternElement;
    "polygon": SVGPolygonElement;
    "polyline": SVGPolylineElement;
    "radialGradient": SVGRadialGradientElement;
    "rect": SVGRectElement;
    "script": SVGScriptElement;
    "set": SVGSetElement;
    "stop": SVGStopElement;
    "style": SVGStyleElement;
    "svg": SVGSVGElement;
    "switch": SVGSwitchElement;
    "symbol": SVGSymbolElement;
    "text": SVGTextElement;
    "textPath": SVGTextPathElement;
    "title": SVGTitleElement;
    "tspan": SVGTSpanElement;
    "use": SVGUseElement;
    "view": SVGViewElement;
}

interface MathMLElementTagNameMap {
    "annotation": MathMLElement;
    "annotation-xml": MathMLElement;
    "maction": MathMLElement;
    "math": MathMLElement;
    "merror": MathMLElement;
    "mfrac": MathMLElement;
    "mi": MathMLElement;
    "mmultiscripts": MathMLElement;
    "mn": MathMLElement;
    "mo": MathMLElement;
    "mover": MathMLElement;
    "mpadded": MathMLElement;
    "mphantom": MathMLElement;
    "mprescripts": MathMLElement;
    "mroot": MathMLElement;
    "mrow": MathMLElement;
    "ms": MathMLElement;
    "mspace": MathMLElement;
    "msqrt": MathMLElement;
    "mstyle": MathMLElement;
    "msub": MathMLElement;
    "msubsup": MathMLElement;
    "msup": MathMLElement;
    "mtable": MathMLElement;
    "mtd": MathMLElement;
    "mtext": MathMLElement;
    "mtr": MathMLElement;
    "munder": MathMLElement;
    "munderover": MathMLElement;
    "semantics": MathMLElement;
}

/** @deprecated Directly use HTMLElementTagNameMap or SVGElementTagNameMap as appropriate, instead. */
type ElementTagNameMap = HTMLElementTagNameMap & Pick<SVGElementTagNameMap, Exclude<keyof SVGElementTagNameMap, keyof HTMLElementTagNameMap>>;

declare var Audio: {
    new(src?: string): HTMLAudioElement;
};
declare var Image: {
    new(width?: number, height?: number): HTMLImageElement;
};
declare var Option: {
    new(text?: string, value?: string, defaultSelected?: boolean, selected?: boolean): HTMLOptionElement;
};
/**
 * Type: Navigator
 * @deprecated This is a legacy alias of `navigator`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
 */
declare var clientInformation: Navigator;
/**
 * Type: boolean
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/closed)
 */
declare var closed: boolean;
/**
 * Type: CookieStore
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cookieStore)
 */
declare var cookieStore: CookieStore;
/**
 * Type: CustomElementRegistry
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/customElements)
 */
declare var customElements: CustomElementRegistry;
/**
 * Type: double
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicePixelRatio)
 */
declare var devicePixelRatio: number;
/**
 * Type: Document
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/document)
 */
declare var document: Document;
/**
 * Type: [object Object],[object Object]
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/event)
 */
declare var event: Event | undefined;
/**
 * Type: External
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/external)
 */
declare var external: External;
/**
 * Type: Element
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frameElement)
 */
declare var frameElement: Element | null;
/**
 * Type: WindowProxy
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/frames)
 */
declare var frames: WindowProxy;
/**
 * Type: History
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/history)
 */
declare var history: History;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerHeight)
 */
declare var innerHeight: number;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/innerWidth)
 */
declare var innerWidth: number;
/**
 * Type: unsigned long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/length)
 */
declare var length: number;
/**
 * Type: Location
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/location)
 */
declare var location: Location;
/**
 * Type: BarProp
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/locationbar)
 */
declare var locationbar: BarProp;
/**
 * Type: BarProp
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/menubar)
 */
declare var menubar: BarProp;
/**
 * Type: DOMString
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/name)
 */
/** @deprecated */
declare const name: void;
/**
 * Type: Navigator
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/navigator)
 */
declare var navigator: Navigator;
/**
 * Type: EventHandler
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/devicemotion_event)
 */
declare var ondevicemotion: ((this: Window, ev: DeviceMotionEvent) => any) | null;
/**
 * Type: EventHandler
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientation_event)
 */
declare var ondeviceorientation: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
/**
 * Type: EventHandler
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/deviceorientationabsolute_event)
 */
declare var ondeviceorientationabsolute: ((this: Window, ev: DeviceOrientationEvent) => any) | null;
/**
 * Type: EventHandler
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientationchange_event)
 */
declare var onorientationchange: ((this: Window, ev: Event) => any) | null;
/**
 * Type: any
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/opener)
 */
declare var opener: any;
/**
 * Type: short
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/orientation)
 */
declare var orientation: number;
/**
 * Type: boolean
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/originAgentCluster)
 */
declare var originAgentCluster: boolean;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerHeight)
 */
declare var outerHeight: number;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/outerWidth)
 */
declare var outerWidth: number;
/**
 * Type: double
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
 */
declare var pageXOffset: number;
/**
 * Type: double
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
 */
declare var pageYOffset: number;
/**
 * Refers to either the parent WindowProxy, or itself.
 *
 * It can rarely be null e.g. for contentWindow of an iframe that is already removed from the parent.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/parent)
 */
declare var parent: WindowProxy;
/**
 * Type: BarProp
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/personalbar)
 */
declare var personalbar: BarProp;
/**
 * Type: Screen
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screen)
 */
declare var screen: Screen;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenLeft)
 */
declare var screenLeft: number;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenTop)
 */
declare var screenTop: number;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenX)
 */
declare var screenX: number;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/screenY)
 */
declare var screenY: number;
/**
 * Type: double
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollX)
 */
declare var scrollX: number;
/**
 * Type: double
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollY)
 */
declare var scrollY: number;
/**
 * Type: BarProp
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollbars)
 */
declare var scrollbars: BarProp;
/**
 * Type: WindowProxy
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/self)
 */
declare var self: Window & typeof globalThis;
/**
 * Type: SpeechSynthesis
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/speechSynthesis)
 */
declare var speechSynthesis: SpeechSynthesis;
/**
 * Type: DOMString
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/status)
 */
declare var status: string;
/**
 * Type: BarProp
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/statusbar)
 */
declare var statusbar: BarProp;
/**
 * Type: BarProp
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/toolbar)
 */
declare var toolbar: BarProp;
/**
 * Type: WindowProxy
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/top)
 */
declare var top: WindowProxy | null;
/**
 * Type: VisualViewport
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/visualViewport)
 */
declare var visualViewport: VisualViewport | null;
/**
 * Type: WindowProxy
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/window)
 */
declare var window: Window & typeof globalThis;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/alert)
 */
declare function alert(message?: any): void;
/**
 * Type: undefined
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/blur)
 */
declare function blur(): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/cancelIdleCallback)
 */
declare function cancelIdleCallback(handle: number): void;
/**
 * Type: undefined
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/captureEvents)
 */
declare function captureEvents(): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/close)
 */
declare function close(): void;
/**
 * Type: boolean
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/confirm)
 */
declare function confirm(message?: string): boolean;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/focus)
 */
declare function focus(): void;
/**
 * Type: CSSStyleDeclaration
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getComputedStyle)
 */
declare function getComputedStyle(elt: Element, pseudoElt?: string | null): CSSStyleDeclaration;
/**
 * Type: Selection
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/getSelection)
 */
declare function getSelection(): Selection | null;
/**
 * Type: MediaQueryList
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/matchMedia)
 */
declare function matchMedia(query: string): MediaQueryList;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveBy)
 */
declare function moveBy(x: number, y: number): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/moveTo)
 */
declare function moveTo(x: number, y: number): void;
/**
 * Type: WindowProxy
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/open)
 */
declare function open(url?: string | URL, target?: string, features?: string): WindowProxy | null;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/postMessage)
 */
declare function postMessage(message: any, targetOrigin: string, transfer?: Transferable[]): void;
declare function postMessage(message: any, options?: WindowPostMessageOptions): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/print)
 */
declare function print(): void;
/**
 * Type: DOMString
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/prompt)
 */
declare function prompt(message?: string, _default?: string): string | null;
/**
 * Type: undefined
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/releaseEvents)
 */
declare function releaseEvents(): void;
/**
 * Type: unsigned long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/requestIdleCallback)
 */
declare function requestIdleCallback(callback: IdleRequestCallback, options?: IdleRequestOptions): number;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeBy)
 */
declare function resizeBy(x: number, y: number): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/resizeTo)
 */
declare function resizeTo(width: number, height: number): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scroll)
 */
declare function scroll(options?: ScrollToOptions): void;
declare function scroll(x: number, y: number): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollBy)
 */
declare function scrollBy(options?: ScrollToOptions): void;
declare function scrollBy(x: number, y: number): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/scrollTo)
 */
declare function scrollTo(options?: ScrollToOptions): void;
declare function scrollTo(x: number, y: number): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/stop)
 */
declare function stop(): void;
declare function toString(): string;
/**
 * Type: boolean
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/EventTarget/dispatchEvent)
 */
declare function dispatchEvent(event: Event): boolean;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/cancelAnimationFrame)
 */
declare function cancelAnimationFrame(handle: number): void;
/**
 * Type: unsigned long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/DedicatedWorkerGlobalScope/requestAnimationFrame)
 */
declare function requestAnimationFrame(callback: FrameRequestCallback): number;
/**
 * Fires when the user aborts the download.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/abort_event)
 */
declare var onabort: ((this: Window, ev: UIEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationcancel_event)
 */
declare var onanimationcancel: ((this: Window, ev: AnimationEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
 */
declare var onanimationend: ((this: Window, ev: AnimationEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
 */
declare var onanimationiteration: ((this: Window, ev: AnimationEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
 */
declare var onanimationstart: ((this: Window, ev: AnimationEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/auxclick_event)
 */
declare var onauxclick: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/beforeinput_event)
 */
declare var onbeforeinput: ((this: Window, ev: InputEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/beforetoggle_event)
 */
declare var onbeforetoggle: ((this: Window, ev: ToggleEvent) => any) | null;
/**
 * Fires when the object loses the input focus.
 * @param ev The focus event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/blur_event)
 */
declare var onblur: ((this: Window, ev: FocusEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/cancel_event)
 */
declare var oncancel: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when playback is possible, but would require further buffering.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplay_event)
 */
declare var oncanplay: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/canplaythrough_event)
 */
declare var oncanplaythrough: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when the contents of the object or selection have changed.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/change_event)
 */
declare var onchange: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when the user clicks the left mouse button on the object
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/click_event)
 */
declare var onclick: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLDialogElement/close_event)
 */
declare var onclose: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextlost_event)
 */
declare var oncontextlost: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when the user clicks the right mouse button in the client area, opening the context menu.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/contextmenu_event)
 */
declare var oncontextmenu: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/contextrestored_event)
 */
declare var oncontextrestored: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/copy_event)
 */
declare var oncopy: ((this: Window, ev: ClipboardEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLTrackElement/cuechange_event)
 */
declare var oncuechange: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/cut_event)
 */
declare var oncut: ((this: Window, ev: ClipboardEvent) => any) | null;
/**
 * Fires when the user double-clicks the object.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/dblclick_event)
 */
declare var ondblclick: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Fires on the source object continuously during a drag operation.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drag_event)
 */
declare var ondrag: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Fires on the source object when the user releases the mouse at the close of a drag operation.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragend_event)
 */
declare var ondragend: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Fires on the target element when the user drags the object to a valid drop target.
 * @param ev The drag event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragenter_event)
 */
declare var ondragenter: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.
 * @param ev The drag event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragleave_event)
 */
declare var ondragleave: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Fires on the target element continuously while the user drags the object over a valid drop target.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragover_event)
 */
declare var ondragover: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Fires on the source object when the user starts to drag a text selection or selected object.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/dragstart_event)
 */
declare var ondragstart: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/drop_event)
 */
declare var ondrop: ((this: Window, ev: DragEvent) => any) | null;
/**
 * Occurs when the duration attribute is updated.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/durationchange_event)
 */
declare var ondurationchange: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the media element is reset to its initial state.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/emptied_event)
 */
declare var onemptied: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the end of playback is reached.
 * @param ev The event
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ended_event)
 */
declare var onended: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when an error occurs during object loading.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/error_event)
 */
declare var onerror: OnErrorEventHandler;
/**
 * Fires when the object receives focus.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/focus_event)
 */
declare var onfocus: ((this: Window, ev: FocusEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/formdata_event)
 */
declare var onformdata: ((this: Window, ev: FormDataEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/gotpointercapture_event)
 */
declare var ongotpointercapture: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/input_event)
 */
declare var oninput: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/invalid_event)
 */
declare var oninvalid: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when the user presses a key.
 * @param ev The keyboard event
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keydown_event)
 */
declare var onkeydown: ((this: Window, ev: KeyboardEvent) => any) | null;
/**
 * Fires when the user presses an alphanumeric key.
 * @param ev The event.
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keypress_event)
 */
declare var onkeypress: ((this: Window, ev: KeyboardEvent) => any) | null;
/**
 * Fires when the user releases a key.
 * @param ev The keyboard event
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/keyup_event)
 */
declare var onkeyup: ((this: Window, ev: KeyboardEvent) => any) | null;
/**
 * Fires immediately after the browser loads the object.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/load_event)
 */
declare var onload: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when media data is loaded at the current playback position.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadeddata_event)
 */
declare var onloadeddata: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the duration and dimensions of the media have been determined.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadedmetadata_event)
 */
declare var onloadedmetadata: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when Internet Explorer begins looking for media data.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/loadstart_event)
 */
declare var onloadstart: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/lostpointercapture_event)
 */
declare var onlostpointercapture: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Fires when the user clicks the object with either mouse button.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousedown_event)
 */
declare var onmousedown: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseenter_event)
 */
declare var onmouseenter: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseleave_event)
 */
declare var onmouseleave: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Fires when the user moves the mouse over the object.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mousemove_event)
 */
declare var onmousemove: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Fires when the user moves the mouse pointer outside the boundaries of the object.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseout_event)
 */
declare var onmouseout: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Fires when the user moves the mouse pointer into the object.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseover_event)
 */
declare var onmouseover: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Fires when the user releases a mouse button while the mouse is over the object.
 * @param ev The mouse event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/mouseup_event)
 */
declare var onmouseup: ((this: Window, ev: MouseEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/paste_event)
 */
declare var onpaste: ((this: Window, ev: ClipboardEvent) => any) | null;
/**
 * Occurs when playback is paused.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/pause_event)
 */
declare var onpause: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the play method is requested.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/play_event)
 */
declare var onplay: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the audio or video has started playing.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/playing_event)
 */
declare var onplaying: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointercancel_event)
 */
declare var onpointercancel: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerdown_event)
 */
declare var onpointerdown: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerenter_event)
 */
declare var onpointerenter: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerleave_event)
 */
declare var onpointerleave: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointermove_event)
 */
declare var onpointermove: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerout_event)
 */
declare var onpointerout: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerover_event)
 */
declare var onpointerover: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/pointerup_event)
 */
declare var onpointerup: ((this: Window, ev: PointerEvent) => any) | null;
/**
 * Occurs to indicate progress while downloading media data.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/progress_event)
 */
declare var onprogress: ((this: Window, ev: ProgressEvent) => any) | null;
/**
 * Occurs when the playback rate is increased or decreased.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/ratechange_event)
 */
declare var onratechange: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when the user resets a form.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/reset_event)
 */
declare var onreset: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement/resize_event)
 */
declare var onresize: ((this: Window, ev: UIEvent) => any) | null;
/**
 * Fires when the user repositions the scroll box in the scroll bar on the object.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scroll_event)
 */
declare var onscroll: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/scrollend_event)
 */
declare var onscrollend: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/securitypolicyviolation_event)
 */
declare var onsecuritypolicyviolation: ((this: Window, ev: SecurityPolicyViolationEvent) => any) | null;
/**
 * Occurs when the seek operation ends.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeked_event)
 */
declare var onseeked: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the current playback position is moved.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/seeking_event)
 */
declare var onseeking: ((this: Window, ev: Event) => any) | null;
/**
 * Fires when the current selection changes.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLInputElement/select_event)
 */
declare var onselect: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Document/selectionchange_event)
 */
declare var onselectionchange: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Node/selectstart_event)
 */
declare var onselectstart: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLSlotElement/slotchange_event)
 */
declare var onslotchange: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when the download has stopped.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/stalled_event)
 */
declare var onstalled: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLFormElement/submit_event)
 */
declare var onsubmit: ((this: Window, ev: SubmitEvent) => any) | null;
/**
 * Occurs if the load operation has been intentionally halted.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/suspend_event)
 */
declare var onsuspend: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs to indicate the current playback position.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/timeupdate_event)
 */
declare var ontimeupdate: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLElement/toggle_event)
 */
declare var ontoggle: ((this: Window, ev: ToggleEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchcancel_event)
 */
declare var ontouchcancel: ((this: Window, ev: TouchEvent) => any) | null | undefined;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchend_event)
 */
declare var ontouchend: ((this: Window, ev: TouchEvent) => any) | null | undefined;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchmove_event)
 */
declare var ontouchmove: ((this: Window, ev: TouchEvent) => any) | null | undefined;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/touchstart_event)
 */
declare var ontouchstart: ((this: Window, ev: TouchEvent) => any) | null | undefined;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitioncancel_event)
 */
declare var ontransitioncancel: ((this: Window, ev: TransitionEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
 */
declare var ontransitionend: ((this: Window, ev: TransitionEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionrun_event)
 */
declare var ontransitionrun: ((this: Window, ev: TransitionEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionstart_event)
 */
declare var ontransitionstart: ((this: Window, ev: TransitionEvent) => any) | null;
/**
 * Occurs when the volume is changed, or playback is muted or unmuted.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/volumechange_event)
 */
declare var onvolumechange: ((this: Window, ev: Event) => any) | null;
/**
 * Occurs when playback stops because the next frame of a video resource is not available.
 * @param ev The event.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/HTMLMediaElement/waiting_event)
 */
declare var onwaiting: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 * @deprecated This is a legacy alias of `onanimationend`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationend_event)
 */
declare var onwebkitanimationend: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 * @deprecated This is a legacy alias of `onanimationiteration`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationiteration_event)
 */
declare var onwebkitanimationiteration: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 * @deprecated This is a legacy alias of `onanimationstart`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/animationstart_event)
 */
declare var onwebkitanimationstart: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 * @deprecated This is a legacy alias of `ontransitionend`.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/transitionend_event)
 */
declare var onwebkittransitionend: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Element/wheel_event)
 */
declare var onwheel: ((this: Window, ev: WheelEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/afterprint_event)
 */
declare var onafterprint: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeprint_event)
 */
declare var onbeforeprint: ((this: Window, ev: Event) => any) | null;
/**
 * Type: OnBeforeUnloadEventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/beforeunload_event)
 */
declare var onbeforeunload: ((this: Window, ev: BeforeUnloadEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepadconnected_event)
 */
declare var ongamepadconnected: ((this: Window, ev: GamepadEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/gamepaddisconnected_event)
 */
declare var ongamepaddisconnected: ((this: Window, ev: GamepadEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/hashchange_event)
 */
declare var onhashchange: ((this: Window, ev: HashChangeEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/languagechange_event)
 */
declare var onlanguagechange: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/message_event)
 */
declare var onmessage: ((this: Window, ev: MessageEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/messageerror_event)
 */
declare var onmessageerror: ((this: Window, ev: MessageEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/offline_event)
 */
declare var onoffline: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/online_event)
 */
declare var ononline: ((this: Window, ev: Event) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagehide_event)
 */
declare var onpagehide: ((this: Window, ev: PageTransitionEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pagereveal_event)
 */
declare var onpagereveal: ((this: Window, ev: PageRevealEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageshow_event)
 */
declare var onpageshow: ((this: Window, ev: PageTransitionEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/pageswap_event)
 */
declare var onpageswap: ((this: Window, ev: PageSwapEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/popstate_event)
 */
declare var onpopstate: ((this: Window, ev: PopStateEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/rejectionhandled_event)
 */
declare var onrejectionhandled: ((this: Window, ev: PromiseRejectionEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/storage_event)
 */
declare var onstorage: ((this: Window, ev: StorageEvent) => any) | null;
/**
 * Type: EventHandler
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unhandledrejection_event)
 */
declare var onunhandledrejection: ((this: Window, ev: PromiseRejectionEvent) => any) | null;
/**
 * Type: EventHandler
 * @deprecated
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/unload_event)
 */
declare var onunload: ((this: Window, ev: Event) => any) | null;
/**
 * Type: Storage
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/localStorage)
 */
declare var localStorage: Storage;
/**
 * Type: CacheStorage
 * Available only in secure contexts.
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/caches)
 */
declare var caches: CacheStorage;
/**
 * Type: boolean
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crossOriginIsolated)
 */
declare var crossOriginIsolated: boolean;
/**
 * Type: Crypto
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/crypto)
 */
declare var crypto: Crypto;
/**
 * Type: IDBFactory
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/indexedDB)
 */
declare var indexedDB: IDBFactory;
/**
 * Type: boolean
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/isSecureContext)
 */
declare var isSecureContext: boolean;
/**
 * Type: USVString
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/origin)
 */
declare var origin: string;
/**
 * Type: Performance
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/performance)
 */
declare var performance: Performance;
/**
 * Type: ByteString
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/atob)
 */
declare function atob(data: string): string;
/**
 * Type: DOMString
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/btoa)
 */
declare function btoa(data: string): string;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/clearInterval)
 */
declare function clearInterval(id: number | undefined): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/clearTimeout)
 */
declare function clearTimeout(id: number | undefined): void;
/**
 * Type: [object Object]
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/createImageBitmap)
 */
declare function createImageBitmap(image: ImageBitmapSource, options?: ImageBitmapOptions): Promise<ImageBitmap>;
declare function createImageBitmap(image: ImageBitmapSource, sx: number, sy: number, sw: number, sh: number, options?: ImageBitmapOptions): Promise<ImageBitmap>;
/**
 * Type: [object Object]
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/fetch)
 */
declare function fetch(input: RequestInfo | URL, init?: RequestInit): Promise<Response>;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/queueMicrotask)
 */
declare function queueMicrotask(callback: VoidFunction): void;
/**
 * Type: undefined
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/reportError)
 */
declare function reportError(e: any): void;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/setInterval)
 */
declare function setInterval(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
/**
 * Type: long
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/setTimeout)
 */
declare function setTimeout(handler: TimerHandler, timeout?: number, ...arguments: any[]): number;
/**
 * Type: any
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/structuredClone)
 */
declare function structuredClone<T = any>(value: T, options?: StructuredSerializeOptions): T;
/**
 * Type: Storage
 *
 * [MDN Reference](https://developer.mozilla.org/docs/Web/API/Window/sessionStorage)
 */
declare var sessionStorage: Storage;
declare function addEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
declare function addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
declare function removeEventListener<K extends keyof WindowEventMap>(type: K, listener: (this: Window, ev: WindowEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
declare function removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
type AlgorithmIdentifier = Algorithm | string;
type AllowSharedBufferSource = ArrayBufferLike | ArrayBufferView<ArrayBufferLike>;
type AutoFill = AutoFillBase | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<AutoFillAddressKind>}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;
type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;
type AutoFillSection = `section-${string}`;
type Base64URLString = string;
type BigInteger = Uint8Array<ArrayBuffer>;
type BlobPart = BufferSource | Blob | string;
type BodyInit = ReadableStream | XMLHttpRequestBodyInit;
type BufferSource = ArrayBufferView<ArrayBuffer> | ArrayBuffer;
type COSEAlgorithmIdentifier = number;
type CSSKeywordish = string | CSSKeywordValue;
type CSSNumberish = number | CSSNumericValue;
type CSSPerspectiveValue = CSSNumericValue | CSSKeywordish;
type CSSUnparsedSegment = string | CSSVariableReferenceValue;
type CanvasImageSource = HTMLOrSVGImageElement | HTMLVideoElement | HTMLCanvasElement | ImageBitmap | OffscreenCanvas | VideoFrame;
type ClipboardItemData = Promise<string | Blob>;
type ClipboardItems = ClipboardItem[];
type ConstrainBoolean = boolean | ConstrainBooleanParameters;
type ConstrainDOMString = string | string[] | ConstrainDOMStringParameters;
type ConstrainDouble = number | ConstrainDoubleRange;
type ConstrainULong = number | ConstrainULongRange;
type CookieList = CookieListItem[];
type DOMHighResTimeStamp = number;
type EpochTimeStamp = number;
type EventListenerOrEventListenerObject = EventListener | EventListenerObject;
type FileSystemWriteChunkType = BufferSource | Blob | string | WriteParams;
type Float32List = Float32Array<ArrayBufferLike> | GLfloat[];
type FormDataEntryValue = File | string;
type GLbitfield = number;
type GLboolean = boolean;
type GLclampf = number;
type GLenum = number;
type GLfloat = number;
type GLint = number;
type GLint64 = number;
type GLintptr = number;
type GLsizei = number;
type GLsizeiptr = number;
type GLuint = number;
type GLuint64 = number;
type HTMLOrSVGImageElement = HTMLImageElement | SVGImageElement;
type HTMLOrSVGScriptElement = HTMLScriptElement | SVGScriptElement;
type HashAlgorithmIdentifier = AlgorithmIdentifier;
type HeadersInit = [string, string][] | Record<string, string> | Headers;
type IDBValidKey = number | string | Date | BufferSource | IDBValidKey[];
type ImageBitmapSource = CanvasImageSource | Blob | ImageData;
type ImageBufferSource = AllowSharedBufferSource | ReadableStream;
type ImageDataArray = Uint8ClampedArray<ArrayBuffer>;
type Int32List = Int32Array<ArrayBufferLike> | GLint[];
type LineAndPositionSetting = number | AutoKeyword;
type MediaProvider = MediaStream | MediaSource | Blob;
type MessageEventSource = WindowProxy | MessagePort | ServiceWorker;
type MutationRecordType = "attributes" | "characterData" | "childList";
type NamedCurve = string;
type OffscreenRenderingContext = OffscreenCanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext;
type OnBeforeUnloadEventHandler = OnBeforeUnloadEventHandlerNonNull | null;
type OnErrorEventHandler = OnErrorEventHandlerNonNull | null;
type OptionalPostfixToken<T extends string> = ` ${T}` | "";
type OptionalPrefixToken<T extends string> = `${T} ` | "";
type PerformanceEntryList = PerformanceEntry[];
type PublicKeyCredentialClientCapabilities = Record<string, boolean>;
type PublicKeyCredentialJSON = any;
type RTCRtpTransform = RTCRtpScriptTransform;
type ReadableStreamController<T> = ReadableStreamDefaultController<T> | ReadableByteStreamController;
type ReadableStreamReadResult<T> = ReadableStreamReadValueResult<T> | ReadableStreamReadDoneResult<T>;
type ReadableStreamReader<T> = ReadableStreamDefaultReader<T> | ReadableStreamBYOBReader;
type RenderingContext = CanvasRenderingContext2D | ImageBitmapRenderingContext | WebGLRenderingContext | WebGL2RenderingContext;
type ReportList = Report[];
type RequestInfo = Request | string;
type TexImageSource = ImageBitmap | ImageData | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | OffscreenCanvas | VideoFrame;
type TimerHandler = string | Function;
type Transferable = OffscreenCanvas | ImageBitmap | MessagePort | MediaSourceHandle | ReadableStream | WritableStream | TransformStream | AudioData | VideoFrame | RTCDataChannel | ArrayBuffer;
type Uint32List = Uint32Array<ArrayBufferLike> | GLuint[];
type VibratePattern = number | number[];
type WindowProxy = Window;
type XMLHttpRequestBodyInit = Blob | BufferSource | FormData | URLSearchParams | string;
type AlignSetting = "center" | "end" | "left" | "right" | "start";
type AlphaOption = "discard" | "keep";
type AnimationPlayState = "finished" | "idle" | "paused" | "running";
type AnimationReplaceState = "active" | "persisted" | "removed";
type AppendMode = "segments" | "sequence";
type AttestationConveyancePreference = "direct" | "enterprise" | "indirect" | "none";
type AudioContextLatencyCategory = "balanced" | "interactive" | "playback";
type AudioContextState = "closed" | "interrupted" | "running" | "suspended";
type AudioSampleFormat = "f32" | "f32-planar" | "s16" | "s16-planar" | "s32" | "s32-planar" | "u8" | "u8-planar";
type AuthenticatorAttachment = "cross-platform" | "platform";
type AuthenticatorTransport = "ble" | "hybrid" | "internal" | "nfc" | "usb";
type AutoFillAddressKind = "billing" | "shipping";
type AutoFillBase = "" | "off" | "on";
type AutoFillContactField = "email" | "tel" | "tel-area-code" | "tel-country-code" | "tel-extension" | "tel-local" | "tel-local-prefix" | "tel-local-suffix" | "tel-national";
type AutoFillContactKind = "home" | "mobile" | "work";
type AutoFillCredentialField = "webauthn";
type AutoFillNormalField = "additional-name" | "address-level1" | "address-level2" | "address-level3" | "address-level4" | "address-line1" | "address-line2" | "address-line3" | "bday-day" | "bday-month" | "bday-year" | "cc-csc" | "cc-exp" | "cc-exp-month" | "cc-exp-year" | "cc-family-name" | "cc-given-name" | "cc-name" | "cc-number" | "cc-type" | "country" | "country-name" | "current-password" | "family-name" | "given-name" | "honorific-prefix" | "honorific-suffix" | "name" | "new-password" | "one-time-code" | "organization" | "postal-code" | "street-address" | "transaction-amount" | "transaction-currency" | "username";
type AutoKeyword = "auto";
type AutomationRate = "a-rate" | "k-rate";
type AvcBitstreamFormat = "annexb" | "avc";
type BinaryType = "arraybuffer" | "blob";
type BiquadFilterType = "allpass" | "bandpass" | "highpass" | "highshelf" | "lowpass" | "lowshelf" | "notch" | "peaking";
type BitrateMode = "constant" | "variable";
type CSSMathOperator = "clamp" | "invert" | "max" | "min" | "negate" | "product" | "sum";
type CSSNumericBaseType = "angle" | "flex" | "frequency" | "length" | "percent" | "resolution" | "time";
type CanPlayTypeResult = "" | "maybe" | "probably";
type CanvasDirection = "inherit" | "ltr" | "rtl";
type CanvasFillRule = "evenodd" | "nonzero";
type CanvasFontKerning = "auto" | "none" | "normal";
type CanvasFontStretch = "condensed" | "expanded" | "extra-condensed" | "extra-expanded" | "normal" | "semi-condensed" | "semi-expanded" | "ultra-condensed" | "ultra-expanded";
type CanvasFontVariantCaps = "all-petite-caps" | "all-small-caps" | "normal" | "petite-caps" | "small-caps" | "titling-caps" | "unicase";
type CanvasLineCap = "butt" | "round" | "square";
type CanvasLineJoin = "bevel" | "miter" | "round";
type CanvasTextAlign = "center" | "end" | "left" | "right" | "start";
type CanvasTextBaseline = "alphabetic" | "bottom" | "hanging" | "ideographic" | "middle" | "top";
type CanvasTextRendering = "auto" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed";
type ChannelCountMode = "clamped-max" | "explicit" | "max";
type ChannelInterpretation = "discrete" | "speakers";
type ClientTypes = "all" | "sharedworker" | "window" | "worker";
type CodecState = "closed" | "configured" | "unconfigured";
type ColorGamut = "p3" | "rec2020" | "srgb";
type ColorSpaceConversion = "default" | "none";
type CompositeOperation = "accumulate" | "add" | "replace";
type CompositeOperationOrAuto = "accumulate" | "add" | "auto" | "replace";
type CompressionFormat = "deflate" | "deflate-raw" | "gzip";
type CookieSameSite = "lax" | "none" | "strict";
type CredentialMediationRequirement = "conditional" | "optional" | "required" | "silent";
type DOMParserSupportedType = "application/xhtml+xml" | "application/xml" | "image/svg+xml" | "text/html" | "text/xml";
type DirectionSetting = "" | "lr" | "rl";
type DisplayCaptureSurfaceType = "browser" | "monitor" | "window";
type DistanceModelType = "exponential" | "inverse" | "linear";
type DocumentReadyState = "complete" | "interactive" | "loading";
type DocumentVisibilityState = "hidden" | "visible";
type EncodedAudioChunkType = "delta" | "key";
type EncodedVideoChunkType = "delta" | "key";
type EndOfStreamError = "decode" | "network";
type EndingType = "native" | "transparent";
type FileSystemHandleKind = "directory" | "file";
type FillLightMode = "auto" | "flash" | "off";
type FillMode = "auto" | "backwards" | "both" | "forwards" | "none";
type FontDisplay = "auto" | "block" | "fallback" | "optional" | "swap";
type FontFaceLoadStatus = "error" | "loaded" | "loading" | "unloaded";
type FontFaceSetLoadStatus = "loaded" | "loading";
type FullscreenNavigationUI = "auto" | "hide" | "show";
type GamepadHapticEffectType = "dual-rumble" | "trigger-rumble";
type GamepadHapticsResult = "complete" | "preempted";
type GamepadMappingType = "" | "standard" | "xr-standard";
type GlobalCompositeOperation = "color" | "color-burn" | "color-dodge" | "copy" | "darken" | "destination-atop" | "destination-in" | "destination-out" | "destination-over" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "lighter" | "luminosity" | "multiply" | "overlay" | "saturation" | "screen" | "soft-light" | "source-atop" | "source-in" | "source-out" | "source-over" | "xor";
type HardwareAcceleration = "no-preference" | "prefer-hardware" | "prefer-software";
type HdrMetadataType = "smpteSt2086" | "smpteSt2094-10" | "smpteSt2094-40";
type HighlightType = "grammar-error" | "highlight" | "spelling-error";
type IDBCursorDirection = "next" | "nextunique" | "prev" | "prevunique";
type IDBRequestReadyState = "done" | "pending";
type IDBTransactionDurability = "default" | "relaxed" | "strict";
type IDBTransactionMode = "readonly" | "readwrite" | "versionchange";
type ImageOrientation = "flipY" | "from-image" | "none";
type ImageSmoothingQuality = "high" | "low" | "medium";
type InsertPosition = "afterbegin" | "afterend" | "beforebegin" | "beforeend";
type IterationCompositeOperation = "accumulate" | "replace";
type KeyFormat = "jwk" | "pkcs8" | "raw" | "spki";
type KeyType = "private" | "public" | "secret";
type KeyUsage = "decrypt" | "deriveBits" | "deriveKey" | "encrypt" | "sign" | "unwrapKey" | "verify" | "wrapKey";
type LatencyMode = "quality" | "realtime";
type LineAlignSetting = "center" | "end" | "start";
type LockMode = "exclusive" | "shared";
type LoginStatus = "logged-in" | "logged-out";
type MIDIPortConnectionState = "closed" | "open" | "pending";
type MIDIPortDeviceState = "connected" | "disconnected";
type MIDIPortType = "input" | "output";
type MediaDecodingType = "file" | "media-source" | "webrtc";
type MediaDeviceKind = "audioinput" | "audiooutput" | "videoinput";
type MediaEncodingType = "record" | "webrtc";
type MediaKeyMessageType = "individualization-request" | "license-release" | "license-renewal" | "license-request";
type MediaKeySessionClosedReason = "closed-by-application" | "hardware-context-reset" | "internal-error" | "release-acknowledged" | "resource-evicted";
type MediaKeySessionType = "persistent-license" | "temporary";
type MediaKeyStatus = "expired" | "internal-error" | "output-downscaled" | "output-restricted" | "released" | "status-pending" | "usable" | "usable-in-future";
type MediaKeysRequirement = "not-allowed" | "optional" | "required";
type MediaSessionAction = "nexttrack" | "pause" | "play" | "previoustrack" | "seekbackward" | "seekforward" | "seekto" | "skipad" | "stop";
type MediaSessionPlaybackState = "none" | "paused" | "playing";
type MediaStreamTrackState = "ended" | "live";
type NavigationTimingType = "back_forward" | "navigate" | "prerender" | "reload";
type NavigationType = "push" | "reload" | "replace" | "traverse";
type NotificationDirection = "auto" | "ltr" | "rtl";
type NotificationPermission = "default" | "denied" | "granted";
type OffscreenRenderingContextId = "2d" | "bitmaprenderer" | "webgl" | "webgl2" | "webgpu";
type OpusBitstreamFormat = "ogg" | "opus";
type OrientationType = "landscape-primary" | "landscape-secondary" | "portrait-primary" | "portrait-secondary";
type OscillatorType = "custom" | "sawtooth" | "sine" | "square" | "triangle";
type OverSampleType = "2x" | "4x" | "none";
type PanningModelType = "HRTF" | "equalpower";
type PaymentComplete = "fail" | "success" | "unknown";
type PaymentShippingType = "delivery" | "pickup" | "shipping";
type PermissionName = "camera" | "geolocation" | "microphone" | "midi" | "notifications" | "persistent-storage" | "push" | "screen-wake-lock" | "storage-access";
type PermissionState = "denied" | "granted" | "prompt";
type PlaybackDirection = "alternate" | "alternate-reverse" | "normal" | "reverse";
type PositionAlignSetting = "auto" | "center" | "line-left" | "line-right";
type PredefinedColorSpace = "display-p3" | "srgb";
type PremultiplyAlpha = "default" | "none" | "premultiply";
type PresentationStyle = "attachment" | "inline" | "unspecified";
type PublicKeyCredentialType = "public-key";
type PushEncryptionKeyName = "auth" | "p256dh";
type RTCBundlePolicy = "balanced" | "max-bundle" | "max-compat";
type RTCDataChannelState = "closed" | "closing" | "connecting" | "open";
type RTCDegradationPreference = "balanced" | "maintain-framerate" | "maintain-resolution";
type RTCDtlsRole = "client" | "server" | "unknown";
type RTCDtlsTransportState = "closed" | "connected" | "connecting" | "failed" | "new";
type RTCEncodedVideoFrameType = "delta" | "empty" | "key";
type RTCErrorDetailType = "data-channel-failure" | "dtls-failure" | "fingerprint-failure" | "hardware-encoder-error" | "hardware-encoder-not-available" | "sctp-failure" | "sdp-syntax-error";
type RTCIceCandidateType = "host" | "prflx" | "relay" | "srflx";
type RTCIceComponent = "rtcp" | "rtp";
type RTCIceConnectionState = "checking" | "closed" | "completed" | "connected" | "disconnected" | "failed" | "new";
type RTCIceGathererState = "complete" | "gathering" | "new";
type RTCIceGatheringState = "complete" | "gathering" | "new";
type RTCIceProtocol = "tcp" | "udp";
type RTCIceRole = "controlled" | "controlling" | "unknown";
type RTCIceTcpCandidateType = "active" | "passive" | "so";
type RTCIceTransportPolicy = "all" | "relay";
type RTCIceTransportState = "checking" | "closed" | "completed" | "connected" | "disconnected" | "failed" | "new";
type RTCPeerConnectionState = "closed" | "connected" | "connecting" | "disconnected" | "failed" | "new";
type RTCPriorityType = "high" | "low" | "medium" | "very-low";
type RTCQualityLimitationReason = "bandwidth" | "cpu" | "none" | "other";
type RTCRtcpMuxPolicy = "require";
type RTCRtpTransceiverDirection = "inactive" | "recvonly" | "sendonly" | "sendrecv" | "stopped";
type RTCSctpTransportState = "closed" | "connected" | "connecting";
type RTCSdpType = "answer" | "offer" | "pranswer" | "rollback";
type RTCSignalingState = "closed" | "have-local-offer" | "have-local-pranswer" | "have-remote-offer" | "have-remote-pranswer" | "stable";
type RTCStatsIceCandidatePairState = "failed" | "frozen" | "in-progress" | "inprogress" | "succeeded" | "waiting";
type RTCStatsType = "candidate-pair" | "certificate" | "codec" | "data-channel" | "inbound-rtp" | "local-candidate" | "media-playout" | "media-source" | "outbound-rtp" | "peer-connection" | "remote-candidate" | "remote-inbound-rtp" | "remote-outbound-rtp" | "transport";
type ReadableStreamReaderMode = "byob";
type ReadableStreamType = "bytes";
type ReadyState = "closed" | "ended" | "open";
type RecordingState = "inactive" | "paused" | "recording";
type RedEyeReduction = "always" | "controllable" | "never";
type ReferrerPolicy = "" | "no-referrer" | "no-referrer-when-downgrade" | "origin" | "origin-when-cross-origin" | "same-origin" | "strict-origin" | "strict-origin-when-cross-origin" | "unsafe-url";
type RemotePlaybackState = "connected" | "connecting" | "disconnected";
type RequestCache = "default" | "force-cache" | "no-cache" | "no-store" | "only-if-cached" | "reload";
type RequestCredentials = "include" | "omit" | "same-origin";
type RequestDestination = "" | "audio" | "audioworklet" | "document" | "embed" | "font" | "frame" | "iframe" | "image" | "manifest" | "object" | "paintworklet" | "report" | "script" | "sharedworker" | "style" | "track" | "video" | "worker" | "xslt";
type RequestMode = "cors" | "navigate" | "no-cors" | "same-origin";
type RequestPriority = "auto" | "high" | "low";
type RequestRedirect = "error" | "follow" | "manual";
type ResidentKeyRequirement = "discouraged" | "preferred" | "required";
type ResizeObserverBoxOptions = "border-box" | "content-box" | "device-pixel-content-box";
type ResizeQuality = "high" | "low" | "medium" | "pixelated";
type ResponseType = "basic" | "cors" | "default" | "error" | "opaque" | "opaqueredirect";
type ScrollBehavior = "auto" | "instant" | "smooth";
type ScrollLogicalPosition = "center" | "end" | "nearest" | "start";
type ScrollRestoration = "auto" | "manual";
type ScrollSetting = "" | "up";
type SecurityPolicyViolationEventDisposition = "enforce" | "report";
type SelectionMode = "end" | "preserve" | "select" | "start";
type ServiceWorkerState = "activated" | "activating" | "installed" | "installing" | "parsed" | "redundant";
type ServiceWorkerUpdateViaCache = "all" | "imports" | "none";
type ShadowRootMode = "closed" | "open";
type SlotAssignmentMode = "manual" | "named";
type SpeechSynthesisErrorCode = "audio-busy" | "audio-hardware" | "canceled" | "interrupted" | "invalid-argument" | "language-unavailable" | "network" | "not-allowed" | "synthesis-failed" | "synthesis-unavailable" | "text-too-long" | "voice-unavailable";
type TextTrackKind = "captions" | "chapters" | "descriptions" | "metadata" | "subtitles";
type TextTrackMode = "disabled" | "hidden" | "showing";
type TouchType = "direct" | "stylus";
type TransferFunction = "hlg" | "pq" | "srgb";
type UserVerificationRequirement = "discouraged" | "preferred" | "required";
type VideoColorPrimaries = "bt470bg" | "bt709" | "smpte170m";
type VideoEncoderBitrateMode = "constant" | "quantizer" | "variable";
type VideoFacingModeEnum = "environment" | "left" | "right" | "user";
type VideoMatrixCoefficients = "bt470bg" | "bt709" | "rgb" | "smpte170m";
type VideoPixelFormat = "BGRA" | "BGRX" | "I420" | "I420A" | "I422" | "I444" | "NV12" | "RGBA" | "RGBX";
type VideoTransferCharacteristics = "bt709" | "iec61966-2-1" | "smpte170m";
type WakeLockType = "screen";
type WebGLPowerPreference = "default" | "high-performance" | "low-power";
type WebTransportCongestionControl = "default" | "low-latency" | "throughput";
type WebTransportErrorSource = "session" | "stream";
type WorkerType = "classic" | "module";
type WriteCommandType = "seek" | "truncate" | "write";
type XMLHttpRequestResponseType = "" | "arraybuffer" | "blob" | "document" | "json" | "text";
