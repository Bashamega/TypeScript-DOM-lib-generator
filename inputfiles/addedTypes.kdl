interface-mixin AbstractWorker {
  event error type="ErrorEvent"
}
interface-mixin DocumentAndElementEventHandlers {
  event copy type="ClipboardEvent"
  event cut type="ClipboardEvent"
  event paste type="ClipboardEvent"
}
interface-mixin DocumentOrShadowRoot {
  // Manually moved from Document
  // See https://github.com/w3c/csswg-drafts/issues/5886 and https://github.com/w3c/csswg-drafts/issues/556
  method elementFromPoint overrideSignatures="elementFromPoint(x: number, y: number): Element | null"
  method elementsFromPoint overrideSignatures="elementsFromPoint(x: number, y: number): Element[]"
}
interface-mixin GlobalEventHandlers {
  event abort type="UIEvent"
  event auxclick type="PointerEvent"
  event beforeinput type="InputEvent"
  event blur type="FocusEvent"
  event click type="PointerEvent"
  event compositionstart type="CompositionEvent"
  event compositionupdate type="CompositionEvent"
  event compositionend type="CompositionEvent"
  event drag type="DragEvent"
  event dragend type="DragEvent"
  event dragenter type="DragEvent"
  event dragleave type="DragEvent"
  event dragover type="DragEvent"
  event dragstart type="DragEvent"
  event drop type="DragEvent"
  event error type="ErrorEvent"
  event focus type="FocusEvent"
  event focusin type="FocusEvent"
  event focusout type="FocusEvent"
  event formdata type="FormDataEvent"
  event keydown type="KeyboardEvent"
  event keypress type="KeyboardEvent"
  event keyup type="KeyboardEvent"
  event mousedown type="MouseEvent"
  event mouseenter type="MouseEvent"
  event mouseleave type="MouseEvent"
  event mousemove type="MouseEvent"
  event mouseout type="MouseEvent"
  event mouseover type="MouseEvent"
  event mouseup type="MouseEvent"
  event progress type="ProgressEvent"
  event resize type="UIEvent"
  event wheel type="WheelEvent"
  event securitypolicyviolation type="SecurityPolicyViolationEvent"
  event submit type="SubmitEvent"
  event dblclick type="MouseEvent"
  event contextmenu type="PointerEvent"
  event toggle type="ToggleEvent"
  event beforetoggle type="ToggleEvent"
}
interface-mixin WebGLRenderingContextBase {
}
interface-mixin WindowEventHandlers {
  event beforeunload type="BeforeUnloadEvent"
  event gamepadconnected type="GamepadEvent"
  event gamepaddisconnected type="GamepadEvent"
  event hashchange type="HashChangeEvent"
  event message type="MessageEvent"
  event messageerror type="MessageEvent"
  event pagehide type="PageTransitionEvent"
  event pageshow type="PageTransitionEvent"
  event pageswap type="PageSwapEvent"
  event pagereveal type="PageRevealEvent"
  event popstate type="PopStateEvent"
  event storage type="StorageEvent"
  event unhandledrejection type="PromiseRejectionEvent"
  event rejectionhandled type="PromiseRejectionEvent"
}
enum InsertPosition {
  value "beforebegin"
  value "beforeend"
  value "afterbegin"
  value "afterend"
}
enum FontDisplay {
  // https://w3c.github.io/csswg-drafts/css-fonts-4/#font-display-desc
  value "auto"
  value "block"
  value "swap"
  value "fallback"
  value "optional"
}
enum GlobalCompositeOperation {
  value "source-over"
  value "source-in"
  value "source-out"
  value "source-atop"
  value "destination-over"
  value "destination-in"
  value "destination-out"
  value "destination-atop"
  value "lighter"
  value "copy"
  value "xor"
  value "multiply"
  value "screen"
  value "overlay"
  value "darken"
  value "lighten"
  value "color-dodge"
  value "color-burn"
  value "hard-light"
  value "soft-light"
  value "difference"
  value "exclusion"
  value "hue"
  value "saturation"
  value "color"
  value "luminosity"
}
enum PermissionName {
  // This is a subset of the permissions defined in the spec:
  // https://w3c.github.io/powerful-features-registry/#registry-table-of-powerful-features
  // Please add a feature only when it's supported by multiple engines.
  // Full support: https://developer.mozilla.org/en-US/docs/Web/API/Permissions_API#browser_compatibility
  value "camera"
  value "geolocation"
  value "microphone"
  value "midi"
  value "notifications"
  value "persistent-storage"
  value "push"
  value "screen-wake-lock"
  value "storage-access"
}
enum AutoFillBase {
  // Off
  value "off"
  // Automatic
  value "on"
  value ""
}
enum AutoFillAddressKind {
  value "shipping"
  value "billing"
}
enum AutoFillNormalField {
  value "name"
  value "honorific-prefix"
  value "given-name"
  value "additional-name"
  value "family-name"
  value "honorific-suffix"
  value "username"
  value "new-password"
  value "current-password"
  // Supported in iOS Safari too even though WPT tests
  // for Safari currently fail as of 2023-06.
  value "one-time-code"
  value "organization"
  value "street-address"
  value "address-line1"
  value "address-line2"
  value "address-line3"
  value "address-level4"
  value "address-level3"
  value "address-level2"
  value "address-level1"
  value "country"
  value "country-name"
  value "postal-code"
  value "cc-name"
  value "cc-given-name"
  value "cc-family-name"
  value "cc-number"
  value "cc-exp"
  value "cc-exp-month"
  value "cc-exp-year"
  value "cc-csc"
  value "cc-type"
  value "transaction-currency"
  value "transaction-amount"
  value "bday-day"
  value "bday-month"
  value "bday-year"
}
enum AutoFillContactKind {
  value "home"
  value "work"
  value "mobile"
}
enum AutoFillContactField {
  value "tel"
  value "tel-country-code"
  value "tel-national"
  value "tel-area-code"
  value "tel-local"
  value "tel-local-prefix"
  value "tel-local-suffix"
  value "tel-extension"
  value "email"
}
enum AutoFillCredentialField {
  value "webauthn"
}
