{
  "AbortController": "The **AbortController** interface represents a controller object that allows you to abort one or more Web requests as and when desired.",
  "AbortSignal": "The **AbortSignal** interface represents a signal object that allows you to communicate with an asynchronous operation (such as a fetch request) and abort it if required via an AbortController object.",
  "AbsoluteOrientationSensor": "The **AbsoluteOrientationSensor** interface of the Sensor APIs describes the device's physical orientation in relation to the Earth's reference coordinate system.",
  "AbstractRange": "The **AbstractRange** abstract interface is the base class upon which all range types are defined. A **range** is an object that indicates the start and end points of a section of content within the document.",
  "Accelerometer": "The **Accelerometer** interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes.",
  "AesCbcParams": "The **AesCbcParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CBC algorithm.",
  "AesCtrParams": "The **AesCtrParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-CTR algorithm.",
  "AesGcmParams": "The **AesGcmParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the AES-GCM algorithm.",
  "AesKeyGenParams": "The **AesKeyGenParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating an AES key: that is, when the algorithm is identified as any of AES-CBC, AES-CTR, AES-GCM, or AES-KW.",
  "AmbientLightSensor": "The **AmbientLightSensor** interface of the Sensor APIs returns the current light level or illuminance of the ambient light around the hosting device.",
  "AnalyserNode": "The **AnalyserNode** interface represents a node able to provide real-time frequency and time-domain analysis information. It is an AudioNode that passes the audio stream unchanged from the input to the output, but allows you to take the generated data, process it, and create audio visualizations.",
  "ANGLE_instanced_arrays": "The **ANGLE_instanced_arrays** extension is part of the WebGL API and allows to draw the same object, or groups of similar objects multiple times, if they share the same vertex data, primitive count and type.",
  "Animation": "The **Animation** interface of the Web Animations API represents a single animation player and provides playback controls and a timeline for an animation node or source.",
  "AnimationEffect": "The AnimationEffect interface of the Web Animations API is an interface representing animation effects.",
  "AnimationEvent": "The **AnimationEvent** interface represents events providing information related to animations.",
  "AnimationPlaybackEvent": "The AnimationPlaybackEvent interface of the Web Animations API represents animation events.",
  "AnimationTimeline": "The AnimationTimeline interface of the Web Animations API represents the timeline of an animation. This interface exists to define timeline features, inherited by other timeline types:",
  "Attr": "The **Attr** interface represents one of an element's attributes as an object. In most situations, you will directly retrieve the attribute value as a string (e.g., Element.getAttribute()), but some cases may require interacting with Attr instances (e.g., Element.getAttributeNode()).",
  "Attribution Reporting API": "The **Attribution Reporting API** enables developers to measure conversions — for example when a user clicks an ad embedded on one site and then proceeds to purchase the item over on the vendor's site — and then access reports on those conversions. It does this without relying on third-party tracking cookies.",
  "Audio Output Devices API": "The **Audio Output Devices API** allows web applications to prompt users about what output device should be used for audio playback.",
  "AudioBuffer": "The **AudioBuffer** interface represents a short audio asset residing in memory, created from an audio file using the method, or from raw data using . Once put into an AudioBuffer, the audio can then be played by being passed into an .",
  "AudioBufferSourceNode": "The **AudioBufferSourceNode** interface is an AudioScheduledSourceNode which represents an audio source consisting of in-memory audio data, stored in an AudioBuffer.",
  "AudioContext": "The AudioContext interface represents an audio-processing graph built from audio modules linked together, each represented by an AudioNode.",
  "AudioData": "The **AudioData** interface of the WebCodecs API represents an audio sample.",
  "AudioDecoder": "The **AudioDecoder** interface of the decodes chunks of audio.",
  "AudioDestinationNode": "The AudioDestinationNode interface represents the end destination of an audio graph in a given context — usually the speakers of your device. It can also be the node that will \"record\" the audio data when used with an OfflineAudioContext.",
  "AudioEncoder": "The **AudioEncoder** interface of the WebCodecs API encodes AudioData objects.",
  "AudioListener": "The AudioListener interface represents the position and orientation of the unique person listening to the audio scene, and is used in audio spatialization. All PannerNodes spatialize in relation to the AudioListener stored in the BaseAudioContext.listener attribute.",
  "AudioNode": "The **AudioNode** interface is a generic interface for representing an audio processing module.",
  "AudioParam": "The Web Audio API's AudioParam interface represents an audio-related parameter, usually a parameter of an AudioNode (such as ).",
  "AudioParamDescriptor": "The **AudioParamDescriptor** dictionary of the Web Audio API specifies properties for AudioParam objects.",
  "AudioParamMap": "The **AudioParamMap** interface of the Web Audio API represents an iterable and read-only set of multiple audio parameters.",
  "AudioProcessingEvent": "The AudioProcessingEvent interface of the Web Audio API represents events that occur when a ScriptProcessorNode input buffer is ready to be processed.",
  "AudioScheduledSourceNode": "The AudioScheduledSourceNode interface—part of the Web Audio API—is a parent interface for several types of audio source node interfaces which share the ability to be started and stopped, optionally at specified times. Specifically, this interface defines the AudioScheduledSourceNode.start and AudioScheduledSourceNode.stop methods, as well as the AudioScheduledSourceNode.ended_event event.",
  "AudioSinkInfo": "The **AudioSinkInfo** interface of the represents information describing an AudioContext's sink ID, retrieved via AudioContext.sinkId.",
  "AudioTrack": "The **AudioTrack** interface represents a single audio track from one of the HTML media elements, or .",
  "AudioTrackList": "The **AudioTrackList** interface is used to represent a list of the audio tracks contained within a given HTML media element, with each track represented by a separate AudioTrack object in the list.",
  "AudioWorklet": "The **AudioWorklet** interface of the Web Audio API is used to supply custom audio processing scripts that execute in a separate thread to provide very low latency audio processing.",
  "AudioWorkletGlobalScope": "The **AudioWorkletGlobalScope** interface of the Web Audio API represents a global execution context for user-supplied code, which defines custom AudioWorkletProcessor-derived classes.",
  "AudioWorkletNode": "The **AudioWorkletNode** interface of the Web Audio API represents a base class for a user-defined AudioNode, which can be connected to an audio routing graph along with other nodes. It has an associated AudioWorkletProcessor, which does the actual audio processing in a Web Audio rendering thread.",
  "AudioWorkletProcessor": "The **AudioWorkletProcessor** interface of the Web Audio API represents an audio processing code behind a custom AudioWorkletNode. It lives in the AudioWorkletGlobalScope and runs on the Web Audio rendering thread. In turn, an AudioWorkletNode based on it runs on the main thread.",
  "AuthenticatorAssertionResponse": "The **AuthenticatorAssertionResponse** interface of the Web Authentication API contains a digital signature from the private key of a particular WebAuthn credential. The relying party's server can verify this signature to authenticate a user, for example when they sign in.",
  "AuthenticatorAttestationResponse": "The **AuthenticatorAttestationResponse** interface of the Web Authentication API is the result of a WebAuthn credential registration. It contains information about the credential that the server needs to perform WebAuthn assertions, such as its credential ID and public key.",
  "AuthenticatorResponse": "The **AuthenticatorResponse** interface of the Web Authentication API is the base interface for interfaces that provide a cryptographic root of trust for a key pair. The child interfaces include information from the browser such as the challenge origin and either may be returned from PublicKeyCredential.response.",
  "Background Fetch API": "The **Background Fetch API** provides a method for managing downloads that may take a significant amount of time such as movies, audio files, and software.",
  "Background Synchronization API": "The **Background Synchronization API** enables a web app to defer tasks so that they can be run in a service worker once the user has a stable network connection.",
  "Background Tasks API": "The **Cooperative Scheduling of Background Tasks API** (also referred to as the Background Tasks API or the requestIdleCallback() API) provides the ability to queue tasks to be executed automatically by the user agent when it determines that there is free time to do so.",
  "BackgroundFetchEvent": "The **BackgroundFetchEvent** interface of the is the event type for background fetch events dispatched on the .",
  "BackgroundFetchManager": "The **BackgroundFetchManager** interface of the is a map where the keys are background fetch IDs and the values are BackgroundFetchRegistration objects.",
  "BackgroundFetchRecord": "The **BackgroundFetchRecord** interface of the represents an individual request and response.",
  "BackgroundFetchRegistration": "The **BackgroundFetchRegistration** interface of the represents an individual background fetch.",
  "BackgroundFetchUpdateUIEvent": "The **BackgroundFetchUpdateUIEvent** interface of the is an event type for the ServiceWorkerGlobalScope.backgroundfetchsuccess_event and ServiceWorkerGlobalScope.backgroundfetchfail_event events, and provides a method for updating the title and icon of the app to inform a user of the success or failure of a background fetch.",
  "Badging API": "The **Badging API** gives web developers a method of setting a badge on a document or application, to act as a notification that state has changed without displaying a more distracting notification. A common use case for this would be an application with a messaging feature displaying a badge on the app icon to show that new messages have arrived.",
  "Barcode Detection API": "The Barcode Detection API detects linear and two-dimensional barcodes in images.",
  "BarcodeDetector": "The **BarcodeDetector** interface of the allows detection of linear and two dimensional barcodes in images.",
  "BarProp": "The **BarProp** interface of the Document Object Model represents the web browser user interface elements that are exposed to scripts in web pages. Each of the following interface elements are represented by a BarProp object.",
  "BaseAudioContext": "The BaseAudioContext interface of the Web Audio API acts as a base definition for online and offline audio-processing graphs, as represented by AudioContext and OfflineAudioContext respectively. You wouldn't use BaseAudioContext directly — you'd use its features via one of these two inheriting interfaces.",
  "Battery Status API": "The **Battery Status API**, more often referred to as the **Battery API**, provides information about the system's battery charge level and lets you be notified by events that are sent when the battery level or charging status change. This can be used to adjust your app's resource usage to reduce battery drain when the battery is low, or to save changes before the battery runs out in order to prevent data loss.",
  "BatteryManager": "The **BatteryManager** interface of the provides information about the system's battery charge level. The navigator.getBattery() method returns a promise that resolves with a BatteryManager interface.",
  "Beacon API": "The **Beacon** API is used to send an asynchronous and non-blocking request to a web server. The request does not expect a response. Unlike requests made using XMLHttpRequest or the Fetch API, the browser guarantees to initiate beacon requests before the page is unloaded and to run them to completion.",
  "BeforeInstallPromptEvent": "The **BeforeInstallPromptEvent** is the interface of the Window.beforeinstallprompt_event event fired at the Window object before a user is prompted to \"install\" a website to a home screen on mobile.",
  "BeforeUnloadEvent": "The **BeforeUnloadEvent** interface represents the event object for the Window/beforeunload_event event, which is fired when the current window, contained document, and associated resources are about to be unloaded.",
  "BiquadFilterNode": "The BiquadFilterNode interface represents a simple low-order filter, and is created using the method. It is an AudioNode that can represent different kinds of filters, tone control devices, and graphic equalizers. A BiquadFilterNode always has exactly one input and one output.",
  "Blob": "The **Blob** interface represents a blob, which is a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a so its methods can be used for processing the data.",
  "BlobEvent": "The **BlobEvent** interface of the MediaStream Recording API represents events associated with a Blob. These blobs are typically, but not necessarily, associated with media content.",
  "Bluetooth": "The **Bluetooth** interface of the Web Bluetooth API provides methods to query Bluetooth availability and request access to devices.",
  "BluetoothCharacteristicProperties": "The **BluetoothCharacteristicProperties** interface of the Web Bluetooth API provides the operations that are valid on the given BluetoothRemoteGATTCharacteristic.",
  "BluetoothDevice": "The BluetoothDevice interface of the Web Bluetooth API represents a Bluetooth device inside a particular script execution",
  "BluetoothRemoteGATTCharacteristic": "The BluetoothRemoteGattCharacteristic interface of the Web Bluetooth API represents a GATT Characteristic, which is a basic data element that provides further information about a peripheral's service.",
  "BluetoothRemoteGATTDescriptor": "The BluetoothRemoteGATTDescriptor interface of the Web Bluetooth API provides a GATT Descriptor,",
  "BluetoothRemoteGATTServer": "The **BluetoothRemoteGATTServer** interface of the Web Bluetooth API represents a GATT",
  "BluetoothRemoteGATTService": "The BluetoothRemoteGATTService interface of the Web Bluetooth API represents a",
  "BluetoothUUID": "The **BluetoothUUID** interface of the Web Bluetooth API provides a way to look up Universally Unique Identifier (UUID) values by name in the",
  "Broadcast Channel API": "The **Broadcast Channel API** allows basic communication between (that is, _windows_, _tabs_, _frames_, or _iframes_) and workers on the same .",
  "BroadcastChannel": "The **BroadcastChannel** interface represents a named channel that any of a given can subscribe to. It allows communication between different documents (in different windows, tabs, frames or iframes) of the same origin. Messages are broadcasted via a BroadcastChannel/message_event event fired at all BroadcastChannel objects listening to the channel, except the object that sent the message.",
  "BrowserCaptureMediaStreamTrack": "The **BrowserCaptureMediaStreamTrack** interface of the represents a single video track. It extends the MediaStreamTrack class with methods to limit the part of a self-capture stream (for example, a user's screen or window) that is captured.",
  "ByteLengthQueuingStrategy": "The **ByteLengthQueuingStrategy** interface of the Streams API provides a built-in byte length queuing strategy that can be used when constructing streams.",
  "Cache": "The **Cache** interface provides a persistent storage mechanism for Request / Response object pairs that are cached in long lived memory. How long a Cache object lives is browser dependent, but a single origin's scripts can typically rely on the presence of a previously populated Cache object. Note that the Cache interface is exposed to windowed scopes as well as workers. You don't have to use it in conjunction with service workers, even though it is defined in the service worker spec.",
  "CacheStorage": "The **CacheStorage** interface represents the storage for Cache objects.",
  "CanMakePaymentEvent": "The **CanMakePaymentEvent** interface of the is the event object for the ServiceWorkerGlobalScope.canmakepayment_event event, fired on a payment app's service worker to check whether it is ready to handle a payment. Specifically, it is fired when the merchant website calls the PaymentRequest.PaymentRequest constructor.",
  "Canvas API": "The **Canvas API** provides a means for drawing graphics via JavaScript and the HTML element. Among other things, it can be used for animation, game graphics, data visualization, photo manipulation, and real-time video processing.",
  "CanvasCaptureMediaStreamTrack": "The **CanvasCaptureMediaStreamTrack** interface of the represents the video track contained in a MediaStream being generated from a following a call to HTMLCanvasElement.captureStream().",
  "CanvasGradient": "The **CanvasGradient** interface represents an opaque object describing a gradient. It is returned by the methods CanvasRenderingContext2D.createLinearGradient(), CanvasRenderingContext2D.createConicGradient() or CanvasRenderingContext2D.createRadialGradient().",
  "CanvasPattern": "The **CanvasPattern** interface represents an opaque object describing a pattern, based on an image, a canvas, or a video, created by the CanvasRenderingContext2D.createPattern() method.",
  "CanvasRenderingContext2D": "The **CanvasRenderingContext2D** interface, part of the Canvas API, provides the 2D rendering context for the drawing surface of a element.",
  "CaptureController": "The **CaptureController** interface provides methods that can be used to further manipulate a capture session separate from its initiation via MediaDevices.getDisplayMedia().",
  "CaretPosition": "The CaretPosition interface represents the caret position, an indicator for the text insertion point.",
  "CDATASection": "The **CDATASection** interface represents a CDATA section",
  "Channel Messaging API": "The **Channel Messaging API** allows two separate scripts running in different browsing contexts attached to the same document (e.g., two IFrames, or the main document and an IFrame, two documents via a SharedWorker, or two workers) to communicate directly, passing messages between one another through two-way channels (or pipes) with a port at each end.",
  "ChannelMergerNode": "The ChannelMergerNode interface, often used in conjunction with its opposite, ChannelSplitterNode, reunites different mono inputs into a single output. Each input is used to fill a channel of the output. This is useful for accessing each channels separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
  "ChannelSplitterNode": "The ChannelSplitterNode interface, often used in conjunction with its opposite, ChannelMergerNode, separates the different channels of an audio source into a set of mono outputs. This is useful for accessing each channel separately, e.g. for performing channel mixing where gain must be separately controlled on each channel.",
  "ChapterInformation": "The **ChapterInformation** interface of the represents the metadata for an individual chapter of a media resource (i.e. a video or audio file).",
  "CharacterBoundsUpdateEvent": "The **CharacterBoundsUpdateEvent** interface is a DOM event that represents a request from the operating system to know the bounds of certain characters within an editable region that's attached to an EditContext instance.",
  "CharacterData": "The **CharacterData** abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any objects of type CharacterData: it is implemented by other interfaces like Text, Comment, CDATASection, or ProcessingInstruction, which aren't abstract.",
  "Client": "The Client interface represents an executable context such as a Worker, or a SharedWorker. Window clients are represented by the more-specific WindowClient. You can get Client/WindowClient objects from methods such as Clients.matchAll and Clients.get.",
  "Clients": "The Clients interface provides access to Client objects. Access it via ServiceWorkerGlobalScope.clients within a service worker.",
  "Clipboard": "The **Clipboard** interface of the Clipboard API provides read and write access to the contents of the system clipboard.",
  "Clipboard API": "The **Clipboard API** provides the ability to respond to clipboard commands (cut, copy, and paste), as well as to asynchronously read from and write to the system clipboard.",
  "ClipboardEvent": "The **ClipboardEvent** interface of the Clipboard API represents events providing information related to modification of the clipboard, that is Element/cut_event, Element/copy_event, and Element/paste_event events.",
  "ClipboardItem": "The **ClipboardItem** interface of the Clipboard API represents a single item format, used when reading or writing clipboard data using Clipboard.read() and Clipboard.write() respectively.",
  "CloseEvent": "A CloseEvent is sent to clients using when the connection is closed. This is delivered to the listener indicated by the WebSocket object's onclose attribute.",
  "CloseWatcher": "The CloseWatcher interface allows a custom UI component with open and close semantics to respond to device-specific close actions in the same way as a built-in component.",
  "CommandEvent": "The **CommandEvent** interface represents an event notifying the user when a HTMLButtonElement element with valid HTMLButtonElement.commandForElement and HTMLButtonElement.command attributes is about to invoke an interactive element.",
  "Comment": "The **Comment** interface represents textual notations within markup; although it is generally not visually shown, such comments are available to be read in the source view.",
  "CompositionEvent": "The DOM **CompositionEvent** represents events that occur due to the user indirectly entering text.",
  "Compression Streams API": "The **Compression Streams API** provides a JavaScript API for compressing and decompressing streams of data using the gzip or deflate formats.",
  "CompressionStream": "The **CompressionStream** interface of the is an API for compressing a stream of data.",
  "Compute Pressure API": "The **Compute Pressure API** is a JavaScript API that enables you to observe the pressure of system resources such as the CPU.",
  "console": "The **console** object provides access to the debugging console (e.g., the Web console in Firefox).",
  "Console API": "The Console API provides functionality to allow developers to perform debugging tasks, such as logging messages or the values of variables at set points in your code, or timing how long an operation takes to complete.",
  "ConstantSourceNode": "The ConstantSourceNode interface—part of the Web Audio API—represents an audio source (based upon AudioScheduledSourceNode) whose output is single unchanging value. This makes it useful for cases in which you need a constant value coming in from an audio source. In addition, it can be used like a constructible AudioParam by automating the value of its ConstantSourceNode.offset or by connecting another node to it; see Controlling multiple parameters with ConstantSourceNode.",
  "Contact Picker API": "The Contact Picker API allows users to select entries from their contact list and share limited details of the selected entries with a website or application.",
  "ContactAddress": "The **ContactAddress** interface of the Contact Picker API represents a physical address. Instances of this interface are retrieved from the address property of the objects returned by ContactsManager.getProperties().",
  "ContactsManager": "The **ContactsManager** interface of the Contact Picker API allows users to select entries from their contact list and share limited details of the selected entries with a website or application.",
  "Content Index API": "The **Content Index API** allows developers to register their offline enabled content with the browser.",
  "ContentIndex": "The **ContentIndex** interface of the Content Index API allows developers to register their offline enabled content with the browser.",
  "ContentIndexEvent": "The **ContentIndexEvent** interface of the content index defines the object used to represent the ServiceWorkerGlobalScope.contentdelete_event event.",
  "ContentVisibilityAutoStateChangeEvent": "The **ContentVisibilityAutoStateChangeEvent** interface is the event object for the element/contentvisibilityautostatechange_event event, which fires on any element with set on it when it starts or stops being relevant to the user and skipping its contents.",
  "ConvolverNode": "The ConvolverNode interface is an AudioNode that performs a Linear Convolution on a given AudioBuffer, often used to achieve a reverb effect. A ConvolverNode always has exactly one input and one output.",
  "Cookie Store API": "The **Cookie Store API** is an asynchronous API for managing cookies, available in windows and also service workers.",
  "CookieChangeEvent": "The **CookieChangeEvent** interface of the is the event type of the CookieStore/change_event event fired at a CookieStore when any cookies are created or deleted.",
  "CookieStore": "The **CookieStore** interface of the provides methods for getting and setting cookies asynchronously from either a page or a service worker.",
  "CookieStoreManager": "The **CookieStoreManager** interface of the allows service workers to subscribe to cookie change events. Call CookieStoreManager.subscribe() on a particular service worker registration to receive change events.",
  "CountQueuingStrategy": "The **CountQueuingStrategy** interface of the Streams API provides a built-in chunk counting queuing strategy that can be used when constructing streams.",
  "Credential": "The **Credential** interface of the Credential Management API provides information about an entity (usually a user) normally as a prerequisite to a trust decision.",
  "Credential Management API": "The Credential Management API enables a website to create, store, and retrieve . A credential is an item which enables a system to make an decision: for example, to decide whether to sign a user into an account. We can think of it as a piece of evidence that a user presents to a website to demonstrate that they really are the person they are claiming to be.",
  "CredentialsContainer": "The **CredentialsContainer** interface of the Credential Management API exposes methods to request credentials and notify the user agent when events such as successful sign in or sign out happen. This interface is accessible from Navigator.credentials.",
  "CropTarget": "The **CropTarget** interface of the provides a static method, CropTarget.fromElement_static, which returns a CropTarget instance that can be used to crop a captured video track to the area in which a specified element is rendered.",
  "Crypto": "The **Crypto** interface represents basic cryptography features available in the current context.",
  "CryptoKey": "The **CryptoKey** interface of the Web Crypto API represents a cryptographic obtained from one of the SubtleCrypto methods SubtleCrypto.generateKey, SubtleCrypto.deriveKey, SubtleCrypto.importKey, or SubtleCrypto.unwrapKey.",
  "CryptoKeyPair": "The **CryptoKeyPair** dictionary of the Web Crypto API represents a key pair for an asymmetric cryptography algorithm, also known as a public-key algorithm.",
  "CSPViolationReportBody": "The CSPViolationReportBody interface is an extension of the Reporting API that represents the body of a Content Security Policy (CSP) violation report.",
  "CSS": "The **CSS** interface holds useful CSS-related methods. No objects with this interface are implemented: it contains only static methods and is therefore a utilitarian interface.",
  "CSS Custom Highlight API": "The CSS Custom Highlight API provides a mechanism for styling arbitrary text ranges on a document by using JavaScript to create the ranges, and CSS to style them.",
  "CSS Font Loading API": "The **CSS Font Loading API** provides events and interfaces for dynamically loading font resources.",
  "CSS Object Model (CSSOM)": "The **CSS Object Model** is a set of APIs allowing the manipulation of CSS from JavaScript. It is much like the DOM, but for the CSS rather than the HTML. It allows users to read and modify CSS style dynamically.",
  "CSS Painting API": "The CSS Painting API — part of the CSS Houdini umbrella of APIs — allows developers to write JavaScript functions that can draw directly into an element's background, border, or content.",
  "CSS Properties and Values API": "The **CSS Properties and Values API** — part of the CSS Houdini umbrella of APIs — allows developers to explicitly define their CSS custom properties, allowing for property type checking, default values, and properties that do or do not inherit their value.",
  "CSS Typed Object Model API": "The CSS Typed Object Model API simplifies CSS property manipulation by exposing CSS values as typed JavaScript objects rather than strings. This not only simplifies CSS manipulation, but also lessens the negative impact on performance as compared to HTMLElement.style.",
  "CSSAnimation": "The **CSSAnimation** interface of the represents an Animation object.",
  "CSSConditionRule": "An object implementing the **CSSConditionRule** interface represents a single condition CSS at-rule, which consists of a condition and a statement block.",
  "CSSContainerRule": "The **CSSContainerRule** interface represents a single CSS rule.",
  "CSSCounterStyleRule": "The **CSSCounterStyleRule** interface represents an at-rule.",
  "CSSFontFaceRule": "The **CSSFontFaceRule** interface represents an at-rule.",
  "CSSFontFeatureValuesRule": "The **CSSFontFeatureValuesRule** interface represents an at-rule, letting developers assign for each font face a common name to specify features indices to be used in .",
  "CSSFontPaletteValuesRule": "The **CSSFontPaletteValuesRule** interface represents an at-rule.",
  "CSSGroupingRule": "The **CSSGroupingRule** interface of the CSS Object Model represents any CSS at-rule that contains other rules nested within it.",
  "CSSImageValue": "The **CSSImageValue** interface of the CSS Typed Object Model API represents values for properties that take an image, for example , , or .",
  "CSSImportRule": "The **CSSImportRule** interface represents an at-rule.",
  "CSSKeyframeRule": "The **CSSKeyframeRule** interface describes an object representing a set of styles for a given keyframe. It corresponds to the contents of a single keyframe of a at-rule.",
  "CSSKeyframesRule": "The **CSSKeyframesRule** interface describes an object representing a complete set of keyframes for a CSS animation. It corresponds to the contents of a whole at-rule.",
  "CSSKeywordValue": "The **CSSKeywordValue** interface of the CSS Typed Object Model API creates an object to represent CSS keywords and other identifiers.",
  "CSSLayerBlockRule": "The **CSSLayerBlockRule** represents a block rule.",
  "CSSLayerStatementRule": "The **CSSLayerStatementRule** represents a statement rule. Unlike CSSLayerBlockRule, it doesn't contain other rules and merely defines one or several layers by providing their names.",
  "CSSMathInvert": "The **CSSMathInvert** interface of the CSS Typed Object Model API represents a CSS used as calc(1 / <value>). It inherits properties and methods from its parent CSSNumericValue.",
  "CSSMathMax": "The **CSSMathMax** interface of the CSS Typed Object Model API represents the CSS function. It inherits properties and methods from its parent CSSNumericValue.",
  "CSSMathMin": "The **CSSMathMin** interface of the CSS Typed Object Model API represents the CSS function. It inherits properties and methods from its parent CSSNumericValue.",
  "CSSMathNegate": "The **CSSMathNegate** interface of the CSS Typed Object Model API negates the value passed into it. It inherits properties and methods from its parent CSSNumericValue.",
  "CSSMathProduct": "The **CSSMathProduct** interface of the CSS Typed Object Model API represents the result obtained by calling CSSNumericValue.add, CSSNumericValue.sub, or CSSNumericValue.toSum on CSSNumericValue. It inherits properties and methods from its parent CSSNumericValue.",
  "CSSMathSum": "The **CSSMathSum** interface of the CSS Typed Object Model API represents the result obtained by calling CSSNumericValue.add, CSSNumericValue.sub, or CSSNumericValue.toSum on CSSNumericValue.",
  "CSSMathValue": "The **CSSMathValue** interface of the CSS Typed Object Model API a base class for classes representing complex numeric values.",
  "CSSMatrixComponent": "The **CSSMatrixComponent** interface of the CSS Typed Object Model API represents the matrix() and matrix3d() values of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSMediaRule": "The **CSSMediaRule** interface represents a single CSS rule.",
  "CSSNamespaceRule": "The **CSSNamespaceRule** interface describes an object representing a single CSS at-rule.",
  "CSSNestedDeclarations": "The **CSSNestedDeclarations** interface of the CSS Rule API is used to group nested CSSRules.",
  "CSSNumericArray": "The **CSSNumericArray** interface of the CSS Typed Object Model API contains a list of CSSNumericValue objects.",
  "CSSNumericValue": "The **CSSNumericValue** interface of the CSS Typed Object Model API represents operations that all numeric values can perform.",
  "CSSPageDescriptors": "The **CSSPageDescriptors** interface represents a CSS declaration block for an at-rule.",
  "CSSPageRule": "**CSSPageRule** represents a single CSS rule.",
  "CSSPerspective": "The **CSSPerspective** interface of the CSS Typed Object Model API represents the perspective() value of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSPositionTryDescriptors": "The **CSSPositionTryDescriptors** interface defines properties that represent the list of CSS descriptors that can be set in the body of a at-rule.",
  "CSSPositionTryRule": "The **CSSPositionTryRule** interface describes an object representing a at-rule.",
  "CSSPositionValue": "The **CSSPositionValue** interface of the CSS Typed Object Model API represents values for properties that take a position, for example .",
  "CSSPrimitiveValue": "The **CSSPrimitiveValue** interface derives from the interface and represents the current computed value of a CSS property.",
  "CSSPropertyRule": "The **CSSPropertyRule** interface of the CSS Properties and Values API represents a single CSS rule.",
  "CSSPseudoElement": "The **CSSPseudoElement** interface represents a pseudo-element that may be the target of an event or animated using the . Instances of this interface may be obtained by calling .",
  "CSSRotate": "The **CSSRotate** interface of the CSS Typed Object Model API represents the rotate value of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSRule": "The **CSSRule** interface represents a single CSS rule. There are several types of rules which inherit properties from CSSRule.",
  "CSSRuleList": "A CSSRuleList represents an ordered collection of read-only CSSRule objects.",
  "CSSScale": "The **CSSScale** interface of the CSS Typed Object Model API represents the scale() and scale3d() values of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSScopeRule": "The **CSSScopeRule** interface of the CSS Object Model represents a CSS at-rule.",
  "CSSSkew": "The **CSSSkew** interface of the CSS Typed Object Model API is part of the CSSTransformValue interface. It represents the skew() value of the individual property in CSS.",
  "CSSSkewX": "The **CSSSkewX** interface of the CSS Typed Object Model API represents the skewX() value of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSSkewY": "The **CSSSkewY** interface of the CSS Typed Object Model API represents the skewY() value of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSStartingStyleRule": "The **CSSStartingStyleRule** interface of the CSS Object Model represents a CSS at-rule.",
  "CSSStyleDeclaration": "The **CSSStyleDeclaration** interface represents an object that is a CSS declaration block, and exposes style information and various style-related methods and properties.",
  "CSSStyleRule": "The **CSSStyleRule** interface represents a single CSS style rule.",
  "CSSStyleSheet": "The **CSSStyleSheet** interface represents a single CSS stylesheet, and lets you inspect and modify the list of rules contained in the stylesheet. It inherits properties and methods from its parent, StyleSheet.",
  "CSSStyleValue": "The **CSSStyleValue** interface of the CSS Typed Object Model API is the base class of all CSS values accessible through the Typed OM API. An instance of this class may be used anywhere a string is expected.",
  "CSSSupportsRule": "The **CSSSupportsRule** interface represents a single CSS at-rule.",
  "CSSTransformComponent": "The **CSSTransformComponent** interface of the CSS Typed Object Model API is part of the CSSTransformValue interface.",
  "CSSTransformValue": "The **CSSTransformValue** interface of the CSS Typed Object Model API represents transform-list values as used by the CSS property.",
  "CSSTransition": "The **CSSTransition** interface of the represents an Animation object used for a CSS Transition.",
  "CSSTranslate": "The **CSSTranslate** interface of the CSS Typed Object Model API represents the translate() value of the individual property in CSS. It inherits properties and methods from its parent CSSTransformValue.",
  "CSSUnitValue": "The **CSSUnitValue** interface of the CSS Typed Object Model API represents values that contain a single unit type. For example, \"42px\" would be represented by a CSSNumericValue.",
  "CSSUnparsedValue": "The **CSSUnparsedValue** interface of the CSS Typed Object Model API represents property values that reference custom properties. It consists of a list of string fragments and variable references.",
  "CSSValue": "The **CSSValue** interface represents the current computed value of a CSS property.",
  "CSSValueList": "The **CSSValueList** interface derives from the interface and provides the abstraction of an ordered collection of CSS values.",
  "CSSVariableReferenceValue": "The **CSSVariableReferenceValue** interface of the CSS Typed Object Model API allows you to create a custom name for a built-in CSS value. This object functionality is sometimes called a \"CSS variable\" and serves the same purpose as the function. The custom name must begin with two dashes.",
  "CustomElementRegistry": "The **CustomElementRegistry** interface provides methods for registering custom elements and querying registered elements. To get an instance of it, use the window.customElements property.",
  "CustomEvent": "The **CustomEvent** interface represents events initialized by an application for any purpose.",
  "CustomStateSet": "The **CustomStateSet** interface of the Document Object Model stores a list of states for an autonomous custom element, and allows states to be added and removed from the set.",
  "DataTransfer": "The **DataTransfer** object is used to hold any data transferred between contexts, such as a drag and drop operation, or clipboard read/write. It may hold one or more data items, each of one or more data types.",
  "DataTransferItem": "The **DataTransferItem** object represents one drag data item. During a _drag operation_, each DragEvent has a DragEvent.dataTransfer property which contains a DataTransferItemList of drag data items. Each item in the list is a DataTransferItem object.",
  "DataTransferItemList": "The **DataTransferItemList** object is a list of DataTransferItem objects representing items being dragged. During a _drag operation_, each DragEvent has a DragEvent.dataTransfer property and that property is a DataTransferItemList.",
  "DecompressionStream": "The **DecompressionStream** interface of the is an API for decompressing a stream of data.",
  "DedicatedWorkerGlobalScope": "The **DedicatedWorkerGlobalScope** object (the Worker global scope) is accessible through the WorkerGlobalScope.self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See also: Functions available to workers.",
  "DelayNode": "The **DelayNode** interface represents a delay-line; an AudioNode audio-processing module that causes a delay between the arrival of an input data and its propagation to the output.",
  "DelegatedInkTrailPresenter": "The **DelegatedInkTrailPresenter** interface of the Ink API provides the ability to instruct the OS-level compositor to render ink strokes between pointer event dispatches.",
  "DeprecationReportBody": "The DeprecationReportBody interface of the Reporting API represents the body of a deprecation report.",
  "Device Memory API": "The capabilities of a client device largely depend on the amount of available RAM. Traditionally, developers had to use heuristics and either benchmark a device or infer device capabilities based on other factors like the device manufacturer or User Agent strings.",
  "Device orientation events": "Device orientation events are events that allow you to detect a device's physical orientation, as well as allowing you to detect the device's motion.",
  "Device Posture API": "The **Device Posture API** allows developers to create user interfaces that adapt to a foldable device's posture and respond to posture changes.",
  "DeviceMotionEvent": "The **DeviceMotionEvent** interface of the provides web developers with information about the speed of changes for the device's position and orientation.",
  "DeviceMotionEventAcceleration": "The **DeviceMotionEventAcceleration** interface of the provides information about the amount of acceleration the device is experiencing along all three axes.",
  "DeviceMotionEventRotationRate": "A **DeviceMotionEventRotationRate** interface of the provides information about the rate at which the device is rotating around all three axes.",
  "DeviceOrientationEvent": "The **DeviceOrientationEvent** interface of the provides web developers with information from the physical orientation of the device running the web page.",
  "DevicePosture": "The **DevicePosture** interface of the represents the device's posture, that is, whether the viewport is in a flat or folded state.",
  "DirectoryEntrySync": "The DirectoryEntrySync interface represents a directory in a file system. It includes methods for creating, reading, looking up, and recursively removing files in a directory.",
  "DirectoryReaderSync": "The DirectoryReaderSync interface lets you read the entries in a directory.",
  "Document": "The **Document** interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree.",
  "Document Object Model (DOM)": "The **Document Object Model** (**DOM**) connects web pages to scripts or programming languages by representing the structure of a document—such as the HTML representing a web page—in memory. Usually it refers to JavaScript, even though modeling HTML, SVG, or XML documents as objects are not part of the core JavaScript language.",
  "Document Picture-in-Picture API": "The **Document Picture-in-Picture API** makes it possible to open an always-on-top window that can be populated with arbitrary HTML content — for example a video with custom controls or a set of streams showing the participants of a video conference call. It extends the earlier Picture-in-Picture API for <video>, which specifically enables an HTML element to be put into an always-on-top window.",
  "DocumentFragment": "The **DocumentFragment** interface represents a minimal document object that has no parent.",
  "DocumentPictureInPicture": "The **DocumentPictureInPicture** interface of the is the entry point for creating and handling document picture-in-picture windows.",
  "DocumentPictureInPictureEvent": "The **DocumentPictureInPictureEvent** interface of the is the event object for the DocumentPictureInPicture/enter_event event, which fires when the Picture-in-Picture window is opened.",
  "DocumentTimeline": "The **DocumentTimeline** interface of the Web Animations API represents animation timelines, including the default document timeline (accessed via Document.timeline).",
  "DocumentType": "The **DocumentType** interface represents a Node containing a doctype.",
  "DOMError": "The **DOMError** interface describes an error object that contains an error name.",
  "DOMException": "The **DOMException** interface represents an abnormal event (called an **exception**) that occurs as a result of calling a method or accessing a property of a web API. This is how error conditions are described in web APIs.",
  "DOMHighResTimeStamp": "The **DOMHighResTimeStamp** type is a double and is used to store a time value in milliseconds.",
  "DOMImplementation": "The **DOMImplementation** interface represents an object providing methods which are not dependent on any particular document. Such an object is returned by the Document.implementation property.",
  "DOMMatrix": "The **DOMMatrix** interface represents 4×4 matrices, suitable for 2D and 3D operations including rotation and translation. It is a mutable version of the DOMMatrixReadOnly interface.",
  "DOMMatrixReadOnly": "The **DOMMatrixReadOnly** interface represents a read-only 4×4 matrix, suitable for 2D and 3D operations. The DOMMatrix interface — which is based upon DOMMatrixReadOnly—adds mutability, allowing you to alter the matrix after creating it.",
  "DOMParser": "The **DOMParser** interface provides",
  "DOMPoint": "A **DOMPoint** object represents a 2D or 3D point in a coordinate system; it includes values for the coordinates in up to three dimensions, as well as an optional perspective value. DOMPoint is based on DOMPointReadOnly but allows its properties' values to be changed.",
  "DOMPointReadOnly": "The **DOMPointReadOnly** interface specifies the coordinate and perspective fields used by DOMPoint to define a 2D or 3D point in a coordinate system.",
  "DOMQuad": "A DOMQuad is a collection of four DOMPoints defining the corners of an arbitrary quadrilateral. Returning DOMQuads lets getBoxQuads() return accurate information even when arbitrary 2D or 3D transforms are present. It has a handy bounds attribute returning a DOMRectReadOnly for those cases where you just want an axis-aligned bounding rectangle.",
  "DOMRect": "A **DOMRect** describes the size and position of a rectangle.",
  "DOMRectList": "The **DOMRectList** interface represents a collection of DOMRect objects, typically used to hold the rectangles associated with a particular element, like bounding boxes returned by methods such as Element.getClientRects. It provides access to each rectangle in the list via its index, along with a length property that indicates the total number of rectangles in the list.",
  "DOMRectReadOnly": "The **DOMRectReadOnly** interface specifies the standard properties (also used by DOMRect) to define a rectangle whose properties are immutable.",
  "DOMStringList": "The **DOMStringList** interface is a legacy type returned by some APIs and represents a non-modifiable list of strings (DOMString).",
  "DOMStringMap": "The **DOMStringMap** interface is used for the HTMLElement.dataset attribute, to represent data for custom attributes added to elements.",
  "DOMTokenList": "The **DOMTokenList** interface represents a set of space-separated tokens. Such a set is returned by Element.classList or HTMLLinkElement.relList, and many others.",
  "DragEvent": "The **DragEvent** interface is a DOM event that represents a drag and drop interaction. The user initiates a drag by placing a pointer device (such as a mouse) on the touch surface and then dragging the pointer to a new location (such as another DOM element). Applications are free to interpret a drag and drop interaction in an application-specific way.",
  "DynamicsCompressorNode": "The DynamicsCompressorNode interface provides a compression effect, which lowers the volume of the loudest parts of the signal in order to help prevent clipping and distortion that can occur when multiple sounds are played and multiplexed together at once. This is often used in musical production and game audio. DynamicsCompressorNode is an AudioNode that has exactly one input and one output.",
  "EcdhKeyDeriveParams": "The **EcdhKeyDeriveParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey() and SubtleCrypto.deriveBits(), when using the ECDH or X25519 algorithms.",
  "EcdsaParams": "The **EcdsaParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify() when using the ECDSA algorithm.",
  "EcKeyGenParams": "The **EcKeyGenParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.",
  "EcKeyImportParams": "The **EcKeyImportParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when generating any elliptic-curve-based key pair: that is, when the algorithm is identified as either of ECDSA or ECDH.",
  "EditContext": "The **EditContext** interface represents the text edit context of an element that was made editable by using the .",
  "EditContext API": "The **EditContext API** can be used to build rich text editors on the web that support advanced text input experiences, such as (IME) composition, emoji picker, or any other platform-specific editing-related UI surfaces.",
  "Element": "**Element** is the most general base class from which all element objects (i.e. objects that represent elements) in a inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element.",
  "ElementInternals": "The **ElementInternals** interface of the Document Object Model gives web developers a way to allow custom elements to fully participate in HTML forms. It provides utilities for working with these elements in the same way you would work with any standard HTML form element, and also exposes the Accessibility Object Model to the element.",
  "EncodedAudioChunk": "The **EncodedAudioChunk** interface of the represents a chunk of encoded audio data.",
  "EncodedVideoChunk": "The **EncodedVideoChunk** interface of the represents a chunk of encoded video data.",
  "Encoding API": "The **Encoding API** provides a mechanism for handling text in various , including legacy non- encodings.",
  "Encrypted Media Extensions API": "The **Encrypted Media Extensions API** provides interfaces for controlling the playback of content which is subject to a digital restrictions management scheme.",
  "ErrorEvent": "The **ErrorEvent** interface represents events providing information related to errors in scripts or in files.",
  "Event": "The **Event** interface represents an event which takes place on an EventTarget.",
  "EventCounts": "The **EventCounts** interface of the Performance API provides the number of events that have been dispatched for each event type.",
  "EventSource": "The **EventSource** interface is web content's interface to server-sent events.",
  "EventTarget": "The **EventTarget** interface is implemented by objects that can receive events and may have listeners for them.",
  "EXT_blend_minmax extension": "The **EXT_blend_minmax** extension is part of the WebGL API and extends blending capabilities by adding two new blend equations: the minimum or maximum color components of the source and destination colors.",
  "EXT_color_buffer_float extension": "The **EXT_color_buffer_float** extension is part of WebGL and adds the ability to render a variety of floating point formats.",
  "EXT_color_buffer_half_float extension": "The **EXT_color_buffer_half_float** extension is part of the WebGL API and adds the ability to render to 16-bit floating-point color buffers.",
  "EXT_disjoint_timer_query extension": "The **EXT_disjoint_timer_query** extension is part of the WebGL API and provides a way to measure the duration of a set of GL commands, without stalling the rendering pipeline.",
  "EXT_float_blend extension": "The WebGL API's EXT_float_blend extension allows blending and draw buffers with 32-bit floating-point components.",
  "EXT_frag_depth extension": "The **EXT_frag_depth** extension is part of the WebGL API and enables to set a depth value of a fragment from within the fragment shader.",
  "EXT_shader_texture_lod extension": "The **EXT_shader_texture_lod** extension is part of the WebGL API and adds additional texture functions to the OpenGL ES Shading Language which provide the shader writer with explicit control of LOD (Level of detail).",
  "EXT_sRGB extension": "The **EXT_sRGB** extension is part of the WebGL API and adds sRGB support to textures and framebuffer objects.",
  "EXT_texture_compression_bptc extension": "The EXT_texture_compression_bptc extension is part of the WebGL API and exposes 4 BPTC compressed texture formats. These compression formats are called BC7 and BC6H in Microsoft's DirectX API.",
  "EXT_texture_compression_rgtc extension": "The EXT_texture_compression_rgtc extension is part of the WebGL API and exposes 4 RGTC compressed texture formats. RGTC is a block-based texture compression format suited for unsigned and signed red and red-green textures (**R**ed-**G**reen **T**exture **C**ompression).",
  "EXT_texture_filter_anisotropic extension": "The **EXT_texture_filter_anisotropic** extension is part of the WebGL API and exposes two constants for anisotropic filtering (AF).",
  "EXT_texture_norm16 extension": "The **EXT_texture_norm16** extension is part of the WebGL API and provides a set of new 16-bit signed normalized and unsigned normalized formats (fixed-point texture, renderbuffer and texture buffer).",
  "ExtendableCookieChangeEvent": "The **ExtendableCookieChangeEvent** interface of the is the event type passed to ServiceWorkerGlobalScope/cookiechange_event event fired at the ServiceWorkerGlobalScope when any cookie changes occur which match the service worker's cookie change subscription list. A cookie change event consists of a cookie and a type. (either \"changed\" or \"deleted\")",
  "ExtendableEvent": "The **ExtendableEvent** interface extends the lifetime of the install and activate events dispatched on the global scope as part of the service worker lifecycle. This ensures that any functional events (like FetchEvent) are not dispatched until it upgrades database schemas and deletes the outdated cache entries.",
  "ExtendableMessageEvent": "The **ExtendableMessageEvent** interface of the Service Worker API represents the event object of a ServiceWorkerGlobalScope/message_event event fired on a service worker (when a message is received on the ServiceWorkerGlobalScope from another context) — extends the lifetime of such events.",
  "EyeDropper": "The **EyeDropper** interface represents an instance of an eyedropper tool that can be opened and used by the user to select colors from the screen.",
  "EyeDropper API": "The **EyeDropper API** provides a mechanism for creating an eyedropper tool. Using this tool, users can sample colors from their screens, including outside of the browser window.",
  "FeaturePolicy": "The FeaturePolicy interface represents the set of Permissions Policies applied to the current execution context.",
  "Federated Credential Management (FedCM) API": "The **Federated Credential Management API** (or _FedCM API_) provides a standard mechanism for identity providers (IdPs) to make identity federation services available on the web in a privacy-preserving way, without the need for third-party cookies and redirects. This includes a JavaScript API that enables the use of federated authentication for activities such as signing in or signing up on a website.",
  "FederatedCredential": "The **FederatedCredential** interface of the Credential Management API provides information about credentials from a federated identity provider. A federated identity provider is an entity that a website trusts to correctly authenticate a user, and that provides an API for that purpose. OpenID Connect is an example of a federated identity provider framework.",
  "FederatedCredentialInit": "The **FederatedCredentialInit** dictionary represents the object passed to CredentialsContainer.create() as the value of the federated option: that is, when creating a FederatedCredential object representing a credential associated with a federated identify provider.",
  "Fence": "The **Fence** interface of the contains several functions relevant to functionality.",
  "Fenced Frame API": "The **Fenced Frame API** provides functionality for controlling content embedded in elements.",
  "FencedFrameConfig": "The **FencedFrameConfig** interface represents the navigation of a , i.e. what content will be displayed in it.",
  "Fetch API": "The Fetch API provides an interface for fetching resources (including across the network). It is a more powerful and flexible replacement for .",
  "FetchEvent": "This is the event type for fetch events dispatched on the . It contains information about the fetch, including the request and how the receiver will treat the response. It provides the FetchEvent.respondWith method, which allows us to provide a response to this fetch.",
  "File": "The **File** interface provides information about files and allows JavaScript in a web page to access their content.",
  "File and Directory Entries API": "The File and Directory Entries API provides a way to process directories and file lists provided by the user via a form input or a drag-and-drop operation. It is a more advanced version of the File API, which allows you to work with a single file. It was originally intended to support a full virtual file system, but now only supports read operations on user-provided data.",
  "File API": "The File API enables web applications to access files and their contents.",
  "File System API": "The **File System API** — with extensions provided via the **File System Access API** to access files on the device file system — allows read, write and file management capabilities.",
  "FileEntrySync": "The FileEntrySync interface represents a file in a file system. It lets you write content to a file.",
  "FileList": "The **FileList** interface represents an object of this type returned by the files property of the HTML element; this lets you access the list of files selected with the <input type=\"file\"> element. It's also used for a list of files dropped into web content when using the drag and drop API; see the DataTransfer object for details on this usage.",
  "FileReader": "The **FileReader** interface lets web applications asynchronously read the contents of files (or raw data buffers) stored on the user's computer, using File or Blob objects to specify the file or data to read.",
  "FileReaderSync": "The **FileReaderSync** interface allows to read or objects synchronously. This interface is only available in workers as it enables synchronous I/O that could potentially block.",
  "FileSystem": "The File and Directory Entries API interface **FileSystem** is used to represent a file system. These objects can be obtained from the FileSystemEntry.filesystem property on any file system entry. Some browsers offer additional APIs to create and manage file systems, such as Chrome's Window.requestFileSystem method.",
  "FileSystemChangeRecord": "The **FileSystemChangeRecord** dictionary of the contains details of a single change observed by a FileSystemObserver.",
  "FileSystemDirectoryEntry": "The **FileSystemDirectoryEntry** interface of the File and Directory Entries API represents a directory in a file system. It provides methods which make it possible to access and manipulate the files in a directory, as well as to access the entries within the directory.",
  "FileSystemDirectoryHandle": "The **FileSystemDirectoryHandle** interface of the provides a handle to a file system directory.",
  "FileSystemDirectoryReader": "The FileSystemDirectoryReader interface of the File and Directory Entries API lets you access the FileSystemFileEntry-based objects (generally FileSystemFileEntry or FileSystemDirectoryEntry) representing each entry in a directory.",
  "FileSystemEntry": "The **FileSystemEntry** interface of the File and Directory Entries API represents a single entry in a file system. The entry can be a file or a directory (directories are represented by the FileSystemDirectoryEntry interface). It includes methods for working with files—including copying, moving, removing, and reading files—as well as information about a file it points to—including the file name and its path from the root to the entry.",
  "FileSystemFileEntry": "The **FileSystemFileEntry** interface of the File and Directory Entries API represents a file in a file system. It offers properties describing the file's attributes, as well as the FileSystemFileEntry.file method, which creates a File object that can be used to read the file.",
  "FileSystemFileHandle": "The **FileSystemFileHandle** interface of the represents a handle to a file system entry. The interface is accessed through the window.showOpenFilePicker() method.",
  "FileSystemHandle": "The **FileSystemHandle** interface of the is an object which represents a file or directory entry. Multiple handles can represent the same entry. For the most part you do not work with FileSystemHandle directly but rather its child interfaces FileSystemFileHandle and FileSystemDirectoryHandle.",
  "FileSystemObserver": "The **FileSystemObserver** interface of the provides a mechanism to observe changes to the user-observable file system and the Origin Private File System (OPFS). This means web applications don't have to poll the file system to find changes in the files or folder structure, which can be time-consuming and wasteful.",
  "FileSystemSync": "In the File and Directory Entries API, a FileSystemSync object represents a file system. It has two properties.",
  "FileSystemSyncAccessHandle": "The **FileSystemSyncAccessHandle** interface of the represents a synchronous handle to a file system entry.",
  "FileSystemWritableFileStream": "The **FileSystemWritableFileStream** interface of the is a WritableStream object with additional convenience methods, which operates on a single file on disk. The interface is accessed through the FileSystemFileHandle.createWritable() method.",
  "FocusEvent": "The **FocusEvent** interface represents focus-related events, including Element/focus_event, Element/blur_event, Element/focusin_event, and Element/focusout_event.",
  "FontData": "The **FontData** interface of the represents a single local font face.",
  "FontFace": "The **FontFace** interface of the CSS Font Loading API represents a single usable font face.",
  "FontFaceSet": "The **FontFaceSet** interface of the CSS Font Loading API manages the loading of font-faces and querying of their download status.",
  "FontFaceSetLoadEvent": "The **FontFaceSetLoadEvent** interface of the CSS Font Loading API represents events fired at a FontFaceSet after it starts loading font faces.",
  "Force Touch events": "**Force Touch Events** are a proprietary, Apple-specific feature which makes possible (where supported by the input hardware) new interactions based on how hard the user clicks or presses down on the touchscreen or trackpad.",
  "FormData": "The **FormData** interface provides a way to construct a set of key/value pairs representing form fields and their values, which can be sent using the Window/fetch, XMLHttpRequest.send() or navigator.sendBeacon() methods. It uses the same format a form would use if the encoding type were set to \"multipart/form-data\".",
  "FormDataEvent": "The **FormDataEvent** interface represents a formdata event — such an event is fired on an HTMLFormElement object after the entry list representing the form's data is constructed. This happens when the form is submitted, but can also be triggered by the invocation of a FormData.FormData constructor.",
  "FragmentDirective": "The **FragmentDirective** interface is an object exposed to allow code to check whether or not a browser supports text fragments.",
  "Fullscreen API": "The **Fullscreen API** adds methods to present a specific (and its descendants) in fullscreen mode, and to exit fullscreen mode once it is no longer needed. This makes it possible to present desired content—such as an online game—using the user's entire screen, removing all browser user interface elements and other applications from the screen until fullscreen mode is shut off.",
  "GainNode": "The GainNode interface represents a change in volume. It is an AudioNode audio-processing module that causes a given gain to be applied to the input data before its propagation to the output. A GainNode always has exactly one input and one output, both with the same number of channels.",
  "Gamepad": "The **Gamepad** interface of the Gamepad API defines an individual gamepad or other controller, allowing access to information such as button presses, axis positions, and id.",
  "Gamepad API": "The **Gamepad API** is a way for developers to access and respond to signals from gamepads and other game controllers in a simple, consistent way. It contains three interfaces, two events and one specialist function, to respond to gamepads being connected and disconnected, and to access other information about the gamepads themselves, and what buttons and other controls are currently being pressed.",
  "GamepadButton": "The **GamepadButton** interface defines an individual button of a gamepad or other controller, allowing access to the current state of different types of buttons available on the control device.",
  "GamepadEvent": "The GamepadEvent interface of the Gamepad API contains references to gamepads connected to the system, which is what the gamepad events Window.gamepadconnected_event and Window.gamepaddisconnected_event are fired in response to.",
  "GamepadHapticActuator": "The **GamepadHapticActuator** interface of the Gamepad API represents hardware in the controller designed to provide haptic feedback to the user (if available), most commonly vibration hardware.",
  "GamepadPose": "The **GamepadPose** interface of the Gamepad API represents the pose of a WebVR controller at a given timestamp (which includes orientation, position, velocity, and acceleration information).",
  "Geolocation": "The **Geolocation** interface represents an object able to obtain the position of the device programmatically. It gives Web content access to the location of the device. This allows a website or app to offer customized results based on the user's location.",
  "Geolocation API": "The **Geolocation API** allows the user to provide their location to web applications if they so desire. For privacy reasons, the user is asked for permission to report location information.",
  "GeolocationCoordinates": "The **GeolocationCoordinates** interface represents the position and altitude of the device on Earth, as well as the accuracy with which these properties are calculated.",
  "GeolocationPosition": "The **GeolocationPosition** interface represents the position of the concerned device at a given time. The position, represented by a GeolocationCoordinates object, comprehends the 2D position of the device, on a spheroid representing the Earth, but also its altitude and its speed.",
  "GeolocationPositionError": "The **GeolocationPositionError** interface represents the reason of an error occurring when using the geolocating device.",
  "Geometry interfaces": "**Geometry interfaces** is a CSS module that provides interfaces for working with 3D and 2D graphics — in particular, for working with points, rectangles, quadrilaterals and transformation matrices (for operations that translate/move, scale, rotate, skew/shear/slant, and flip graphics, as well as for multiplying/chaining and inverting/undoing those operations).",
  "GestureEvent": "The **GestureEvent** is a proprietary interface specific to WebKit which gives information regarding multi-touch gestures. Events using this interface include Element/gesturestart_event, Element/gesturechange_event, and Element/gestureend_event.",
  "GPU": "The **GPU** interface of the is the starting point for using WebGPU. It can be used to return a GPUAdapter from which you can request devices, configure features and limits, and more.",
  "GPUAdapter": "The **GPUAdapter** interface of the represents a GPU adapter. From this you can request a GPUDevice, adapter info, features, and limits.",
  "GPUAdapterInfo": "The **GPUAdapterInfo** interface of the contains identifying information about a GPUAdapter.",
  "GPUBindGroup": "The **GPUBindGroup** interface of the is based on a GPUBindGroupLayout and defines a set of resources to be bound together in a group and how those resources are used in shader stages.",
  "GPUBindGroupLayout": "The **GPUBindGroupLayout** interface of the defines the structure and purpose of related GPU resources such as buffers that will be used in a pipeline, and is used as a template when creating GPUBindGroups.",
  "GPUBuffer": "The **GPUBuffer** interface of the represents a block of memory that can be used to store raw data to use in GPU operations.",
  "GPUCanvasContext": "The **GPUCanvasContext** interface of the represents the WebGPU rendering context of a element, returned via an HTMLCanvasElement.getContext() call with a contextType of \"webgpu\".",
  "GPUCommandBuffer": "The **GPUCommandBuffer** interface of the represents a pre-recorded list of GPU commands that can be submitted to a GPUQueue for execution.",
  "GPUCommandEncoder": "The **GPUCommandEncoder** interface of the represents a command encoder, used to encode commands to be issued to the GPU.",
  "GPUCompilationInfo": "The **GPUCompilationInfo** interface of the represents an array of GPUCompilationMessage objects generated by the GPU shader module compiler to help diagnose problems with shader code.",
  "GPUCompilationMessage": "The **GPUCompilationMessage** interface of the represents a single informational, warning, or error message generated by the GPU shader module compiler.",
  "GPUComputePassEncoder": "The **GPUComputePassEncoder** interface of the encodes commands related to controlling the compute shader stage, as issued by a GPUComputePipeline. It forms part of the overall encoding activity of a GPUCommandEncoder.",
  "GPUComputePipeline": "The **GPUComputePipeline** interface of the represents a pipeline that controls the compute shader stage and can be used in a GPUComputePassEncoder.",
  "GPUDevice": "The **GPUDevice** interface of the represents a logical GPU device. This is the main interface through which the majority of WebGPU functionality is accessed.",
  "GPUDeviceLostInfo": "The **GPUDeviceLostInfo** interface of the represents the object returned when the GPUDevice.lost resolves. This provides information as to why a device has been lost.",
  "GPUError": "The **GPUError** interface of the is the base interface for errors surfaced by GPUDevice.popErrorScope and the GPUDevice.uncapturederror_event event.",
  "GPUExternalTexture": "The **GPUExternalTexture** interface of the represents a wrapper object containing an HTMLVideoElement snapshot that can be used as a texture in GPU rendering operations.",
  "GPUInternalError": "The **GPUInternalError** interface of the describes an application error indicating that an operation failed for a system or implementation-specific reason, even when all validation requirements were satisfied.",
  "GPUOutOfMemoryError": "The **GPUOutOfMemoryError** interface of the describes an out-of-memory (oom) error indicating that there was not enough free memory to complete the requested operation.",
  "GPUPipelineError": "The **GPUPipelineError** interface of the describes a pipeline failure. This is the value received when a returned by a GPUDevice.createComputePipelineAsync() or GPUDevice.createRenderPipelineAsync() call rejects.",
  "GPUPipelineLayout": "The **GPUPipelineLayout** interface of the defines the GPUBindGroupLayouts used by a pipeline. GPUBindGroups used with the pipeline during command encoding must have compatible GPUBindGroupLayouts.",
  "GPUQuerySet": "The **GPUQuerySet** interface of the is used to record the results of queries on passes, such as occlusion or timestamp queries.",
  "GPUQueue": "The **GPUQueue** interface of the controls execution of encoded commands on the GPU.",
  "GPURenderBundle": "The **GPURenderBundle** interface of the represents a container for pre-recorded bundles of commands.",
  "GPURenderBundleEncoder": "The **GPURenderBundleEncoder** interface of the is used to pre-record bundles of commands.",
  "GPURenderPassEncoder": "The **GPURenderPassEncoder** interface of the encodes commands related to controlling the vertex and fragment shader stages, as issued by a GPURenderPipeline. It forms part of the overall encoding activity of a GPUCommandEncoder.",
  "GPURenderPipeline": "The **GPURenderPipeline** interface of the represents a pipeline that controls the vertex and fragment shader stages and can be used in a GPURenderPassEncoder or GPURenderBundleEncoder.",
  "GPUSampler": "The **GPUSampler** interface of the represents an object that can control how shaders transform and filter texture resource data.",
  "GPUShaderModule": "The **GPUShaderModule** interface of the represents an internal shader module object, a container for WGSL shader code that can be submitted to the GPU for execution by a pipeline.",
  "GPUSupportedFeatures": "The **GPUSupportedFeatures** interface of the is a Set-like object that describes additional functionality supported by a GPUAdapter.",
  "GPUSupportedLimits": "The **GPUSupportedLimits** interface of the describes the limits supported by a GPUAdapter.",
  "GPUTexture": "The **GPUTexture** interface of the represents a container used to store 1D, 2D, or 3D arrays of data, such as images, to use in GPU rendering operations.",
  "GPUTextureView": "The **GPUTextureView** interface of the represents a view into a subset of the texture resources defined by a particular GPUTexture.",
  "GPUUncapturedErrorEvent": "The **GPUUncapturedErrorEvent** interface of the is the event object type for the GPUDevice GPUDevice.uncapturederror_event event, used for telemetry and to report unexpected errors.",
  "GPUValidationError": "The **GPUValidationError** interface of the describes an application error indicating that an operation did not pass the WebGPU API's validation constraints.",
  "GravitySensor": "The **GravitySensor** interface of the Sensor APIs provides on each reading the gravity applied to the device along all three axes.",
  "Gyroscope": "The **Gyroscope** interface of the Sensor APIs provides on each reading the angular velocity of the device along all three axes.",
  "HashChangeEvent": "The **HashChangeEvent** interface represents events that fire when the fragment identifier of the URL has changed.",
  "Headers": "The **Headers** interface of the Fetch API allows you to perform various actions on HTTP request and response headers. These actions include retrieving, setting, adding to, and removing headers from the list of the request's headers.",
  "HID": "The **HID** interface provides methods for connecting to _HID devices_, listing attached HID devices and event handlers for connected HID devices.",
  "HIDConnectionEvent": "The **HIDConnectionEvent** interface of the WebHID API represents HID connection events, and is the event type passed to HID/connect_event and HID/disconnect_event event handlers when a device's connection state changes.",
  "HIDDevice": "The **HIDDevice** interface of the WebHID API represents a HID Device. It provides properties for accessing information about the device, methods for opening and closing the connection, and the sending and receiving of reports.",
  "HIDInputReportEvent": "The **HIDInputReportEvent** interface of the WebHID API is passed to HIDDevice.inputreport_event event of HIDDevice when an input report is received from any associated HID device.",
  "Highlight": "The **Highlight** interface of the CSS Custom Highlight API is used to represent a collection of Range instances to be styled using the API.",
  "HighlightRegistry": "The **HighlightRegistry** interface of the CSS Custom Highlight API is used to register Highlight objects to be styled using the API.",
  "History": "The **History** interface of the allows manipulation of the browser _session history_, that is the pages visited in the tab or frame that the current page is loaded in.",
  "History API": "The **History API** provides access to the browser's session history (not to be confused with WebExtensions history) through the global object. It exposes useful methods and properties that let you navigate back and forth through the user's history, and manipulate the contents of the history stack.",
  "HkdfParams": "The **HkdfParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the HKDF algorithm.",
  "HmacImportParams": "The **HmacImportParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when generating a key for the HMAC algorithm.",
  "HmacKeyGenParams": "The **HmacKeyGenParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating a key for the HMAC algorithm.",
  "HMDVRDevice": "The **HMDVRDevice** interface of the WebVR API represents a head mounted display, providing access to information about each eye, and allowing us to modify the current field of view.",
  "Houdini APIs": "Houdini is a set of low-level APIs that exposes parts of the CSS engine,",
  "The HTML DOM API": "The **HTML DOM API** is made up of the interfaces that define the functionality of each of the in , as well as any supporting types and interfaces they rely upon.",
  "HTML Drag and Drop API": "**HTML Drag and Drop** interfaces enable applications to use drag-and-drop features in browsers.",
  "HTMLAllCollection": "The **HTMLAllCollection** interface represents a collection of _all_ of the document's elements, accessible by index (like an array) and by the element's id. It is returned by the document.all property.",
  "HTMLAnchorElement": "The **HTMLAnchorElement** interface represents hyperlink elements and provides special properties and methods (beyond those of the regular HTMLElement object interface that they inherit from) for manipulating the layout and presentation of such elements. This interface corresponds to <a> element; not to be confused with <link>, which is represented by HTMLLinkElement.",
  "HTMLAreaElement": "The **HTMLAreaElement** interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of elements.",
  "HTMLAudioElement": "The **HTMLAudioElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "HTMLBaseElement": "The **HTMLBaseElement** interface contains the base URI for a document. This object inherits all of the properties and methods as described in the HTMLElement interface.",
  "HTMLBodyElement": "The **HTMLBodyElement** interface provides special properties (beyond those inherited from the regular interface) for manipulating elements.",
  "HTMLBRElement": "The **HTMLBRElement** interface represents an HTML line break element (). It inherits from HTMLElement.",
  "HTMLButtonElement": "The **HTMLButtonElement** interface provides properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLCanvasElement": "The **HTMLCanvasElement** interface provides properties and methods for manipulating the layout and presentation of elements. The HTMLCanvasElement interface also inherits the properties and methods of the HTMLElement interface.",
  "HTMLCollection": "The **HTMLCollection** interface represents a generic collection (array-like object similar to ) of elements (in document order) and offers methods and properties for selecting from the list.",
  "HTMLDataElement": "The **HTMLDataElement** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLDataListElement": "The **HTMLDataListElement** interface provides special properties (beyond the HTMLElement object interface it also has available to it by inheritance) to manipulate elements and their content.",
  "HTMLDetailsElement": "The **HTMLDetailsElement** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLDialogElement": "The **HTMLDialogElement** interface provides methods to manipulate elements. It inherits properties and methods from the HTMLElement interface.",
  "HTMLDivElement": "The **HTMLDivElement** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLDListElement": "The **HTMLDListElement** interface provides special properties (beyond those of the regular HTMLElement interface it also has available to it by inheritance) for manipulating definition list () elements.",
  "HTMLDocument": "For historical reasons, Window objects have a window.HTMLDocument property whose value is the interface. So you can think of HTMLDocument as an alias for , and you can find documentation for HTMLDocument members under the documentation for the interface.",
  "HTMLElement": "The **HTMLElement** interface represents any HTML element. Some elements directly implement this interface, while others implement it via an interface that inherits it.",
  "HTMLEmbedElement": "The **HTMLEmbedElement** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLFencedFrameElement": "The **HTMLFencedFrameElement** interface represents a element in JavaScript and provides configuration properties.",
  "HTMLFieldSetElement": "The **HTMLFieldSetElement** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of elements.",
  "HTMLFontElement": "Implements the document object model (DOM) representation of the font element. The HTML Font Element defines the font size, font face and color of text.",
  "HTMLFormControlsCollection": "The **HTMLFormControlsCollection** interface represents a _collection_ of HTML _form control elements_, returned by the HTMLFormElement interface's HTMLFormElement.elements property.",
  "HTMLFormElement": "The **HTMLFormElement** interface represents a element in the DOM. It allows access to—and, in some cases, modification of—aspects of the form, as well as access to its component elements.",
  "HTMLFrameSetElement": "The **HTMLFrameSetElement** interface provides special properties (beyond those of the regular HTMLElement interface they also inherit) for manipulating elements.",
  "HTMLHeadElement": "The **HTMLHeadElement** interface contains the descriptive information, or metadata, for a document. This object inherits all of the properties and methods described in the HTMLElement interface.",
  "HTMLHeadingElement": "The **HTMLHeadingElement** interface represents the different heading elements, <h1> through <h6>. It inherits methods and properties from the HTMLElement interface.",
  "HTMLHRElement": "The **HTMLHRElement** interface provides special properties (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLHtmlElement": "The **HTMLHtmlElement** interface serves as the root node for a given HTML document. This object inherits the properties and methods described in the HTMLElement interface.",
  "HTMLIFrameElement": "The **HTMLIFrameElement** interface provides special properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of inline frame elements.",
  "HTMLImageElement": "The **HTMLImageElement** interface represents an HTML element, providing the properties and methods used to manipulate image elements.",
  "HTMLInputElement": "The **HTMLInputElement** interface provides special properties and methods for manipulating the options, layout, and presentation of elements.",
  "HTMLLabelElement": "The **HTMLLabelElement** interface gives access to properties specific to elements. It inherits methods and properties from the base HTMLElement interface.",
  "HTMLLegendElement": "The **HTMLLegendElement** is an interface allowing to access properties of the elements. It inherits properties and methods from the HTMLElement interface.",
  "HTMLLIElement": "The **HTMLLIElement** interface exposes specific properties and methods (beyond those defined by regular HTMLElement interface it also has available to it by inheritance) for manipulating list elements.",
  "HTMLLinkElement": "The **HTMLLinkElement** interface represents reference information for external resources and the relationship of those resources to a document and vice versa (corresponds to <link> element; not to be confused with <a>, which is represented by HTMLAnchorElement). This object inherits all of the properties and methods of the HTMLElement interface.",
  "HTMLMapElement": "The **HTMLMapElement** interface provides special properties and methods (beyond those of the regular object HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of map elements.",
  "HTMLMarqueeElement": "The **HTMLMarqueeElement** interface provides methods to manipulate elements.",
  "HTMLMediaElement": "The **HTMLMediaElement** interface adds to HTMLElement the properties and methods needed to support basic media-related capabilities that are common to audio and video.",
  "HTMLMenuElement": "The **HTMLMenuElement** interface provides additional properties (beyond those inherited from the HTMLElement interface) for manipulating a element.",
  "HTMLMetaElement": "The **HTMLMetaElement** interface contains descriptive metadata about a document provided in HTML as <meta> elements.",
  "HTMLMeterElement": "The HTML elements expose the **HTMLMeterElement** interface, which provides special properties and methods (beyond the HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of elements.",
  "HTMLModElement": "The **HTMLModElement** interface provides special properties (beyond the regular methods and properties available through the HTMLElement interface they also have available to them by inheritance) for manipulating modification elements, that is and .",
  "HTMLObjectElement": "The **HTMLObjectElement** interface provides special properties and methods (beyond those on the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of element, representing external resources.",
  "HTMLOListElement": "The **HTMLOListElement** interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating ordered list elements.",
  "HTMLOptGroupElement": "The **HTMLOptGroupElement** interface provides special properties and methods (beyond the regular HTMLElement object interface they also have available to them by inheritance) for manipulating the layout and presentation of elements.",
  "HTMLOptionElement": "The **HTMLOptionElement** interface represents elements and inherits all properties and methods of the HTMLElement interface.",
  "HTMLOptionsCollection": "The **HTMLOptionsCollection** interface represents a collection of <option> HTML elements (in document order) and offers methods and properties for selecting from the list as well as optionally altering its items. This object is returned only by the options property of select.",
  "HTMLOutputElement": "The **HTMLOutputElement** interface provides properties and methods (beyond those inherited from HTMLElement) for manipulating the layout and presentation of elements.",
  "HTMLParagraphElement": "The **HTMLParagraphElement** interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating elements.",
  "HTMLParamElement": "The **HTMLParamElement** interface provides special properties (beyond those of the regular HTMLElement object interface it inherits) for manipulating elements, representing a pair of a key and a value that acts as a parameter for an element.",
  "HTMLPictureElement": "The **HTMLPictureElement** interface represents a HTML element. It doesn't implement specific properties or methods.",
  "HTMLPreElement": "The **HTMLPreElement** interface exposes specific properties and methods (beyond those of the HTMLElement interface it also has available to it by inheritance) for manipulating a block of preformatted text ().",
  "HTMLProgressElement": "The **HTMLProgressElement** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of elements.",
  "HTMLQuoteElement": "The **HTMLQuoteElement** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating quoting elements, like and , but not the element.",
  "HTMLScriptElement": "HTML elements expose the **HTMLScriptElement** interface, which provides special properties and methods for manipulating the behavior and execution of <script> elements (beyond the inherited HTMLElement interface).",
  "HTMLSelectElement": "The **HTMLSelectElement** interface represents a HTML Element. These elements also share all of the properties and methods of other HTML elements via the HTMLElement interface.",
  "HTMLSlotElement": "The **HTMLSlotElement** interface of the Shadow DOM API enables access to the name and assigned nodes of an HTML element.",
  "HTMLSourceElement": "The **HTMLSourceElement** interface provides special properties (beyond the regular HTMLElement object interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLSpanElement": "The **HTMLSpanElement** interface represents a element and derives from the interface, but without implementing any additional properties or methods.",
  "HTMLStyleElement": "The **HTMLStyleElement** interface represents a element. It inherits properties and methods from its parent, HTMLElement.",
  "HTMLTableCaptionElement": "The **HTMLTableCaptionElement** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating table elements.",
  "HTMLTableCellElement": "The **HTMLTableCellElement** interface provides special properties and methods (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of table cells, either header cells () or data cells (), in an HTML document.",
  "HTMLTableColElement": "The **HTMLTableColElement** interface provides properties for manipulating single or grouped table column elements.",
  "HTMLTableElement": "The **HTMLTableElement** interface provides special properties and methods (beyond the regular object interface it also has available to it by inheritance) for manipulating the layout and presentation of tables in an HTML document.",
  "HTMLTableRowElement": "The **HTMLTableRowElement** interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of rows in an HTML table.",
  "HTMLTableSectionElement": "The **HTMLTableSectionElement** interface provides special properties and methods (beyond the HTMLElement interface it also has available to it by inheritance) for manipulating the layout and presentation of sections, that is headers, footers and bodies (, , and , respectively) in an HTML table.",
  "HTMLTemplateElement": "The **HTMLTemplateElement** interface enables access to the contents of an HTML element.",
  "HTMLTextAreaElement": "The **HTMLTextAreaElement** interface provides properties and methods for manipulating the layout and presentation of elements.",
  "HTMLTimeElement": "The **HTMLTimeElement** interface provides special properties (beyond the regular HTMLElement interface it also has available to it by inheritance) for manipulating elements.",
  "HTMLTitleElement": "The **HTMLTitleElement** interface is implemented by a document's . This element inherits all of the properties and methods of the HTMLElement interface.",
  "HTMLTrackElement": "The **HTMLTrackElement** interface represents an element within the . This element can be used as a child of either or to specify a text track containing information such as closed captions or subtitles.",
  "HTMLUListElement": "The **HTMLUListElement** interface provides special properties (beyond those defined on the regular HTMLElement interface it also has available to it by inheritance) for manipulating unordered list () elements.",
  "HTMLUnknownElement": "The **HTMLUnknownElement** interface represents an invalid HTML element and derives from the interface, but without implementing any additional properties or methods.",
  "HTMLVideoElement": "Implemented by the element, the **HTMLVideoElement** interface provides special properties and methods for manipulating video objects. It also inherits properties and methods of HTMLMediaElement and HTMLElement.",
  "IDBCursor": "The **IDBCursor** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database.",
  "IDBCursorWithValue": "The **IDBCursorWithValue** interface of the IndexedDB API represents a cursor for traversing or iterating over multiple records in a database. It is the same as the IDBCursor, except that it includes the value property.",
  "IDBDatabase": "The **IDBDatabase** interface of the IndexedDB API provides a connection to a database; you can use an IDBDatabase object to open a transaction on your database then create, manipulate, and delete objects (data) in that database. The interface provides the only way to get and manage versions of the database.",
  "IDBFactory": "The **IDBFactory** interface of the IndexedDB API lets applications asynchronously access the indexed databases. The object that implements the interface is window.indexedDB. You open — that is, create and access — and delete a database with this object, and not directly with IDBFactory.",
  "IDBIndex": "IDBIndex interface of the IndexedDB API provides asynchronous access to an index in a database. An index is a kind of object store for looking up records in another object store, called the referenced object store. You use this interface to retrieve data.",
  "IDBKeyRange": "The **IDBKeyRange** interface of the IndexedDB API represents a continuous interval over some data type that is used for keys. Records can be retrieved from IDBObjectStore and IDBIndex objects using keys or a range of keys. You can limit the range using lower and upper bounds. For example, you can iterate over all values of a key in the value range A–Z.",
  "IDBObjectStore": "The **IDBObjectStore** interface of the IndexedDB API represents an object store in a database. Records within an object store are sorted according to their keys. This sorting enables fast insertion, look-up, and ordered retrieval.",
  "IDBOpenDBRequest": "The **IDBOpenDBRequest** interface of the IndexedDB API provides access to the results of requests to open or delete databases (performed using IDBFactory.open and IDBFactory.deleteDatabase), using specific event handler attributes.",
  "IDBRequest": "The **IDBRequest** interface of the IndexedDB API provides access to results of asynchronous requests to databases and database objects using event handler attributes. Each reading and writing operation on a database is done using a request.",
  "IDBTransaction": "The **IDBTransaction** interface of the IndexedDB API provides a static, asynchronous transaction on a database using event handler attributes. All reading and writing of data is done within transactions. You use IDBDatabase to start transactions, IDBTransaction to set the mode of the transaction (e.g. is it readonly or readwrite), and you access an IDBObjectStore to make a request. You can also use an IDBTransaction object to abort transactions.",
  "IDBVersionChangeEvent": "The **IDBVersionChangeEvent** interface of the IndexedDB API indicates that the version of the database has changed, as the result of an IDBOpenDBRequest.upgradeneeded_event event handler function.",
  "IdentityCredential": "The **IdentityCredential** interface of the Federated Credential Management API (FedCM) represents a user identity credential arising from a successful federated sign-in.",
  "IdentityCredentialRequestOptions": "The **IdentityCredentialRequestOptions** dictionary represents the object passed to CredentialsContainer.get() as the value of the identity option.",
  "IdentityProvider": "The **IdentityProvider** interface of the Federated Credential Management (FedCM) API represents an identity provider (IdP) and provides access to related information and functionality.",
  "Idle Detection API": "The Idle Detection API provides a means to detect the user's idle status, active, idle, and locked, specifically, and to be notified of changes to idle status without polling from a script.",
  "IdleDeadline": "The IdleDeadline interface is used as the data type of the input parameter to idle callbacks established by calling Window.requestIdleCallback(). It offers a method, IdleDeadline.timeRemaining, which lets you determine how much longer the user agent estimates it will remain idle and a property, IdleDeadline.didTimeout, which lets you determine if your callback is executing because its timeout duration expired.",
  "IdleDetector": "The **IdleDetector** interface of the provides methods and events for detecting user activity on a device or screen.",
  "IIRFilterNode": "The **IIRFilterNode** interface of the Web Audio API is a AudioNode processor which implements a general **infinite impulse response** (IIR) filter; this type of filter can be used to implement tone control devices and graphic equalizers as well. It lets the parameters of the filter response be specified, so that it can be tuned as needed.",
  "ImageBitmap": "The **ImageBitmap** interface represents a bitmap image which can be drawn to a without undue latency. It can be created from a variety of source objects using the Window.createImageBitmap() or WorkerGlobalScope.createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL.",
  "ImageBitmapRenderingContext": "The **ImageBitmapRenderingContext** interface is a canvas rendering context that provides the functionality to replace the canvas's contents with the given ImageBitmap. Its context id (the first argument to HTMLCanvasElement.getContext() or OffscreenCanvas.getContext()) is \"bitmaprenderer\".",
  "ImageCapture": "The **ImageCapture** interface of the MediaStream Image Capture API provides methods to enable the capture of images or photos from a camera or other photographic device. It provides an interface for capturing images from a photographic device referenced through a valid MediaStreamTrack.",
  "ImageData": "The **ImageData** interface represents the underlying pixel data of an area of a element.",
  "ImageDecoder": "The **ImageDecoder** interface of the provides a way to unpack and decode encoded image data.",
  "ImageTrack": "The **ImageTrack** interface of the represents an individual image track.",
  "ImageTrackList": "The **ImageTrackList** interface of the represents a list of image tracks.",
  "IndexedDB API": "IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data. While Web Storage is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data. IndexedDB provides a solution. This is the main landing page for MDN's IndexedDB coverage — here we provide links to the full API reference and usage guides, browser support details, and some explanation of key concepts.",
  "Ink": "The **Ink** interface of the Ink API provides access to DelegatedInkTrailPresenter objects for the application to use to render ink strokes.",
  "Ink API": "The Ink API allows browsers to directly make use of available OS-level compositors when drawing pen strokes in an inking app feature, thereby reducing latency and increasing performance.",
  "InputDeviceCapabilities": "The **InputDeviceCapabilities** interface of the provides information about the physical device or a group of related devices responsible for generating input events. Events caused by the same physical input device get the same instance of this object, but the converse isn't true. For example, two mice with the same capabilities in a system may appear as a single InputDeviceCapabilities instance.",
  "InputDeviceCapabilities API": "The InputDeviceCapabilities API provides details about the underlying sources of input events. The API attempts to describe how the device behaves rather than what it is. For example, the first version of the API indicates whether a device fires touch events rather than whether it is a touch screen.",
  "InputDeviceInfo": "The **InputDeviceInfo** interface of the gives access to the capabilities of the input device that it represents.",
  "InputEvent": "The **InputEvent** interface represents an event notifying the user of editable content changes.",
  "Insertable Streams for MediaStreamTrack API": "The **Insertable Streams for MediaStreamTrack API** provides a method of adding new components to a MediaStreamTrack.",
  "InstallEvent": "The parameter passed into an event handler function, the InstallEvent interface represents an install action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker. As a child of ExtendableEvent, it ensures that functional events such as FetchEvent are not dispatched during installation.",
  "Intersection Observer API": "The Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's .",
  "IntersectionObserver": "The **IntersectionObserver** interface of the Intersection Observer API provides a way to asynchronously observe changes in the intersection of a target element with an ancestor element or with a top-level document's . The ancestor element or viewport is referred to as the root.",
  "IntersectionObserverEntry": "The **IntersectionObserverEntry** interface of the Intersection Observer API describes the intersection between the target element and its root container at a specific moment of transition.",
  "InterventionReportBody": "The InterventionReportBody interface of the Reporting API represents the body of an intervention report.",
  "Invoker Commands API": "The **Invoker Commands API** provides a way to declaratively assign behaviors to buttons, allowing control of interactive elements when the button is enacted (clicked or invoked via a keypress, such as the spacebar or return key).",
  "Keyboard": "The **Keyboard** interface of the provides functions that retrieve keyboard layout maps and toggle capturing of key presses from the physical keyboard.",
  "Keyboard API": "The Keyboard API provides methods for working with a physical keyboard that is attached to a device running a browser.",
  "KeyboardEvent": "**KeyboardEvent** objects describe a user interaction with the keyboard; each event describes a single interaction between the user and a key (or combination of a key with modifier keys) on the keyboard. The event type (Element/keydown_event, Element/keypress_event, or Element/keyup_event) identifies what kind of keyboard activity occurred.",
  "KeyboardLayoutMap": "The **KeyboardLayoutMap** interface of the is a read-only object with functions for retrieving the string associated with specific physical keys.",
  "KeyframeEffect": "The **KeyframeEffect** interface of the Web Animations API lets us create sets of animatable properties and values, called **keyframes.** These can then be played using the Animation.Animation constructor.",
  "KHR_parallel_shader_compile extension": "The **KHR_parallel_shader_compile** extension is part of the WebGL API and enables a non-blocking poll operation, so that compile/link status availability (COMPLETION_STATUS_KHR) can be queried without potentially incurring stalls. In other words you can check the status of your shaders compiling without blocking the runtime.",
  "LargestContentfulPaint": "The LargestContentfulPaint interface provides timing information about the largest image or text paint before user input on a web page.",
  "Launch Handler API": "The **Launch Handler API** allows developers to control how a progressive web app (PWA) is launched — for example if it uses an existing window or creates a new one, and how the app's target launch URL is handled.",
  "LaunchParams": "The **LaunchParams** interface of the is used when implementing custom launch navigation handling in a PWA. When LaunchQueue.setConsumer is invoked to set up the launch navigation handling functionality, the callback function inside setConsumer() is passed a LaunchParams object instance.",
  "LaunchQueue": "The **LaunchQueue** interface of the is available via the Window.launchQueue property. When a progressive web app (PWA) is launched with a launch_handler client_mode value of focus-existing, navigate-new, or navigate-existing, LaunchQueue provides access to functionality that allows custom launch navigation handling to be implemented in the PWA. This functionality is controlled by the properties of the LaunchParams object passed into the LaunchQueue.setConsumer callback function.",
  "LayoutShift": "The LayoutShift interface of the Performance API provides insights into the layout stability of web pages based on movements of the elements on the page.",
  "LayoutShiftAttribution": "The LayoutShiftAttribution interface provides debugging information about elements which have shifted.",
  "LinearAccelerationSensor": "The **LinearAccelerationSensor** interface of the Sensor APIs provides on each reading the acceleration applied to the device along all three axes, but without the contribution of gravity.",
  "Local Font Access API": "The **Local Font Access API** provides a mechanism to access the user's locally installed font data — this includes higher-level details such as names, styles, and families, as well as the raw bytes of the underlying font files.",
  "Location": "The **Location** interface represents the location (URL) of the object it is linked to. Changes done on it are reflected on the object it relates to. Both the Document and Window interface have such a linked Location, accessible via Document.location and Window.location respectively.",
  "Lock": "The **Lock** interface of the Web Locks API provides the name and mode of a lock.",
  "LockManager": "The **LockManager** interface of the Web Locks API provides methods for requesting a new Lock object and querying for an existing Lock object. To get an instance of LockManager, call navigator.locks.",
  "Magnetometer": "The **Magnetometer** interface of the Sensor APIs provides information about the magnetic field as detected by the device's primary magnetometer sensor.",
  "MathMLElement": "The **MathMLElement** interface represents any MathML element.",
  "Media Capabilities API": "The **Media Capabilities API** allows developers to determine decoding and encoding abilities of the device, exposing information such as whether media is supported and whether playback should be smooth and power efficient, with real time feedback about playback to better enable adaptive streaming, and access to display property information.",
  "Media Capture and Streams API (Media Stream)": "The **Media Capture and Streams** API, often called the **Media Streams API** or **MediaStream API**, is an API related to WebRTC which provides support for streaming audio and video data.",
  "Media Session API": "The **Media Session API** provides a way to customize media notifications. It does this by providing metadata for display by the user agent for the media your web app is playing.",
  "Media Source API": "The **Media Source API**, formally known as **Media Source Extensions** (**MSE**), provides functionality enabling plugin-free web-based streaming media. Using MSE, media streams can be created via JavaScript, and played using and elements.",
  "MediaCapabilities": "The **MediaCapabilities** interface of the Media Capabilities API provides information about the decoding abilities of the device, system and browser. The API can be used to query the browser about the decoding abilities of the device based on codecs, profile, resolution, and bitrates. The information can be used to serve optimal media streams to the user and determine if playback should be smooth and power efficient.",
  "MediaDeviceInfo": "The **MediaDeviceInfo** interface of the contains information that describes a single media input or output device.",
  "MediaDevices": "The **MediaDevices** interface of the provides access to connected media input devices like cameras and microphones, as well as screen sharing. In essence, it lets you obtain access to any hardware source of media data.",
  "MediaElementAudioSourceNode": "The MediaElementAudioSourceNode interface represents an audio source consisting of an HTML or element. It is an AudioNode that acts as an audio source.",
  "MediaEncryptedEvent": "The **MediaEncryptedEvent** interface of the Encrypted Media Extensions API contains the information associated with an HTMLMediaElement/encrypted_event event sent to a HTMLMediaElement when some initialization data is encountered in the media.",
  "MediaError": "The **MediaError** interface represents an error which occurred while handling media in an HTML media element based on HTMLMediaElement, such as or .",
  "MediaKeyMessageEvent": "The **MediaKeyMessageEvent** interface of the Encrypted Media Extensions API contains the content and related data when the content decryption module generates a message for the session.",
  "MediaKeys": "The **MediaKeys** interface of Encrypted Media Extensions API represents a set of keys that an associated HTMLMediaElement can use for decryption of media data during playback.",
  "MediaKeySession": "The **MediaKeySession** interface of the Encrypted Media Extensions API represents a context for message exchange with a content decryption module (CDM).",
  "MediaKeyStatusMap": "The **MediaKeyStatusMap** interface of the Encrypted Media Extensions API is a read-only map of media key statuses by key IDs.",
  "MediaKeySystemAccess": "The **MediaKeySystemAccess** interface of the Encrypted Media Extensions API provides access to a Key System for decryption and/or a content protection provider. You can request an instance of this object using the Navigator.requestMediaKeySystemAccess method.",
  "MediaList": "The **MediaList** interface represents the media queries of a stylesheet, e.g. those set using a element's media attribute.",
  "MediaMetadata": "The **MediaMetadata** interface of the allows a web page to provide rich media metadata for display in a platform UI.",
  "MediaQueryList": "A **MediaQueryList** object stores information on a media query applied to a document, with support for both immediate and event-driven matching against the state of the document.",
  "MediaQueryListEvent": "The MediaQueryListEvent object stores information on the changes that have happened to a object — instances are available as the event object on a function referenced by a event.",
  "MediaRecorder": "The **MediaRecorder** interface of the MediaStream Recording API provides functionality to easily record media. It is created using the MediaRecorder.MediaRecorder constructor.",
  "MediaRecorderErrorEvent": "The **MediaRecorderErrorEvent** interface represents errors returned by the MediaStream Recording API. It is an Event object that encapsulates a reference to a DOMException describing the error that occurred.",
  "MediaSession": "The **MediaSession** interface of the allows a web page to provide custom behaviors for standard media playback interactions, and to report metadata that can be sent by the user agent to the device or operating system for presentation in standardized user interface elements.",
  "MediaSource": "The **MediaSource** interface of the represents a source of media data for an HTMLMediaElement object. A MediaSource object can be attached to a HTMLMediaElement to be played in the user agent.",
  "MediaSourceHandle": "The **MediaSourceHandle** interface of the is a proxy for a MediaSource that can be transferred from a dedicated worker back to the main thread and attached to a media element via its HTMLMediaElement.srcObject property. MediaSource objects are not transferable because they are event targets, hence the need for MediaSourceHandles.",
  "MediaStream": "The **MediaStream** interface of the represents a stream of media content. A stream consists of several **tracks**, such as video or audio tracks. Each track is specified as an instance of MediaStreamTrack.",
  "MediaStream Image Capture API": "The **MediaStream Image Capture API** is an API for capturing images or videos from a photographic device. In addition to capturing data, it also allows you to retrieve information about device capabilities such as image size, red-eye reduction and whether or not there is a flash and what they are currently set to. Conversely, the API allows the capabilities to be configured within the constraints what the device allows.",
  "MediaStream Recording API": "The **MediaStream Recording API**, sometimes referred to as the _Media Recording API_ or the _MediaRecorder API_, is closely affiliated with the Media Capture and Streams API and the WebRTC API. The MediaStream Recording API makes it possible to capture the data generated by a MediaStream or HTMLMediaElement object for analysis, processing, or saving to disk. It's also surprisingly easy to work with.",
  "MediaStreamAudioDestinationNode": "The MediaStreamAudioDestinationNode interface represents an audio destination consisting of a WebRTC MediaStream with a single AudioMediaStreamTrack, which can be used in a similar way to a MediaStream obtained from MediaDevices.getUserMedia.",
  "MediaStreamAudioSourceNode": "The **MediaStreamAudioSourceNode** interface is a type of AudioNode which operates as an audio source whose media is received from a MediaStream obtained using the WebRTC or Media Capture and Streams APIs.",
  "MediaStreamEvent": "The **MediaStreamEvent** interface represents events that occurs in relation to a MediaStream. Two events of this type can be thrown: RTCPeerConnection.addstream_event and RTCPeerConnection.removestream_event.",
  "MediaStreamTrack": "The **MediaStreamTrack** interface of the represents a single media track within a stream; typically, these are audio or video tracks, but other track types may exist as well.",
  "MediaStreamTrackAudioSourceNode": "The **MediaStreamTrackAudioSourceNode** interface is a type of AudioNode which represents a source of audio data taken from a specific MediaStreamTrack obtained through the WebRTC or Media Capture and Streams APIs.",
  "MediaStreamTrackEvent": "The **MediaStreamTrackEvent** interface of the represents events which indicate that a MediaStream has had tracks added to or removed from the stream through calls to Media Capture and Streams API methods. These events are sent to the stream when these changes occur.",
  "MediaStreamTrackGenerator": "The **MediaStreamTrackGenerator** interface of the Insertable Streams for MediaStreamTrack API creates a WritableStream that acts as a MediaStreamTrack source.",
  "MediaStreamTrackProcessor": "The **MediaStreamTrackProcessor** interface of the Insertable Streams for MediaStreamTrack API consumes a MediaStreamTrack object's source and generates a stream of media frames.",
  "MediaTrackConstraints": "The **MediaTrackConstraints** dictionary is used to describe a set of capabilities and the value or values each can take on. A constraints dictionary is passed into MediaStreamTrack.applyConstraints to allow a script to establish a set of exact (required) values or ranges and/or preferred values or ranges of values for the track, and the most recently-requested set of custom constraints can be retrieved by calling MediaStreamTrack.getConstraints.",
  "MediaTrackSettings": "The **MediaTrackSettings** dictionary is used to return the current values configured for each of a MediaStreamTrack's settings. These values will adhere as closely as possible to any constraints previously described using a MediaTrackConstraints object and set using MediaStreamTrack.applyConstraints, and will adhere to the default constraints for any properties whose constraints haven't been changed, or whose customized constraints couldn't be matched.",
  "MediaTrackSupportedConstraints": "The **MediaTrackSupportedConstraints** dictionary establishes the list of constrainable properties recognized by the or browser in its implementation of the MediaStreamTrack object. An object conforming to MediaTrackSupportedConstraints is returned by MediaDevices.getSupportedConstraints().",
  "MerchantValidationEvent": "The **MerchantValidationEvent** interface of the Payment Request API enables a merchant to verify themselves as allowed to use a particular payment handler.",
  "MessageChannel": "The **MessageChannel** interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.",
  "MessageEvent": "The **MessageEvent** interface represents a message received by a target object.",
  "MessagePort": "The **MessagePort** interface of the Channel Messaging API represents one of the two ports of a MessageChannel, allowing messages to be sent from one port and listening out for them arriving at the other.",
  "Metadata": "The **Metadata** interface contains information about a file system entry. This metadata includes the file's size and modification date and time.",
  "MIDIAccess": "The **MIDIAccess** interface of the Web MIDI API provides methods for listing MIDI input and output devices, and obtaining access to those devices.",
  "MIDIConnectionEvent": "The **MIDIConnectionEvent** interface of the Web MIDI API is the event passed to the MIDIAccess.statechange_event event of the MIDIAccess interface and the MIDIPort.statechange_event event of the MIDIPort interface. This occurs any time a new port becomes available, or when a previously available port becomes unavailable. For example, this event is fired whenever a MIDI device is either plugged in to or unplugged from a computer.",
  "MIDIInput": "The **MIDIInput** interface of the Web MIDI API receives messages from a MIDI input port.",
  "MIDIInputMap": "The **MIDIInputMap** read-only interface of the Web MIDI API provides the set of MIDI input ports that are currently available.",
  "MIDIMessageEvent": "The **MIDIMessageEvent** interface of the Web MIDI API represents the event passed to the MIDIInput.midimessage_event event of the MIDIInput interface. A midimessage event is fired every time a MIDI message is sent from a device represented by a MIDIInput, for example when a MIDI keyboard key is pressed, a knob is tweaked, or a slider is moved.",
  "MIDIOutput": "The **MIDIOutput** interface of the provides methods to add messages to the queue of an output device, and to clear the queue of messages.",
  "MIDIOutputMap": "The **MIDIOutputMap** read-only interface of the Web MIDI API provides the set of MIDI output ports that are currently available.",
  "MIDIPort": "The **MIDIPort** interface of the represents a MIDI input or output port.",
  "MimeType": "The **MimeType** interface provides contains information about a MIME type associated with a particular plugin. Navigator.mimeTypes returns an array of this object.",
  "MimeTypeArray": "The **MimeTypeArray** interface returns an array of MimeType instances, each of which contains information about a supported browser plugins. This object is returned by the deprecated Navigator.mimeTypes property.",
  "MouseEvent": "The **MouseEvent** interface represents events that occur due to the user interacting with a pointing device (such as a mouse).",
  "MouseScrollEvent": "The **MouseScrollEvent** interface represents events that occur due to the user moving a mouse wheel or similar input device.",
  "MutationEvent": "The **MutationEvent** interface provides event properties that are specific to modifications to the Document Object Model (DOM) hierarchy and nodes.",
  "MutationObserver": "The **MutationObserver** interface provides the ability to watch for changes being made to the DOM tree. It is designed as a replacement for the older Mutation Events feature, which was part of the DOM3 Events specification.",
  "MutationRecord": "The **MutationRecord** is a read-only interface that represents an individual DOM mutation observed by a MutationObserver. It is the object inside the array passed to the callback of a MutationObserver.",
  "NamedNodeMap": "The **NamedNodeMap** interface represents a collection of Attr objects. Objects inside a NamedNodeMap are not in any particular order, unlike NodeList, although they may be accessed by an index as in an array.",
  "NavigateEvent": "The **NavigateEvent** interface of the is the event object for the Navigation/navigate_event event, which fires when any type of navigation is initiated (this includes usage of features like History.go()). NavigateEvent provides access to information about that navigation, and allows developers to intercept and control the navigation handling.",
  "Navigation": "The **Navigation** interface of the allows control over all navigation actions for the current window in one central place, including initiating navigations programmatically, examining navigation history entries, and managing navigations as they happen.",
  "Navigation API": "The **Navigation API** provides the ability to initiate, intercept, and manage browser navigation actions. It can also examine an application's history entries. This is a successor to previous web platform features such as the and window.location, which solves their shortcomings and is specifically aimed at the needs of .",
  "NavigationActivation": "The **NavigationActivation** interface of the Navigation API represents a recent cross-document navigation. It contains the navigation type and outgoing and inbound document history entries.",
  "NavigationCurrentEntryChangeEvent": "The **NavigationCurrentEntryChangeEvent** interface of the is the event object for the Navigation/currententrychange_event event, which fires when the Navigation.currentEntry has changed.",
  "NavigationDestination": "The **NavigationDestination** interface of the represents the destination being navigated to in the current navigation.",
  "NavigationHistoryEntry": "The **NavigationHistoryEntry** interface of the represents a single navigation history entry.",
  "NavigationPreloadManager": "The **NavigationPreloadManager** interface of the Service Worker API provides methods for managing the preloading of resources in parallel with service worker bootup.",
  "NavigationTransition": "The **NavigationTransition** interface of the represents an ongoing navigation, that is, a navigation that hasn't yet reached the Navigation/navigatesuccess_event or Navigation/navigateerror_event stage.",
  "Navigator": "The **Navigator** interface represents the state and the identity of the user agent. It allows scripts to query it and to register themselves to carry on some activities.",
  "NavigatorLogin": "The **NavigatorLogin** interface of the Federated Credential Management (FedCM) API defines login functionality for federated identity providers (IdPs). Specifically, it enables a federated identity provider (IdP) to set its login status when a user signs into or out of the IdP.",
  "NavigatorUAData": "The **NavigatorUAData** interface of the returns information about the browser and operating system of a user.",
  "NDEFMessage": "The **NDEFMessage** interface of the Web NFC API represents the content of an NDEF message that has been read from or could be written to an NFC tag. An instance is acquired by calling the NDEFMessage() constructor or from the NDEFReadingEvent.message property, which is passed to the NDEFReader.reading_event event.",
  "NDEFReader": "The **NDEFReader** interface of the Web NFC API is used to read from and write data to compatible NFC devices, e.g. NFC tags supporting NDEF, when these devices are within the reader's magnetic induction field.",
  "NDEFReadingEvent": "The **NDEFReadingEvent** interface of the Web NFC API represents events dispatched on new NFC readings obtained by .",
  "NDEFRecord": "The **NDEFRecord** interface of the Web NFC API provides data that can be read from, or written to, compatible NFC devices, e.g. NFC tags supporting NDEF.",
  "Network Information API": "The **Network Information API** provides information about the system's connection in terms of general connection type (e.g., 'wifi, 'cellular', etc.).",
  "NetworkInformation": "The **NetworkInformation** interface of the Network Information API provides information about the connection a device is using to communicate with the network and provides a means for scripts to be notified if the connection type changes.",
  "Node": "The **Node** interface is an abstract base",
  "NodeIterator": "The **NodeIterator** interface represents an iterator to traverse nodes of a DOM subtree in document order.",
  "NodeList": "**NodeList** objects are collections of nodes, usually returned by properties such as Node.childNodes and methods such as document.querySelectorAll().",
  "Notification": "The **Notification** interface of the is used to configure and display desktop notifications to the user.",
  "NotificationEvent": "The **NotificationEvent** interface of the represents a notification event dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.",
  "Notifications API": "The Notifications API allows web pages to control the display of system notifications to the end user. These are outside the top-level browsing context viewport, so therefore can be displayed even when the user has switched tabs or moved to a different app. The API is designed to be compatible with existing notification systems, across different platforms.",
  "NotRestoredReasonDetails": "The **NotRestoredReasonDetails** interface of the represents a single reason why a navigated page was blocked from using the back/forward cache ().",
  "NotRestoredReasons": "The **NotRestoredReasons** interface of the provides report data containing reasons why the current document was blocked from using the back/forward cache () on navigation.",
  "OES_draw_buffers_indexed": "The **OES_draw_buffers_indexed** extension is part of the WebGL API and enables the use of different blend options when writing to multiple color buffers simultaneously.",
  "OES_element_index_uint extension": "The **OES_element_index_uint** extension is part of the WebGL API and adds support for gl.UNSIGNED_INT types to WebGLRenderingContext.drawElements().",
  "OES_fbo_render_mipmap extension": "The OES_fbo_render_mipmap extension is part of the WebGL API and makes it possible to attach any level of a texture to a framebuffer object.",
  "OES_standard_derivatives extension": "The **OES_standard_derivatives** extension is part of the WebGL API and adds the GLSL derivative functions dFdx, dFdy, and fwidth.",
  "OES_texture_float extension": "The **OES_texture_float** extension is part of the WebGL API and exposes floating-point pixel types for textures.",
  "OES_texture_float_linear extension": "The **OES_texture_float_linear** extension is part of the WebGL API and allows linear filtering with floating-point pixel types for textures.",
  "OES_texture_half_float extension": "The **OES_texture_half_float** extension is part of the WebGL API and adds texture formats with 16- (aka half float) and 32-bit floating-point components.",
  "OES_texture_half_float_linear extension": "The **OES_texture_half_float_linear** extension is part of the WebGL API and allows linear filtering with half floating-point pixel types for textures.",
  "OES_vertex_array_object extension": "The **OES_vertex_array_object** extension is part of the WebGL API and provides vertex array objects (VAOs) which encapsulate vertex array states. These objects keep pointers to vertex data and provide names for different sets of vertex data.",
  "OfflineAudioCompletionEvent": "The Web Audio API OfflineAudioCompletionEvent interface represents events that occur when the processing of an OfflineAudioContext is terminated. The OfflineAudioContext/complete_event event uses this interface.",
  "OfflineAudioContext": "The OfflineAudioContext interface is an AudioContext interface representing an audio-processing graph built from linked together AudioNodes. In contrast with a standard AudioContext, an OfflineAudioContext doesn't render the audio to the device hardware; instead, it generates it, as fast as it can, and outputs the result to an AudioBuffer.",
  "OffscreenCanvas": "When using the element or the Canvas API, rendering, animation, and user interaction usually happen on the main execution thread of a web application.",
  "OffscreenCanvasRenderingContext2D": "The **OffscreenCanvasRenderingContext2D** interface is a CanvasRenderingContext2D rendering context for drawing to the bitmap of an OffscreenCanvas object.",
  "OrientationSensor": "The **OrientationSensor** interface of the Sensor APIs is the base class for orientation sensors. This interface cannot be used directly. Instead it provides properties and methods accessed by interfaces that inherit from it.",
  "OscillatorNode": "The **OscillatorNode** interface represents a periodic waveform, such as a sine wave. It is an AudioScheduledSourceNode audio-processing module that causes a specified frequency of a given wave to be created—in effect, a constant tone.",
  "OTPCredential": "The **OTPCredential** interface of the is returned when a WebOTP CredentialsContainer.get call (i.e. invoked with an otp option) fulfills. It includes a code property that contains the retrieved one-time password (OTP).",
  "OverconstrainedError": "The **OverconstrainedError** interface of the Media Capture and Streams API indicates that the set of desired capabilities for the current MediaStreamTrack cannot currently be met. When this event is thrown on a MediaStreamTrack, it is muted until either the current constraints can be established or until satisfiable constraints are applied.",
  "OVR_multiview2 extension": "The OVR_multiview2 extension is part of the WebGL API and adds support for rendering into multiple views simultaneously. This especially useful for virtual reality (VR) and WebXR.",
  "Page Visibility API": "The Page Visibility API provides events you can watch for to know when a document becomes visible or hidden, as well as features to look at the current visibility state of the page.",
  "PageRevealEvent": "The **PageRevealEvent** event object is made available inside handler functions for the Window.pagereveal_event event.",
  "PageSwapEvent": "The **PageSwapEvent** event object is made available inside handler functions for the Window.pageswap_event event.",
  "PageTransitionEvent": "The **PageTransitionEvent** event object is available inside handler functions for the pageshow and pagehide events, fired when a document is being loaded or unloaded.",
  "PaintRenderingContext2D": "The **PaintRenderingContext2D** interface of the CSS Painting API is the API's rendering context for drawing to the bitmap. It implements a subset of the CanvasRenderingContext2D API, with the following exceptions:",
  "PaintSize": "The **PaintSize** interface of the CSS Painting API represents the size of the output bitmap that the author should draw.",
  "PaintWorkletGlobalScope": "The **PaintWorkletGlobalScope** interface of the CSS Painting API represents the global object available inside a paint Worklet.",
  "PannerNode": "The PannerNode interface defines an audio-processing object that represents the location, direction, and behavior of an audio source signal in a simulated physical space. This AudioNode uses right-hand Cartesian coordinates to describe the source's _position_ as a vector and its _orientation_ as a 3D directional cone.",
  "PasswordCredential": "The **PasswordCredential** interface of the Credential Management API provides information about a username/password pair. In supporting browsers an instance of this class may be passed in the credential member of the init object for global Window/fetch.",
  "PasswordCredentialInit": "The **PasswordCredentialInit** dictionary represents the object passed to CredentialsContainer.create() as the value of the password option, when creating a password credential.",
  "Path2D": "The **Path2D** interface of the Canvas 2D API is used to declare a path that can then be used on a CanvasRenderingContext2D object. The path methods of the CanvasRenderingContext2D interface are also present on this interface, which gives you the convenience of being able to retain and replay your path whenever desired.",
  "Payment Handler API": "The Payment Handler API provides a standardized set of functionality for web applications to directly handle payments, rather than having to be redirected to a separate site for payment handling.",
  "Payment Request API": "The **Payment Request API** provides a consistent user experience for merchants and users. It is not a new way of paying for things; instead, it's a way for users to select their preferred way of paying for things and make that information available to a merchant.",
  "PaymentAddress": "The **PaymentAddress** interface of the Payment Request API is used to store shipping or payment address information.",
  "PaymentManager": "The **PaymentManager** interface of the is used to manage various aspects of payment app functionality.",
  "PaymentMethodChangeEvent": "The **PaymentMethodChangeEvent** interface of the Payment Request API describes the PaymentRequest/paymentmethodchange_event event which is fired by some payment handlers when the user switches payment instruments (e.g., a user selects a \"store\" card to make a purchase while using Apple Pay).",
  "PaymentRequest": "The Payment Request API's **PaymentRequest** interface is the primary access point into the API, and lets web content and apps accept payments from the end user on behalf of the operator of the site or the publisher of the app.",
  "PaymentRequestEvent": "The **PaymentRequestEvent** interface of the is the object passed to a payment handler when a PaymentRequest is made.",
  "PaymentRequestUpdateEvent": "The **PaymentRequestUpdateEvent** interface is used for events sent to a PaymentRequest instance when changes are made to shipping-related information for a pending PaymentRequest. Those events are:",
  "PaymentResponse": "The **PaymentResponse** interface of the Payment Request API is returned after a user selects a payment method and approves a payment request.",
  "Pbkdf2Params": "The **Pbkdf2Params** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.deriveKey(), when using the PBKDF2 algorithm.",
  "Performance": "The **Performance** interface provides access to performance-related information for the current page.",
  "Performance APIs": "The Performance API is a group of standards used to measure the performance of web applications.",
  "PerformanceElementTiming": "The **PerformanceElementTiming** interface contains render timing information for image and text node elements the developer annotated with an elementtiming attribute for observation.",
  "PerformanceEntry": "The **PerformanceEntry** object encapsulates a single performance metric that is part of the browser's performance timeline.",
  "PerformanceEventTiming": "The PerformanceEventTiming interface of the Event Timing API provides insights into the latency of certain event types triggered by user interaction.",
  "PerformanceLongAnimationFrameTiming": "The **PerformanceLongAnimationFrameTiming** interface is specified in the Long Animation Frames API and provides metrics on long animation frames (LoAFs) that occupy rendering and block other tasks from being executed.",
  "PerformanceLongTaskTiming": "The **PerformanceLongTaskTiming** interface provides information about tasks that occupy the UI thread for 50 milliseconds or more.",
  "PerformanceMark": "**PerformanceMark** is an interface for PerformanceEntry objects with an PerformanceEntry.entryType of \"mark\".",
  "PerformanceMeasure": "**PerformanceMeasure** is an _abstract_ interface for PerformanceEntry objects with an PerformanceEntry.entryType of \"measure\". Entries of this type are created by calling Performance.measure to add a _named_ DOMHighResTimeStamp (the _measure_) between two _marks_ to the browser's _performance timeline_.",
  "PerformanceNavigation": "The legacy **PerformanceNavigation** interface represents information about how the navigation to the current document was done.",
  "PerformanceNavigationTiming": "The **PerformanceNavigationTiming** interface provides methods and properties to store and retrieve metrics regarding the browser's document navigation events. For example, this interface can be used to determine how much time it takes to load or unload a document.",
  "PerformanceObserver": "The **PerformanceObserver** interface is used to observe performance measurement events and be notified of new as they are recorded in the browser's _performance timeline_.",
  "PerformanceObserverEntryList": "The **PerformanceObserverEntryList** interface is a list of that were explicitly observed via the PerformanceObserver.observe method.",
  "PerformancePaintTiming": "The **PerformancePaintTiming** interface provides timing information about \"paint\" (also called \"render\") operations during web page construction. \"Paint\" refers to conversion of the render tree to on-screen pixels.",
  "PerformanceResourceTiming": "The **PerformanceResourceTiming** interface enables retrieval and analysis of detailed network timing data regarding the loading of an application's resources. An application can use the timing metrics to determine, for example, the length of time it takes to fetch a specific resource, such as an XMLHttpRequest, , image, or script.",
  "PerformanceScriptTiming": "The **PerformanceScriptTiming** interface is specified in the Long Animation Frames API and provides metrics on individual scripts that contribute to long animation frames (LoAFs).",
  "PerformanceServerTiming": "The **PerformanceServerTiming** interface surfaces server metrics that are sent with the response in the HTTP header.",
  "PerformanceTiming": "The **PerformanceTiming** interface is a legacy interface kept for backwards compatibility and contains properties that offer performance timing information for various events which occur during the loading and use of the current page. You get a PerformanceTiming object describing your page using the Performance.timing property.",
  "PeriodicSyncEvent": "The **PeriodicSyncEvent** interface of the provides a way to run tasks in the service worker with network connectivity.",
  "PeriodicSyncManager": "The **PeriodicSyncManager** interface of the provides a way to register tasks to be run in a service worker at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests. Access PeriodicSyncManager through the ServiceWorkerRegistration.periodicSync.",
  "PeriodicWave": "The **PeriodicWave** interface defines a periodic waveform that can be used to shape the output of an OscillatorNode.",
  "Permissions": "The **Permissions** interface of the Permissions API provides the core Permission API functionality, such as methods for querying and revoking permissions",
  "Permissions API": "The **Permissions API** provides a consistent programmatic way to query the status of API permissions attributed to the current context, such as a web page or worker.",
  "PermissionStatus": "The **PermissionStatus** interface of the Permissions API provides the state of an object and an event handler for monitoring changes to said state.",
  "Picture-in-Picture API": "The **Picture-in-Picture API** allow websites to create a floating, always-on-top video window. This allows users to continue consuming media while they interact with other sites or applications on their device.",
  "PictureInPictureEvent": "The **PictureInPictureEvent** interface represents picture-in-picture-related events, including HTMLVideoElement/enterpictureinpicture_event, HTMLVideoElement/leavepictureinpicture_event and PictureInPictureWindow/resize_event.",
  "PictureInPictureWindow": "The **PictureInPictureWindow** interface represents an object able to programmatically obtain the **width** and **height** and **resize event** of the floating video window.",
  "Plugin": "The Plugin interface provides information about a browser plugin.",
  "PluginArray": "The PluginArray interface is used to store a list of objects; it's returned by the property. The PluginArray is not a JavaScript array, but has the length property and supports accessing individual items using bracket notation (plugins[2]), as well as via item(index) and namedItem(\"name\") methods.",
  "Pointer events": "Much of today's web content assumes the user's pointing device will be a mouse. However, since many devices support other types of pointing input devices, such as pen/stylus and touch surfaces, extensions to the existing pointing device event models are needed. _Pointer events_ address that need.",
  "Pointer Lock API": "The **Pointer Lock API** (formerly called _Mouse Lock API_) provides input methods based on the movement of the mouse over time (i.e., deltas), not just the absolute position of the mouse cursor in the viewport. It gives you access to raw mouse movement, locks the target of mouse events to a single element, eliminates limits on how far mouse movement can go in a single direction, and removes the cursor from view. It is ideal for first-person 3D games, for example.",
  "PointerEvent": "The **PointerEvent** interface represents the state of a DOM event produced by a pointer such as the geometry of the contact point, the device type that generated the event, the amount of pressure that was applied on the contact surface, etc.",
  "Popover API": "The **Popover API** provides developers with a standard, consistent, flexible mechanism for displaying popover content on top of other page content. Popover content can be controlled either declaratively using HTML attributes, or via JavaScript.",
  "PopStateEvent": "**PopStateEvent** is an interface for the Window/popstate_event event.",
  "PositionSensorVRDevice": "The **PositionSensorVRDevice** interface of the WebVR API represents VR hardware's position sensor. You can access information such as the current position and orientation of the sensor in relation to the head mounted display through the PositionSensorVRDevice.getState() method.",
  "Presentation": "The **Presentation** can be defined as two possible user agents in the context: _Controlling user agent_ and _Receiving user agent_.",
  "Presentation API": "The Presentation API lets a (such as a Web browser) effectively display web content through large presentation devices such as projectors and network-connected televisions. Supported types of multimedia devices include both displays which are wired using HDMI, DVI, or the like, or wireless, using DLNA, Chromecast, AirPlay, or Miracast.",
  "PresentationAvailability": "A **PresentationAvailability** object is associated with available presentation displays and represents the _presentation display availability_ for a presentation request. If the controlling user agent can monitor the list of available presentation displays in the background (without a pending request to start()), the PresentationAvailability object _MUST_ be implemented in a controlling browsing context.",
  "PresentationConnection": "The **PresentationConnection** interface of the Presentation API provides methods and properties for managing a single presentation. Each presentation connection is represented by a PresentationConnection object. Both the controlling user agent and receiving user agent _MUST_ implement PresentationConnection.",
  "PresentationConnectionAvailableEvent": "The **PresentationConnectionAvailableEvent** interface of the Presentation API is fired on a PresentationRequest when a connection associated with the object is created.",
  "PresentationConnectionCloseEvent": "The **PresentationConnectionCloseEvent** interface of the Presentation API is fired on a PresentationConnection when it is closed.",
  "PresentationConnectionList": "PresentationConnectionList is the collection of incoming presentation connections.",
  "PresentationReceiver": "The **PresentationReceiver** interface of the Presentation API provides a means for a receiving browsing context to access controlling browsing contexts and communicate with them.",
  "PresentationRequest": "A PresentationRequest object is used to initiate or reconnect to a presentation made by a controlling browsing context. The PresentationRequest object _MUST_ be implemented in a controlling browsing context provided by a controlling user agent.",
  "PressureObserver": "The **PressureObserver** interface is part of the Compute Pressure API and is used to observe the pressure changes of system resources such as the CPU.",
  "PressureRecord": "The **PressureRecord** interface is part of the Compute Pressure API and describes the pressure trend of a source at a specific moment of transition.",
  "Prioritized Task Scheduling API": "The **Prioritized Task Scheduling API** provides a standardized way to prioritize all tasks belonging to an application, whether they are defined in a website developer's code or in third-party libraries and frameworks.",
  "ProcessingInstruction": "The **ProcessingInstruction** interface represents a processing instruction; that is, a Node which embeds an instruction targeting a specific application but that can be ignored by any other applications which don't recognize the instruction.",
  "ProgressEvent": "The **ProgressEvent** interface represents events measuring progress of an underlying process, like an HTTP request (for an XMLHttpRequest, or the loading of the underlying resource of an , , , or ).",
  "PromiseRejectionEvent": "The **PromiseRejectionEvent** interface represents events which are sent to the global script context when JavaScript s are rejected. These events are particularly useful for telemetry and debugging purposes.",
  "PublicKeyCredential": "The **PublicKeyCredential** interface provides information about a public key / private key pair, which is a credential for logging in to a service using an un-phishable and data-breach resistant asymmetric key pair instead of a password. It inherits from Credential, and is part of the Web Authentication API extension to the Credential Management API.",
  "PublicKeyCredentialCreationOptions": "The **PublicKeyCredentialCreationOptions** dictionary represents the object passed to CredentialsContainer.create() as the value of the publicKey option: that is, when using create() to create a public key credential using the Web Authentication API.",
  "PublicKeyCredentialRequestOptions": "The **PublicKeyCredentialRequestOptions** dictionary represents the object passed to CredentialsContainer.get() as the value of the publicKey option.",
  "Push API": "The **Push API** gives web applications the ability to receive messages pushed to them from a server, whether or not the web app is in the foreground, or even currently loaded, on a user agent. This lets developers deliver asynchronous notifications and updates to users that opt in, resulting in better engagement with timely new content.",
  "PushEvent": "The **PushEvent** interface of the Push API represents a push message that has been received. This event is sent to the global scope of a ServiceWorker. It contains the information sent from an application server to a PushSubscription.",
  "PushManager": "The **PushManager** interface of the Push API provides a way to receive notifications from third-party servers as well as request URLs for push notifications.",
  "PushMessageData": "The **PushMessageData** interface of the Push API provides methods which let you retrieve the push data sent by a server in various formats.",
  "PushSubscription": "The PushSubscription interface of the Push API provides a subscription's URL endpoint along with the public key and secrets that should be used for encrypting push messages to this subscription.",
  "PushSubscriptionOptions": "The **PushSubscriptionOptions** interface of the represents the options associated with a push subscription.",
  "RadioNodeList": "The **RadioNodeList** interface represents a collection of elements in a returned by a call to HTMLFormControlsCollection.namedItem().",
  "Range": "The **Range** interface represents a fragment of a document that can contain nodes and parts of text nodes.",
  "ReadableByteStreamController": "The **ReadableByteStreamController** interface of the Streams API represents a controller for a readable byte stream.",
  "ReadableStream": "The ReadableStream interface of the Streams API represents a readable stream of byte data. The Fetch API offers a concrete instance of a ReadableStream through the Response.body property of a Response object.",
  "ReadableStreamBYOBReader": "The ReadableStreamBYOBReader interface of the Streams API defines a reader for a ReadableStream that supports zero-copy reading from an underlying byte source.",
  "ReadableStreamBYOBRequest": "The **ReadableStreamBYOBRequest** interface of the Streams API represents a \"pull request\" for data from an underlying source that will made as a zero-copy transfer to a consumer (bypassing the stream's internal queues).",
  "ReadableStreamDefaultController": "The **ReadableStreamDefaultController** interface of the Streams API represents a controller allowing control of a ReadableStream's state and internal queue. Default controllers are for streams that are not byte streams.",
  "ReadableStreamDefaultReader": "The **ReadableStreamDefaultReader** interface of the Streams API represents a default reader that can be used to read stream data supplied from a network (such as a fetch request).",
  "RelativeOrientationSensor": "The **RelativeOrientationSensor** interface of the Sensor APIs describes the device's physical orientation without regard to the Earth's reference coordinate system.",
  "Remote Playback API": "The **Remote Playback API** extends the HTMLMediaElement to enable the control of media played on a remote device.",
  "RemotePlayback": "The **RemotePlayback** interface of the allows the page to detect availability of remote playback devices, then connect to and control playing on these devices.",
  "Report": "The Report interface of the Reporting API represents a single report.",
  "ReportBody": "The **ReportBody** interface of the represents the body of a report. Individual report types inherit from this interface, adding specific attributes relevant to the particular report.",
  "Reporting API": "The Reporting API provides a generic reporting mechanism for web applications to use to make reports available based on various platform features (for example Content Security Policy, Permissions-Policy, or feature deprecation reports) in a consistent manner.",
  "ReportingObserver": "The ReportingObserver interface of the Reporting API allows you to collect and access reports.",
  "Request": "The **Request** interface of the Fetch API represents a resource request.",
  "RequestInit": "The **RequestInit** dictionary of the Fetch API represents the set of options that can be used to configure a fetch request.",
  "Resize Observer API": "The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size, with notifications being delivered to the observer each time the size changes.",
  "ResizeObserver": "The **ResizeObserver** interface reports changes to the dimensions of an Element's content or border box, or the bounding box of an SVGElement.",
  "ResizeObserverEntry": "The **ResizeObserverEntry** interface represents the object passed to the ResizeObserver.ResizeObserver constructor's callback function, which allows you to access the new dimensions of the Element or SVGElement being observed.",
  "ResizeObserverSize": "The **ResizeObserverSize** interface of the Resize Observer API is used by the ResizeObserverEntry interface to access the box sizing properties of the element being observed.",
  "Response": "The **Response** interface of the Fetch API represents the response to a request.",
  "RestrictionTarget": "The **RestrictionTarget** interface of the provides a static method, RestrictionTarget.fromElement_static, which returns a RestrictionTarget instance that can be used to restrict a captured video track to a specified DOM element.",
  "RsaHashedImportParams": "The **RsaHashedImportParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.importKey() or SubtleCrypto.unwrapKey(), when importing any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.",
  "RsaHashedKeyGenParams": "The **RsaHashedKeyGenParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.generateKey(), when generating any RSA-based key pair: that is, when the algorithm is identified as any of RSASSA-PKCS1-v1_5, RSA-PSS, or RSA-OAEP.",
  "RsaOaepParams": "The **RsaOaepParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.encrypt(), SubtleCrypto.decrypt(), SubtleCrypto.wrapKey(), or SubtleCrypto.unwrapKey(), when using the RSA_OAEP algorithm.",
  "RsaPssParams": "The **RsaPssParams** dictionary of the Web Crypto API represents the object that should be passed as the algorithm parameter into SubtleCrypto.sign() or SubtleCrypto.verify(), when using the RSA-PSS algorithm.",
  "RTCAudioSourceStats": "The **RTCAudioSourceStats** dictionary of the WebRTC API provides statistics information about an audio track (MediaStreamTrack) that is attached to one or more senders (RTCRtpSender).",
  "RTCCertificate": "The **RTCCertificate** interface of the WebRTC API provides an object representing a certificate that an RTCPeerConnection uses to authenticate.",
  "RTCCertificateStats": "The **RTCCertificateStats** dictionary of the WebRTC API is used to report information about a certificate used by an RTCDtlsTransport and its underlying RTCIceTransport.",
  "RTCCodecStats": "The **RTCCodecStats** dictionary of the WebRTC API provides statistics about a codec used by streams that are being sent or received by the associated RTCPeerConnection object.",
  "RTCDataChannel": "The **RTCDataChannel** interface represents a network channel which can be used for bidirectional peer-to-peer transfers of arbitrary data. Every data channel is associated with an , and each peer connection can have up to a theoretical maximum of 65,534 data channels (the actual limit may vary from browser to browser).",
  "RTCDataChannelEvent": "The **RTCDataChannelEvent** interface",
  "RTCDataChannelStats": "The **RTCDataChannelStats** dictionary of the WebRTC API provides statistics related to one RTCDataChannel object on the connection.",
  "RTCDtlsTransport": "The **RTCDtlsTransport** interface provides access to information about the Datagram Transport Layer Security (****) transport over which a RTCPeerConnection's and packets are sent and received by its RTCRtpSender and RTCRtpReceiver objects.",
  "RTCDTMFSender": "The **RTCDTMFSender** interface provides a mechanism for transmitting codes on a WebRTC RTCPeerConnection. You gain access to the connection's RTCDTMFSender through the RTCRtpSender.dtmf property on the audio track you wish to send DTMF with.",
  "RTCDTMFToneChangeEvent": "The **RTCDTMFToneChangeEvent** interface represents events sent to indicate that tones have started or finished playing. This interface is used by the tonechange event.",
  "RTCEncodedAudioFrame": "The **RTCEncodedAudioFrame** of the WebRTC API represents an encoded audio frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.",
  "RTCEncodedVideoFrame": "The **RTCEncodedVideoFrame** of the WebRTC API represents an encoded video frame in the WebRTC receiver or sender pipeline, which may be modified using a WebRTC Encoded Transform.",
  "RTCError": "The **RTCError** interface describes an error which has occurred while handling WebRTC operations. It's based upon the standard DOMException interface that describes general DOM errors.",
  "RTCErrorEvent": "The WebRTC API's **RTCErrorEvent** interface represents an error sent to a WebRTC object. It's based on the standard Event interface, but adds RTC-specific information describing the error, as shown below.",
  "RTCIceCandidate": "The **RTCIceCandidate** interface—part of the WebRTC API—represents a candidate Interactive Connectivity Establishment () configuration which may be used to establish an RTCPeerConnection.",
  "RTCIceCandidatePair": "The **RTCIceCandidatePair** dictionary describes a pair of ICE candidates which together comprise a description of a viable connection between two WebRTC endpoints. It is used as the return value from RTCIceTransport.getSelectedCandidatePair() to identify the currently-selected candidate pair identified by the ICE agent.",
  "RTCIceCandidatePairStats": "The **RTCIceCandidatePairStats** dictionary of the WebRTC API is used to report statistics that provide insight into the quality and performance of an RTCPeerConnection while connected and configured as described by the specified pair of candidates.",
  "RTCIceCandidateStats": "The **RTCIceCandidateStats** dictionary of the WebRTC API is used to report statistics related to an RTCIceCandidate.",
  "RTCIceParameters": "The **RTCIceParameters** dictionary specifies the username fragment and password assigned to an session.",
  "RTCIceTransport": "The **RTCIceTransport** interface provides access to information about the transport layer over which the data is being sent and received.",
  "RTCIdentityAssertion": "The **RTCIdentityAssertion** interface of the WebRTC API represents the identity of a remote peer of the current connection. If no peer has yet been set and verified, then this interface returns null. Once set it can't be changed.",
  "RTCInboundRtpStreamStats": "The **RTCInboundRtpStreamStats** dictionary of the WebRTC API is used to report statistics related to the receiving end of an RTP stream on the local end of the RTCPeerConnection.",
  "RTCOutboundRtpStreamStats": "The **RTCOutboundRtpStreamStats** dictionary of the WebRTC API is used to report metrics and statistics related to an outbound stream being sent by an RTCRtpSender.",
  "RTCPeerConnection": "The **RTCPeerConnection** interface represents a WebRTC connection between the local computer and a remote peer.",
  "RTCPeerConnectionIceErrorEvent": "The **RTCPeerConnectionIceErrorEvent** interface—based upon the Event interface—provides details pertaining to an error announced by sending an RTCPeerConnection.icecandidateerror_event event to the RTCPeerConnection object.",
  "RTCPeerConnectionIceEvent": "The **RTCPeerConnectionIceEvent** interface represents events that occur in relation to candidates with the target, usually an RTCPeerConnection.",
  "RTCPeerConnectionStats": "The **RTCPeerConnectionStats** dictionary of the WebRTC API provides information about the high level peer connection (RTCPeerConnection).",
  "RTCRemoteInboundRtpStreamStats": "The **RTCRemoteInboundRtpStreamStats** dictionary of the WebRTC API is used to report statistics from the remote endpoint about a particular incoming RTP stream.",
  "RTCRemoteOutboundRtpStreamStats": "The **RTCRemoteOutboundRtpStreamStats** dictionary of the WebRTC API is used to report statistics from a remote endpoint about its outbound RTP stream.",
  "RTCRtpReceiver": "The **RTCRtpReceiver** interface of the WebRTC API manages the reception and decoding of data for a MediaStreamTrack on an RTCPeerConnection.",
  "RTCRtpScriptTransform": "The **RTCRtpScriptTransform** interface of the WebRTC API is used to insert a WebRTC Encoded Transform (a TransformStream running in a worker thread) into the WebRTC sender and receiver pipelines.",
  "RTCRtpScriptTransformer": "The **RTCRtpScriptTransformer** interface of the WebRTC API provides a worker-side Stream API interface that a WebRTC Encoded Transform can use to modify encoded media frames in the incoming and outgoing WebRTC pipelines.",
  "RTCRtpSender": "The **RTCRtpSender** interface provides the ability to control and obtain details about how a particular MediaStreamTrack is encoded and sent to a remote peer.",
  "RTCRtpTransceiver": "The WebRTC interface **RTCRtpTransceiver** describes a permanent pairing of an RTCRtpSender and an RTCRtpReceiver, along with some shared state.",
  "RTCSctpTransport": "The **RTCSctpTransport** interface provides information which describes a Stream Control Transmission Protocol (****) transport. This provides information about limitations of the transport, but also provides a way to access the underlying Datagram Transport Layer Security (****) transport over which SCTP packets for all of an 's data channels are sent and received.",
  "RTCSessionDescription": "The **RTCSessionDescription** interface describes one end of a connection—or potential connection—and how it's configured. Each RTCSessionDescription consists of a description RTCSessionDescription.type indicating which part of the offer/answer negotiation process it describes and of the descriptor of the session.",
  "RTCStatsReport": "The **RTCStatsReport** interface of the WebRTC API provides a statistics report for a RTCPeerConnection, RTCRtpSender, or RTCRtpReceiver.",
  "RTCTrackEvent": "The WebRTC API interface **RTCTrackEvent** represents the RTCPeerConnection.track_event event, which is sent when a new MediaStreamTrack is added to an RTCRtpReceiver which is part of the RTCPeerConnection.",
  "RTCTransformEvent": "The **RTCTransformEvent** of the WebRTC API represent an event that is fired in a dedicated worker when an encoded frame has been queued for processing by a WebRTC Encoded Transform.",
  "RTCTransportStats": "The **RTCTransportStats** dictionary of the WebRTC API provides information about the transport (RTCDtlsTransport and its underlying RTCIceTransport) used by a particular candidate pair.",
  "RTCVideoSourceStats": "The **RTCVideoSourceStats** dictionary of the WebRTC API provides statistics information about a video track (MediaStreamTrack) that is attached to one or more senders (RTCRtpSender).",
  "Scheduler": "The **Scheduler** interface of the Prioritized Task Scheduling API provides methods for scheduling prioritized tasks.",
  "Scheduling": "The **Scheduling** object provides methods and properties to control scheduling tasks within the current document.",
  "Screen": "The Screen interface represents a screen, usually the one on which the current window is being rendered, and is obtained using .",
  "Screen Capture API": "The Screen Capture API introduces additions to the existing Media Capture and Streams API to let the user select a screen or portion of a screen (such as a window) to capture as a media stream. This stream can then be recorded or shared with others over the network.",
  "Screen Orientation API": "The **Screen Orientation API** provides information about the orientation of the screen.",
  "Screen Wake Lock API": "The **Screen Wake Lock API** provides a way to prevent devices from dimming or locking the screen when an application needs to keep running.",
  "ScreenDetailed": "The **ScreenDetailed** interface of the Window Management API represents detailed information about one specific screen available to the user's device.",
  "ScreenDetails": "The **ScreenDetails** interface of the Window Management API represents the details of all the screens available to the user's device.",
  "ScreenOrientation": "The **ScreenOrientation** interface of the Screen Orientation API provides information about the current orientation of the document.",
  "ScriptProcessorNode": "The ScriptProcessorNode interface allows the generation, processing, or analyzing of audio using JavaScript.",
  "ScrollTimeline": "The **ScrollTimeline** interface of the represents a scroll progress timeline (see CSS scroll-driven animations for more details).",
  "SecurePaymentConfirmationRequest": "The **SecurePaymentConfirmationRequest** dictionary describes input to the Payment Request API when used to authenticate a user during an e-commerce transaction using SPC with Payment Request API.",
  "SecurityPolicyViolationEvent": "The **SecurityPolicyViolationEvent** interface inherits from Event, and represents the event object of a securitypolicyviolation event sent on an Element/securitypolicyviolation_event, Document/securitypolicyviolation_event, or when its Content Security Policy (CSP) is violated.",
  "Selection": "A **Selection** object represents the range of text selected by the user or the current position of the caret. Each document is associated with a unique selection object, which can be retrieved by or window.getSelection() and then be examined and modified.",
  "Selection API": "The **Selection API** enables developers to access and manipulate the portion of a document selected by the user.",
  "Sensor": "The **Sensor** interface of the Sensor APIs is the base class for all the other sensor interfaces. This interface cannot be used directly. Instead it provides properties, event handlers, and methods accessed by interfaces that inherit from it.",
  "Sensor APIs": "The **Sensor APIs** are a set of interfaces built to a common design that expose device sensors in a consistent way to the web platform.",
  "SensorErrorEvent": "The **SensorErrorEvent** interface of the Sensor APIs provides information about errors thrown by a Sensor or derived interface.",
  "Serial": "The Serial interface of the Web Serial API provides attributes and methods for finding and connecting to serial ports from a web page.",
  "SerialPort": "The SerialPort interface of the Web Serial API provides access to a serial port on the host device.",
  "Server-sent events": "Traditionally, a web page has to send a request to the server to receive new data; that is, the page requests data from the server. With server-sent events, it's possible for a server to send new data to a web page at any time, by pushing messages to the web page. These incoming messages can be treated as _Events + data_ inside the web page.",
  "Service Worker API": "Service workers essentially act as proxy servers that sit between web applications, the browser, and the network (when available). They are intended, among other things, to enable the creation of effective offline experiences, intercept network requests, and take appropriate action based on whether the network is available, and update assets residing on the server. They will also allow access to push notifications and background sync APIs.",
  "ServiceWorker": "The **ServiceWorker** interface of the Service Worker API provides a reference to a service worker. Multiple (e.g. pages, workers, etc.) can be associated with the same service worker, each through a unique ServiceWorker object.",
  "ServiceWorkerContainer": "The **ServiceWorkerContainer** interface of the Service Worker API provides an object representing the service worker as an overall unit in the network ecosystem, including facilities to register, unregister and update service workers, and access the state of service workers and their registrations.",
  "ServiceWorkerGlobalScope": "The **ServiceWorkerGlobalScope** interface of the Service Worker API represents the global execution context of a service worker.",
  "ServiceWorkerRegistration": "The **ServiceWorkerRegistration** interface of the Service Worker API represents the service worker registration. You register a service worker to control one or more pages that share the same origin.",
  "ShadowRoot": "The **ShadowRoot** interface of the Shadow DOM API is the root node of a DOM subtree that is rendered separately from a document's main DOM tree.",
  "Shared Storage API": "The **Shared Storage API** is a client-side storage mechanism that enables unpartitioned, cross-site data access while preserving privacy (i.e. without relying on tracking cookies).",
  "SharedStorage": "The **SharedStorage** interface of the represents the shared storage for a particular origin, defining methods to write data to the shared storage.",
  "SharedStorageOperation": "The **SharedStorageOperation** interface of the represents the base class for all output gate operation types.",
  "SharedStorageRunOperation": "The **SharedStorageRunOperation** interface of the represents a Run output gate operation.",
  "SharedStorageSelectURLOperation": "The **SharedStorageSelectURLOperation** interface of the represents a URL Selection output gate operation.",
  "SharedStorageWorklet": "The **SharedStorageWorklet** interface of the represents the shared storage worklet for the current origin.",
  "SharedStorageWorkletGlobalScope": "The **SharedStorageWorkletGlobalScope** interface of the represents the global scope of a SharedStorageWorklet module.",
  "SharedWorker": "The **SharedWorker** interface represents a specific kind of worker that can be _accessed_ from several browsing contexts, such as several windows, iframes or even workers. They implement an interface different than dedicated workers and have a different global scope, SharedWorkerGlobalScope.",
  "SharedWorkerGlobalScope": "The **SharedWorkerGlobalScope** object (the SharedWorker global scope) is accessible through the window.self keyword. Some additional global functions, namespaces objects, and constructors, not typically associated with the worker global scope, but available on it, are listed in the JavaScript Reference. See the complete list of functions available to workers.",
  "SnapEvent": "The **SnapEvent** interface defines the event object for the Element/scrollsnapchanging_event and Element/scrollsnapchange_event events. Respectively, these fire on on a scroll container when the browser determines that a new scroll snap target is pending (will be selected when the current scroll gesture ends), and when a new snap target is selected.",
  "SourceBuffer": "The **SourceBuffer** interface represents a chunk of media to be passed into an HTMLMediaElement and played, via a MediaSource object. This can be made up of one or several media segments.",
  "SourceBufferList": "The **SourceBufferList** interface represents a simple container list for multiple SourceBuffer objects.",
  "Speculation Rules API": "The **Speculation Rules API** is designed to improve performance for future navigations. It targets document URLs rather than specific resource files, and so makes sense for multi-page applications (MPAs) rather than single-page applications (SPAs).",
  "SpeechGrammar": "The **SpeechGrammar** interface of the Web Speech API represents a set of words or patterns of words that we want the recognition service to recognize.",
  "SpeechGrammarList": "The **SpeechGrammarList** interface of the Web Speech API represents a list of SpeechGrammar objects containing words or patterns of words that we want the recognition service to recognize.",
  "SpeechRecognition": "The **SpeechRecognition** interface of the Web Speech API is the controller interface for the recognition service; this also handles the SpeechRecognitionEvent sent from the recognition service.",
  "SpeechRecognitionAlternative": "The **SpeechRecognitionAlternative** interface of the Web Speech API represents a single word that has been recognized by the speech recognition service.",
  "SpeechRecognitionErrorEvent": "The **SpeechRecognitionErrorEvent** interface of the Web Speech API represents error messages from the recognition service.",
  "SpeechRecognitionEvent": "The **SpeechRecognitionEvent** interface of the Web Speech API represents the event object for the SpeechRecognition.result_event and SpeechRecognition.nomatch_event events, and contains all the data associated with an interim or final speech recognition result.",
  "SpeechRecognitionResult": "The **SpeechRecognitionResult** interface of the Web Speech API represents a single recognition match, which may contain multiple SpeechRecognitionAlternative objects.",
  "SpeechRecognitionResultList": "The **SpeechRecognitionResultList** interface of the Web Speech API represents a list of SpeechRecognitionResult objects, or a single one if results are being captured in SpeechRecognition.continuous mode.",
  "SpeechSynthesis": "The **SpeechSynthesis** interface of the Web Speech API is the controller interface for the speech service; this can be used to retrieve information about the synthesis voices available on the device, start and pause speech, and other commands besides.",
  "SpeechSynthesisErrorEvent": "The **SpeechSynthesisErrorEvent** interface of the Web Speech API contains information about any errors that occur while processing SpeechSynthesisUtterance objects in the speech service.",
  "SpeechSynthesisEvent": "The **SpeechSynthesisEvent** interface of the Web Speech API contains information about the current state of SpeechSynthesisUtterance objects that have been processed in the speech service.",
  "SpeechSynthesisUtterance": "The **SpeechSynthesisUtterance** interface of the Web Speech API represents a speech request.",
  "SpeechSynthesisVoice": "The **SpeechSynthesisVoice** interface of the Web Speech API represents a voice that the system supports.",
  "StaticRange": "The DOM **StaticRange** interface extends AbstractRange to provide a method to specify a range of content in the DOM whose contents don't update to reflect changes which occur within the DOM tree.",
  "StereoPannerNode": "The StereoPannerNode interface of the Web Audio API represents a simple stereo panner node that can be used to pan an audio stream left or right. It is an AudioNode audio-processing module that positions an incoming audio stream in a stereo image using a low-cost equal-power panning algorithm.",
  "Storage": "The **Storage** interface of the Web Storage API provides access to a particular domain's session or local storage. It allows, for example, the addition, modification, or deletion of stored data items.",
  "Storage Access API": "The Storage Access API provides a way for cross-site content loaded in a third-party context (i.e., embedded in an ) to gain access to third-party cookies and unpartitioned state that it would typically only have access to in a first-party context (i.e., when loaded directly in a browser tab).",
  "Storage API": "The Storage Standard defines a shared storage system designed to be used by all APIs and technologies that websites can use to store data in a user's browser.",
  "StorageAccessHandle": "The **StorageAccessHandle** interface represents access to unpartitioned state granted by a call to Document.requestStorageAccess().",
  "StorageEvent": "The **StorageEvent** interface is implemented by the Window/storage_event event, which is",
  "StorageManager": "The **StorageManager** interface of the Storage API provides an interface for managing persistence permissions and estimating available storage. You can get a reference to this interface using either navigator.storage or WorkerNavigator.storage.",
  "Streams API": "The Streams API allows JavaScript to programmatically access streams of data received over the network and process them as desired by the developer.",
  "StylePropertyMap": "The **StylePropertyMap** interface of the CSS Typed Object Model API provides a representation of a CSS declaration block that is an alternative to .",
  "StylePropertyMapReadOnly": "The **StylePropertyMapReadOnly** interface of the CSS Typed Object Model API provides a read-only representation of a CSS declaration block that is an alternative to CSSStyleDeclaration. Retrieve an instance of this interface using Element.computedStyleMap.",
  "StyleSheet": "An object implementing the StyleSheet interface represents a single style sheet. CSS style sheets will further implement the more specialized CSSStyleSheet interface.",
  "StyleSheetList": "The StyleSheetList interface represents a list of CSSStyleSheet objects. An instance of this object can be returned by Document.styleSheets.",
  "SubmitEvent": "The **SubmitEvent** interface defines the object used to represent an form's HTMLFormElement.submit_event event. This event is fired at the when the form's submit action is invoked.",
  "SubtleCrypto": "The **SubtleCrypto** interface of the Web Crypto API provides a number of low-level cryptographic functions.",
  "SVG API": "SVG provides elements for circles, rectangles, and simple and complex curves. The elements' attribute values specify how these must be drawn. The **SVG API** is the subset of the **DOM** connecting these SVG elements and their attribute values to scripts or programming languages by representing them in memory. The SVG API thus provides methods that allow programmatic access to the SVG elements and their attribute values.",
  "SVGAElement": "The **SVGAElement** interface provides access to the properties of an element, as well as methods to manipulate them.",
  "SVGAngle": "The SVGAngle interface is used to represent a value that can be an or value.",
  "SVGAnimateColorElement": "The **SVGAnimateColorElement** interface corresponds to the <animateColor> element.",
  "SVGAnimatedAngle": "The SVGAnimatedAngle interface is used for attributes of basic type \\<angle> which can be animated.",
  "SVGAnimatedBoolean": "The SVGAnimatedBoolean interface is used for attributes of type boolean which can be animated.",
  "SVGAnimatedEnumeration": "The **SVGAnimatedEnumeration** interface describes attribute values which are constants from a particular enumeration and which can be animated.",
  "SVGAnimatedInteger": "The SVGAnimatedInteger interface is used for attributes of basic type \\<integer> which can be animated.",
  "SVGAnimatedLength": "The **SVGAnimatedLength** interface represents attributes of type \\<length> which can be animated.",
  "SVGAnimatedLengthList": "The SVGAnimatedLengthList interface is used for attributes of type which can be animated.",
  "SVGAnimatedNumber": "The SVGAnimatedNumber interface is used for attributes of basic type \\<Number> which can be animated.",
  "SVGAnimatedNumberList": "The SVGAnimatedNumber interface is used for attributes which take a list of numbers and which can be animated.",
  "SVGAnimatedPreserveAspectRatio": "The SVGAnimatedPreserveAspectRatio interface is used for attributes of type which can be animated.",
  "SVGAnimatedRect": "The SVGAnimatedRect interface is used for attributes of basic which can be animated.",
  "SVGAnimatedString": "The **SVGAnimatedString** interface represents string attributes which can be animated from each SVG declaration. You need to create SVG attribute before doing anything else, everything should be declared inside this.",
  "SVGAnimatedTransformList": "The SVGAnimatedTransformList interface is used for attributes which take a list of numbers and which can be animated.",
  "SVGAnimateElement": "The **SVGAnimateElement** interface corresponds to the element.",
  "SVGAnimateMotionElement": "The **SVGAnimateMotionElement** interface corresponds to the element.",
  "SVGAnimateTransformElement": "The SVGAnimateTransformElement interface corresponds to the element.",
  "SVGAnimationElement": "The **SVGAnimationElement** interface is the base interface for all of the animation element interfaces: SVGAnimateElement, SVGSetElement, SVGAnimateColorElement, SVGAnimateMotionElement and SVGAnimateTransformElement.",
  "SVGCircleElement": "The **SVGCircleElement** interface is an interface for the element.",
  "SVGClipPathElement": "The **SVGClipPathElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGComponentTransferFunctionElement": "The **SVGComponentTransferFunctionElement** interface defines a base interface used by the component transfer function interfaces.",
  "SVGCursorElement": "The **SVGCursorElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGDefsElement": "The **SVGDefsElement** interface corresponds to the element.",
  "SVGDescElement": "The **SVGDescElement** interface corresponds to the element.",
  "SVGDiscardElement": "The **SVGDiscardElement** interface is an interface for the element.",
  "SVGElement": "All of the SVG DOM interfaces that correspond directly to elements in the SVG language derive from the SVGElement interface.",
  "SVGEllipseElement": "The **SVGEllipseElement** interface provides access to the properties of elements.",
  "SVGEvent": "The **SVGEvent** interface represents the event object for most SVG-related events.",
  "SVGFEBlendElement": "The **SVGFEBlendElement** interface corresponds to the element.",
  "SVGFEColorMatrixElement": "The **SVGFEColorMatrixElement** interface corresponds to the element.",
  "SVGFEComponentTransferElement": "The **SVGFEComponentTransferElement** interface corresponds to the element.",
  "SVGFECompositeElement": "The **SVGFECompositeElement** interface corresponds to the element.",
  "SVGFEConvolveMatrixElement": "The **SVGFEConvolveMatrixElement** interface corresponds to the element.",
  "SVGFEDiffuseLightingElement": "The **SVGFEDiffuseLightingElement** interface corresponds to the element.",
  "SVGFEDisplacementMapElement": "The **SVGFEDisplacementMapElement** interface corresponds to the element.",
  "SVGFEDistantLightElement": "The **SVGFEDistantLightElement** interface corresponds to the element.",
  "SVGFEDropShadowElement": "The **SVGFEDropShadowElement** interface corresponds to the element.",
  "SVGFEFloodElement": "The **SVGFEFloodElement** interface corresponds to the element.",
  "SVGFEFuncAElement": "The **SVGFEFuncAElement** interface corresponds to the element.",
  "SVGFEFuncBElement": "The **SVGFEFuncBElement** interface corresponds to the element.",
  "SVGFEFuncGElement": "The **SVGFEFuncGElement** interface corresponds to the element.",
  "SVGFEFuncRElement": "The **SVGFEFuncRElement** interface corresponds to the element.",
  "SVGFEGaussianBlurElement": "The **SVGFEGaussianBlurElement** interface corresponds to the element.",
  "SVGFEImageElement": "The **SVGFEImageElement** interface corresponds to the element.",
  "SVGFEMergeElement": "The **SVGFEMergeElement** interface corresponds to the element.",
  "SVGFEMergeNodeElement": "The **SVGFEMergeNodeElement** interface corresponds to the element.",
  "SVGFEMorphologyElement": "The **SVGFEMorphologyElement** interface corresponds to the element.",
  "SVGFEOffsetElement": "The **SVGFEOffsetElement** interface corresponds to the element.",
  "SVGFEPointLightElement": "The **SVGFEPointLightElement** interface corresponds to the element.",
  "SVGFESpecularLightingElement": "The **SVGFESpecularLightingElement** interface corresponds to the element.",
  "SVGFESpotLightElement": "The **SVGFESpotLightElement** interface corresponds to the element.",
  "SVGFETileElement": "The **SVGFETileElement** interface corresponds to the element.",
  "SVGFETurbulenceElement": "The **SVGFETurbulenceElement** interface corresponds to the element.",
  "SVGFilterElement": "The **SVGFilterElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGFontElement": "The **SVGFontElement** interface corresponds to the elements.",
  "SVGFontFaceElement": "The **SVGFontFaceElement** interface corresponds to the elements.",
  "SVGFontFaceFormatElement": "The **SVGFontFaceFormatElement** interface corresponds to the elements.",
  "SVGFontFaceNameElement": "The **SVGFontFaceNameElement** interface corresponds to the elements.",
  "SVGFontFaceSrcElement": "The **SVGFontFaceSrcElement** interface corresponds to the elements.",
  "SVGFontFaceUriElement": "The **SVGFontFaceUriElement** interface corresponds to the elements.",
  "SVGForeignObjectElement": "The **SVGForeignObjectElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGGElement": "The **SVGGElement** interface corresponds to the element.",
  "SVGGeometryElement": "The SVGGeometryElement interface represents SVG elements whose rendering is defined by geometry with an equivalent path, and which can be filled and stroked. This includes paths and the basic shapes.",
  "SVGGlyphElement": "The **SVGGlyphElement** interface corresponds to the element.",
  "SVGGlyphRefElement": "The **SVGGlyphRefElement** interface corresponds to the elements.",
  "SVGGradientElement": "The **SVGGradient** interface is a base interface used by SVGLinearGradientElement and SVGRadialGradientElement.",
  "SVGGraphicsElement": "The **SVGGraphicsElement** interface represents SVG elements whose primary purpose is to directly render graphics into a group.",
  "SVGHKernElement": "The **SVGHKernElement** interface corresponds to the elements.",
  "SVGImageElement": "The **SVGImageElement** interface corresponds to the element.",
  "SVGLength": "The **SVGLength** interface correspond to the \\<length> basic data type.",
  "SVGLengthList": "The **SVGLengthList** interface defines a list of objects. It is used for the SVGAnimatedLengthList.baseVal and SVGAnimatedLengthList.animVal properties of SVGAnimatedLengthList.",
  "SVGLinearGradientElement": "The **SVGLinearGradientElement** interface corresponds to the element.",
  "SVGLineElement": "The **SVGLineElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGMarkerElement": "The **SVGMarkerElement** interface provides access to the properties of elements, as well as methods to manipulate them. The element defines the graphics used for drawing marks on a shape.",
  "SVGMaskElement": "The **SVGMaskElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGMetadataElement": "The **SVGMetadataElement** interface corresponds to the element.",
  "SVGMissingGlyphElement": "The **SVGMissingGlyphElement** interface corresponds to the elements.",
  "SVGMPathElement": "The **SVGMPathElement** interface corresponds to the element.",
  "SVGNumber": "The **SVGNumber** interface corresponds to the basic data type.",
  "SVGNumberList": "The **SVGNumberList** interface defines a list of numbers.",
  "SVGPathElement": "The **SVGPathElement** interface corresponds to the element.",
  "SVGPatternElement": "The **SVGPatternElement** interface corresponds to the element.",
  "SVGPoint": "An SVGPoint represents a 2D or 3D point in the SVG coordinate system.",
  "SVGPointList": "The **SVGPointList** interface represents a list of SVGPoint objects.",
  "SVGPolygonElement": "The **SVGPolygonElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGPolylineElement": "The **SVGPolylineElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGPreserveAspectRatio": "The SVGPreserveAspectRatio interface corresponds to the attribute, which is available for some of SVG's elements.",
  "SVGRadialGradientElement": "The **SVGRadialGradientElement** interface corresponds to the element.",
  "SVGRect": "The **SVGRect**, an alias for , represents a rectangle. Rectangles consist of an x and y coordinate pair identifying a minimum x value, a minimum y value, and a width and height, which are constrained to be non-negative.",
  "SVGRectElement": "The SVGRectElement interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGRenderingIntent": "The **SVGRenderingIntent** interface defines the enumerated list of possible values for attributes or descriptors.",
  "SVGScriptElement": "The **SVGScriptElement** interface corresponds to the SVG element.",
  "SVGSetElement": "The **SVGSetElement** interface corresponds to the element.",
  "SVGStopElement": "The **SVGStopElement** interface corresponds to the element.",
  "SVGStringList": "The **SVGStringList** interface defines a list of strings.",
  "SVGStyleElement": "The **SVGStyleElement** interface corresponds to the SVG element.",
  "SVGSVGElement": "The **SVGSVGElement** interface provides access to the properties of elements, as well as methods to manipulate them. This interface contains also various miscellaneous commonly-used utility methods, such as matrix operations and the ability to control the time of redraw on visual rendering devices.",
  "SVGSwitchElement": "The **SVGSwitchElement** interface corresponds to the element.",
  "SVGSymbolElement": "The **SVGSymbolElement** interface corresponds to the element.",
  "SVGTextContentElement": "The **SVGTextContentElement** interface is implemented by elements that support rendering child text content. It is inherited by various text-related interfaces, such as SVGTextElement, SVGTSpanElement, SVGTRefElement, and SVGTextPathElement.",
  "SVGTextElement": "The **SVGTextElement** interface corresponds to the elements.",
  "SVGTextPathElement": "The **SVGTextPathElement** interface corresponds to the element.",
  "SVGTextPositioningElement": "The **SVGTextPositioningElement** interface is implemented by elements that support attributes that position individual text glyphs. It is inherited by SVGTextElement, SVGTSpanElement, and SVGTRefElement.",
  "SVGTitleElement": "The **SVGTitleElement** interface corresponds to the element.",
  "SVGTransform": "SVGTransform is the interface for one of the component transformations within an ; thus, an SVGTransform object corresponds to a single component (e.g., scale(…) or matrix(…)) within a attribute.",
  "SVGTransformList": "The SVGTransformList defines a list of objects.",
  "SVGTRefElement": "The **SVGTRefElement** interface corresponds to the elements.",
  "SVGTSpanElement": "The **SVGTSpanElement** interface represents a element.",
  "SVGUnitTypes": "The **SVGUnitTypes** interface defines a commonly used set of constants used for reflecting , and other similar attributes.",
  "SVGUseElement": "The **SVGUseElement** interface corresponds to the element.",
  "SVGViewElement": "The **SVGViewElement** interface provides access to the properties of elements, as well as methods to manipulate them.",
  "SVGVKernElement": "The **SVGVKernElement** interface corresponds to the elements.",
  "SyncEvent": "The **SyncEvent** interface of the represents a sync action that is dispatched on the ServiceWorkerGlobalScope of a ServiceWorker.",
  "SyncManager": "The **SyncManager** interface of the provides an interface for registering and listing sync registrations.",
  "TaskAttributionTiming": "The **TaskAttributionTiming** interface returns information about the work involved in a long task and its associate frame context. The frame context, also called the container, is the iframe, embed or object that is being implicated, on the whole, for a long task.",
  "TaskController": "The **TaskController** interface of the Prioritized Task Scheduling API represents a controller object that can be used to both abort and change the priority of one or more prioritized tasks.",
  "TaskPriorityChangeEvent": "The **TaskPriorityChangeEvent** is the interface for the prioritychange event.",
  "TaskSignal": "The **TaskSignal** interface of the Prioritized Task Scheduling API represents a signal object that allows you to communicate with a prioritized task, and abort it or change the priority (if required) via a TaskController object.",
  "Text": "The **Text** interface represents a text Node in a DOM tree.",
  "TextDecoder": "The **TextDecoder** interface represents a decoder for a specific text encoding, such as UTF-8, ISO-8859-2, KOI8-R, GBK, etc. A decoder takes a stream of bytes as input and emits a stream of code points.",
  "TextDecoderStream": "The **TextDecoderStream** interface of the converts a stream of text in a binary encoding, such as UTF-8 etc., to a stream of strings.",
  "TextEncoder": "The **TextEncoder** interface takes a stream of code points as input and emits a stream of UTF-8 bytes.",
  "TextEncoderStream": "The **TextEncoderStream** interface of the converts a stream of strings into bytes in the UTF-8 encoding. It is the streaming equivalent of TextEncoder.",
  "TextEvent": "The **TextEvent** interface is a legacy UI event interface for reporting changes to text UI elements.",
  "TextFormat": "The **TextFormat** interface represents specific formatting that should be applied to a range of text in an editable text region that's attached to an EditContext instance. The text formatting is requested by the (IME) window that the user is composing text with.",
  "TextFormatUpdateEvent": "The **TextFormatUpdateEvent** interface is a DOM event that represents a list of text formats that an (IME) window wants to apply to the text being composed in an editable region that's attached to an EditContext instance.",
  "TextMetrics": "The **TextMetrics** interface represents the dimensions of a piece of text in the canvas; a TextMetrics instance can be retrieved using the CanvasRenderingContext2D.measureText() method.",
  "TextTrack": "The **TextTrack** interface of the WebVTT API represents a text track associated with a media element.",
  "TextTrackCue": "The **TextTrackCue** interface of the WebVTT API is the abstract base class for the various derived cue types, such as VTTCue; you will work with these derived types rather than the base class.",
  "TextTrackCueList": "The **TextTrackCueList** interface of the WebVTT API is an array-like object that represents a dynamically updating list of TextTrackCue objects.",
  "TextTrackList": "The **TextTrackList** interface is used to represent a list of the text tracks defined for the associated video or audio element, with each track represented by a separate textTrack object in the list.",
  "TextUpdateEvent": "The **TextUpdateEvent** interface is a DOM event that represents a text or selection update in an editable text region that's attached to an EditContext instance.",
  "TimeEvent": "The **TimeEvent** interface, a part of SVG SMIL animation, provides specific contextual information associated with Time events.",
  "TimeRanges": "When loading a media resource for use by an or element, the **TimeRanges** interface is used for representing the time ranges of the media resource that have been buffered, the time ranges that have been played, and the time ranges that are seekable.",
  "ToggleEvent": "The **ToggleEvent** interface represents an event notifying the user an Element's state has changed.",
  "Topics API": "The **Topics API** provides a mechanism for developers to implement use cases such as **interest-based advertising (IBA)** based on topics collected by the browser as the user navigates different pages, rather than collected by the developer by tracking the user's journey around different sites with third-party cookies.",
  "Touch": "The **Touch** interface represents a single contact point on a touch-sensitive device. The contact point is commonly a finger or stylus and the device may be a touchscreen or trackpad.",
  "Touch events": "To provide quality support for touch-based user interfaces, touch events offer the ability to interpret finger (or stylus) activity on touch screens or trackpads.",
  "TouchEvent": "The **TouchEvent** interface represents an UIEvent which is sent when the state of contacts with a touch-sensitive surface changes. This surface can be a touch screen or trackpad, for example. The event can describe one or more points of contact with the screen and includes support for detecting movement, addition and removal of contact points, and so forth.",
  "TouchList": "The **TouchList** interface represents a list of contact points on a touch surface. For example, if the user has three fingers on the touch surface (such as a screen or trackpad), the corresponding TouchList object would have one Touch object for each finger, for a total of three entries.",
  "TrackEvent": "The **TrackEvent** interface of the HTML DOM API is used for events which represent changes to a set of available tracks on an HTML media element; these events are addtrack and removetrack.",
  "TransformStream": "The **TransformStream** interface of the Streams API represents a concrete implementation of the pipe chain _transform stream_ concept.",
  "TransformStreamDefaultController": "The **TransformStreamDefaultController** interface of the Streams API provides methods to manipulate the associated ReadableStream and WritableStream.",
  "TransitionEvent": "The **TransitionEvent** interface represents events providing information related to transitions.",
  "TreeWalker": "The **TreeWalker** object represents the nodes of a document subtree and a position within them.",
  "Trusted Types API": "The **Trusted Types API** gives web developers a way to ensure that input has been passed through a user-specified transformation function before being passed to an API that might execute that input. This can help to protect against client-side cross-site scripting (XSS) attacks. Most commonly the transformation function sanitizes the input.",
  "TrustedHTML": "The **TrustedHTML** interface of the represents a string that a developer can insert into an injection sink that will render it as HTML. These objects are created via TrustedTypePolicy.createHTML() and therefore have no constructor.",
  "TrustedScript": "The **TrustedScript** interface of the represents a string with an uncompiled script body that a developer can insert into an injection sink that might execute the script. These objects are created via TrustedTypePolicy.createScript and therefore have no constructor.",
  "TrustedScriptURL": "The **TrustedScriptURL** interface of the represents a string that a developer can insert into an injection sink that will parse it as a URL of an external script. These objects are created via TrustedTypePolicy.createScriptURL and therefore have no constructor.",
  "TrustedTypePolicy": "The **TrustedTypePolicy** interface of the defines a group of functions which create TrustedType objects.",
  "TrustedTypePolicyFactory": "The **TrustedTypePolicyFactory** interface of the creates policies and allows the verification of Trusted Type objects against created policies.",
  "UI Events": "The UI Events API defines a system for handling user interactions such as mouse and keyboard input. This includes:",
  "UIEvent": "The **UIEvent** interface represents simple user interface events. It is part of the UI Events API, which includes various event types and interfaces related to user interactions.",
  "URL": "The **URL** interface is used to parse, construct, normalize, and encode . It works by providing properties which allow you to easily read and modify the components of a URL.",
  "URL API": "The URL API is a component of the URL standard, which defines what constitutes a valid and the API that accesses and manipulates URLs. The URL standard also defines concepts such as domains, hosts, and IP addresses, and also attempts to describe in a standard way the legacy application/x-www-form-urlencoded used to submit web forms' contents as a set of key/value pairs.",
  "URL Fragment Text Directives": "The **URL fragment text directives** API allows web apps to interact with _text fragments_ in the URL. Text fragments allow linking directly to a specific portion of text in a web document, without requiring the author to annotate it with an ID, using a particular syntax in the URL fragment.",
  "URL Pattern API": "The **URL Pattern API** defines a syntax that is used to create URL pattern",
  "URLPattern": "The **URLPattern** interface of the matches URLs or parts of URLs against a pattern. The pattern can contain capturing groups that extract parts of the matched URL.",
  "URLSearchParams": "The **URLSearchParams** interface defines utility methods to work with the query string of a URL.",
  "USB": "The **USB** interface of the WebUSB API provides attributes and methods for finding and connecting USB devices from a web page.",
  "USBAlternateInterface": "The USBAlternateInterface interface of the WebUSB API provides information about a particular configuration of an interface provided by the USB device. An interface includes one or more alternate settings which can configure a set of endpoints based on the operating mode of the device.",
  "USBConfiguration": "The USBConfiguration interface of the WebUSB API provides information about a particular configuration of a USB device and the interfaces that it supports.",
  "USBConnectionEvent": "The **USBConnectionEvent** interface of the is the event type passed to USB USB.connect_event and USB.disconnect_event events when the user agent detects that a new USB device has been connected or disconnected.",
  "USBDevice": "The **USBDevice** interface of the WebUSB API provides access to metadata about a paired USB device and methods for controlling it.",
  "USBEndpoint": "The USBEndpoint interface of the WebUSB API provides information about an endpoint provided by the USB device. An endpoint represents a unidirectional data stream into or out of a device.",
  "USBInterface": "The USBInterface interface of the WebUSB API provides information about an interface provided by the USB device. An interface represents a feature of the device which implements a particular protocol and may contain endpoints for bidirectional communication.",
  "USBInTransferResult": "The USBInTransferResult interface of the WebUSB API provides the result from a call to the transferIn() and controlTransferIn() methods of the USBDevice interface. It represents the result from requesting a transfer of data from the USB device to the USB host.",
  "USBIsochronousInTransferPacket": "The USBIsochronousInTransferPacket interface of the WebUSB API is part of the response from a call to the isochronousTransferIn() method of the USBDevice interface. It represents the status of an individual packet from a request to transfer data from the USB device to the USB host over an isochronous endpoint.",
  "USBIsochronousInTransferResult": "The USBIsochronousInTransferResult interface of the WebUSB API provides the result from a call to the isochronousTransferIn() method of the USBDevice interface. It represents the result from requesting a transfer of data from the USB device to the USB host.",
  "USBIsochronousOutTransferPacket": "The USBIsochronousOutTransferPacket interface of the WebUSB API is part of the response from a call to the isochronousTransferOut() method of the USBDevice interface. It represents the status of an individual packet from a request to transfer data from the USB host to the USB device over an isochronous endpoint.",
  "USBIsochronousOutTransferResult": "The USBIsochronousOutTransferResult interface of the WebUSB API provides the result from a call to the isochronousTransferOut() method of the USBDevice interface. It represents the result from requesting a transfer of data from the USB host to the USB device.",
  "USBOutTransferResult": "The USBOutTransferResult interface of the WebUSB API provides the result from a call to the transferOut() and controlTransferOut() methods of the USBDevice interface. It represents the result from requesting a transfer of data from the USB host to the USB device.",
  "User-Agent Client Hints API": "The **User-Agent Client Hints API** extends Client Hints to provide a way of exposing browser and platform information via User-Agent response and request headers, and a JavaScript API.",
  "UserActivation": "The **UserActivation** interface provides information about whether a user is currently interacting with the page, or has completed an interaction since page load.",
  "ValidityState": "The **ValidityState** interface represents the _validity states_ that an element can be in, with respect to constraint validation. Together, they help explain why an element's value fails to validate, if it's not valid.",
  "Vibration API": "Most modern mobile devices include vibration hardware, which lets software code provide physical feedback to the user by causing the device to shake. The **Vibration API** offers Web apps the ability to access this hardware, if it exists, and does nothing if the device doesn't support it.",
  "VideoColorSpace": "The **VideoColorSpace** interface of the represents the color space of a video.",
  "VideoDecoder": "The **VideoDecoder** interface of the decodes chunks of video.",
  "VideoEncoder": "The **VideoEncoder** interface of the encodes VideoFrame objects into EncodedVideoChunks.",
  "VideoFrame": "The **VideoFrame** interface of the Web Codecs API represents a frame of a video.",
  "VideoPlaybackQuality": "A **VideoPlaybackQuality** object is returned by the HTMLVideoElement.getVideoPlaybackQuality() method and contains metrics that can be used to determine the playback quality of a video.",
  "VideoTrack": "The **VideoTrack** interface represents a single video track from a element.",
  "VideoTrackList": "The **VideoTrackList** interface is used to represent a list of the video tracks contained within a element, with each track represented by a separate VideoTrack object in the list.",
  "View Transition API": "The **View Transition API** provides a mechanism for easily creating animated transitions between different website views. This includes animating between DOM states in a single-page app (SPA), and animating the navigation between documents in a multi-page app (MPA).",
  "ViewTimeline": "The **ViewTimeline** interface of the represents a view progress timeline (see CSS scroll-driven animations for more details).",
  "ViewTransition": "The **ViewTransition** interface of the represents an active view transition, and provides functionality to react to the transition reaching different states (e.g. ready to run the animation, or animation finished) or skip the transition altogether.",
  "VirtualKeyboard": "The **VirtualKeyboard** interface of the VirtualKeyboard API is useful on devices that have on-screen virtual keyboards, such as tablets, mobile phones, or other devices where a hardware keyboard may not be available.",
  "VirtualKeyboard API": "The VirtualKeyboard API provides developers control over the layout of their applications when the on-screen virtual keyboard appears and disappears on devices such as tablets, mobile phones, or other devices where a hardware keyboard may not be available.",
  "VisibilityStateEntry": "The **VisibilityStateEntry** interface provides timings of page visibility state changes, i.e., when a tab changes from the foreground to the background or vice versa.",
  "Visual Viewport API": "The **Visual Viewport API** provides an explicit mechanism for querying and modifying the properties of the window's . The visual viewport is the visual portion of a screen excluding on-screen keyboards, areas outside of a pinch-zoom area, or any other on-screen artifact that doesn't scale with the dimensions of a page.",
  "VisualViewport": "The **VisualViewport** interface of the represents the visual viewport for a given window. For a page containing iframes, each iframe, as well as the containing page, will have a unique window object. Each window on a page will have a unique VisualViewport representing the properties associated with that window.",
  "VRDisplay": "The **VRDisplay** interface of the WebVR API represents any VR device supported by this API. It includes generic information such as device IDs and descriptions, as well as methods for starting to present a VR scene, retrieving eye parameters and display capabilities, and other important functionality.",
  "VRDisplayCapabilities": "The **VRDisplayCapabilities** interface of the WebVR API describes the capabilities of a VRDisplay — its features can be used to perform VR device capability tests, for example can it return position information.",
  "VRDisplayEvent": "The **VRDisplayEvent** interface of the WebVR API represents the event object of WebVR-related events (see the list of WebVR window extensions).",
  "VREyeParameters": "The **VREyeParameters** interface of the WebVR API represents all the information required to correctly render a scene for a given eye, including field of view information.",
  "VRFieldOfView": "The **VRFieldOfView** interface of the WebVR API represents a field of view defined by 4 different degree values describing the view from a center point.",
  "VRFrameData": "The **VRFrameData** interface of the WebVR API represents all the information needed to render a single frame of a VR scene; constructed by VRDisplay.getFrameData().",
  "VRLayerInit": "The **VRLayerInit** dictionary of the WebVR API represents a content layer (an HTMLCanvasElement or OffscreenCanvas) that you want to present in a VR display.",
  "VRPose": "The **VRPose** interface of the WebVR API represents the state of a VR sensor at a given timestamp (which includes orientation, position, velocity, and acceleration information).",
  "VRStageParameters": "The **VRStageParameters** interface of the WebVR API represents the values describing the stage area for devices that support room-scale experiences.",
  "VTTCue": "The VTTCue interface of the WebVTT API represents a cue that can be added to the text track associated with a particular video (or other media).",
  "VTTRegion": "The VTTRegion interface of the WebVTT API describes a portion of the video to render a VTTCue onto.",
  "WakeLock": "The **WakeLock** interface of the Screen Wake Lock API can be used to request a lock that prevents device screens from dimming or locking when an application needs to keep running.",
  "WakeLockSentinel": "The **WakeLockSentinel** interface of the Screen Wake Lock API can be used to monitor the status of the platform screen wake lock, and manually release the lock when needed.",
  "WaveShaperNode": "The **WaveShaperNode** interface represents a non-linear distorter.",
  "Web Animations API": "The **Web Animations API** allows for synchronizing and timing changes to the presentation of a Web page, i.e. animation of DOM elements. It does so by combining two models: the Timing Model and the Animation Model.",
  "Web Audio API": "The Web Audio API provides a powerful and versatile system for controlling audio on the Web, allowing developers to choose audio sources, add effects to audio, create audio visualizations, apply spatial effects (such as panning) and much more.",
  "Web Authentication API": "The Web Authentication API (WebAuthn) is an extension of the Credential Management API that enables strong authentication with public key cryptography, enabling passwordless authentication and secure multi-factor authentication (MFA) without SMS texts.",
  "Web Bluetooth API": "The Web Bluetooth API provides the ability to connect and interact with Bluetooth Low Energy peripherals.",
  "Web Components": "Web Components is a suite of different technologies allowing you to create reusable custom elements — with their functionality encapsulated away from the rest of your code — and utilize them in your web apps.",
  "Web Crypto API": "The **Web Crypto API** is an interface allowing a script to use cryptographic primitives in order to build systems using cryptography.",
  "Web Locks API": "The **Web Locks API** allows scripts running in one tab or worker to asynchronously acquire a lock, hold it while work is performed, then release it. While held, no other script executing in the same origin can acquire the same lock, which allows a web app running in multiple tabs or workers to coordinate work and the use of resources.",
  "Web MIDI API": "The Web MIDI API connects to and interacts with Musical Instrument Digital Interface (MIDI) Devices.",
  "Web NFC API": "The Web NFC API allows exchanging data over NFC via light-weight NFC Data Exchange Format (NDEF) messages.",
  "Web Periodic Background Synchronization API": "The **Web Periodic Background Synchronization API** provides a way to register tasks to be run in a at periodic intervals with network connectivity. These tasks are referred to as periodic background sync requests.",
  "Web Serial API": "The **Web Serial API** provides a way for websites to read from and write to serial devices. These devices may be connected via a serial port, or be USB or Bluetooth devices that emulate a serial port.",
  "Web Share API": "The **Web Share API** provides a mechanism for sharing text, links, files, and other content to an arbitrary _share target_ selected by the user.",
  "Web Speech API": "The **Web Speech API** enables you to incorporate voice data into web apps.",
  "Web Storage API": "The **Web Storage API** provides mechanisms by which browsers can store key/value pairs, in a much more intuitive fashion than using .",
  "Web Workers API": "**Web Workers** makes it possible to run a script operation in a background thread separate from the main execution thread of a web application. The advantage of this is that laborious processing can be performed in a separate thread, allowing the main (usually the UI) thread to run without being blocked/slowed down.",
  "WebCodecs API": "The **WebCodecs API** gives web developers low-level access to the individual frames of a video stream and chunks of audio.",
  "WebGL2RenderingContext": "The **WebGL2RenderingContext** interface provides the OpenGL ES 3.0 rendering context for the drawing surface of an HTML element.",
  "WebGL: 2D and 3D graphics for the web": "**WebGL** (Web Graphics Library) is a JavaScript API for rendering high-performance interactive 3D and 2D graphics within any compatible web browser without the use of plug-ins. WebGL does so by introducing an API that closely conforms to OpenGL ES 2.0 that can be used in HTML elements. This conformance makes it possible for the API to take advantage of hardware graphics acceleration provided by the user's device.",
  "WEBGL_color_buffer_float extension": "The **WEBGL_color_buffer_float** extension is part of the WebGL API and adds the ability to render to 32-bit floating-point color buffers.",
  "WEBGL_compressed_texture_astc extension": "The **WEBGL_compressed_texture_astc** extension is part of the WebGL API and exposes Adaptive Scalable Texture Compression (ASTC) compressed texture formats to WebGL.",
  "WEBGL_compressed_texture_etc extension": "The **WEBGL_compressed_texture_etc** extension is part of the WebGL API and exposes 10 ETC/EAC compressed texture formats.",
  "WEBGL_compressed_texture_etc1 extension": "The **WEBGL_compressed_texture_etc1** extension is part of the WebGL API and exposes the ETC1 compressed texture format.",
  "WEBGL_compressed_texture_pvrtc extension": "The **WEBGL_compressed_texture_pvrtc** extension is part of the WebGL API and exposes four PVRTC compressed texture formats.",
  "WEBGL_compressed_texture_s3tc extension": "The **WEBGL_compressed_texture_s3tc** extension is part of the WebGL API and exposes four S3TC compressed texture formats.",
  "WEBGL_compressed_texture_s3tc_srgb extension": "The **WEBGL_compressed_texture_s3tc_srgb** extension is part of the WebGL API and exposes four S3TC compressed texture formats for the sRGB colorspace.",
  "WEBGL_debug_renderer_info extension": "The **WEBGL_debug_renderer_info** extension is part of the WebGL API and exposes two constants with information about the graphics driver for debugging purposes.",
  "WEBGL_debug_shaders extension": "The **WEBGL_debug_shaders** extension is part of the WebGL API and exposes a method to debug shaders from privileged contexts.",
  "WEBGL_depth_texture extension": "The **WEBGL_depth_texture** extension is part of the WebGL API and defines 2D depth and depth-stencil textures.",
  "WEBGL_draw_buffers extension": "The **WEBGL_draw_buffers** extension is part of the WebGL API and enables a fragment shader to write to several textures, which is useful for deferred shading, for example.",
  "WEBGL_lose_context extension": "The **WEBGL_lose_context** extension is part of the WebGL API and exposes functions to simulate losing and restoring a WebGLRenderingContext.",
  "WEBGL_multi_draw extension": "The **WEBGL_multi_draw** extension is part of the",
  "WebGLActiveInfo": "The **WebGLActiveInfo** interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getActiveAttrib() and WebGLRenderingContext.getActiveUniform() methods.",
  "WebGLBuffer": "The **WebGLBuffer** interface is part of the WebGL API and represents an opaque buffer object storing data such as vertices or colors.",
  "WebGLContextEvent": "The **WebGLContextEvent** interface is part of the WebGL API and is an interface for an event that is generated in response to a status change to the WebGL rendering context.",
  "WebGLFramebuffer": "The **WebGLFramebuffer** interface is part of the WebGL API and represents a collection of buffers that serve as a rendering destination.",
  "WebGLObject": "The **WebGLObject** is part of the WebGL API and is the parent interface for all WebGL objects.",
  "WebGLProgram": "The **WebGLProgram** is part of the WebGL API and is a combination of two compiled WebGLShaders consisting of a vertex shader and a fragment shader (both written in GLSL).",
  "WebGLQuery": "The **WebGLQuery** interface is part of the WebGL 2 API and provides ways to asynchronously query for information. By default, occlusion queries and primitive queries are available.",
  "WebGLRenderbuffer": "The **WebGLRenderbuffer** interface is part of the WebGL API and represents a buffer that can contain an image, or that can be a source or target of a rendering operation.",
  "WebGLRenderingContext": "The **WebGLRenderingContext** interface provides an interface to the OpenGL ES 2.0 graphics rendering context for the drawing surface of an HTML element.",
  "WebGLSampler": "The **WebGLSampler** interface is part of the WebGL 2 API and stores sampling parameters for WebGLTexture access inside of a shader.",
  "WebGLShader": "The **WebGLShader** is part of the WebGL API and can either be a vertex or a fragment shader. A WebGLProgram requires both types of shaders.",
  "WebGLShaderPrecisionFormat": "The **WebGLShaderPrecisionFormat** interface is part of the WebGL API and represents the information returned by calling the WebGLRenderingContext.getShaderPrecisionFormat() method.",
  "WebGLSync": "The **WebGLSync** interface is part of the WebGL 2 API and is used to synchronize activities between the GPU and the application.",
  "WebGLTexture": "The **WebGLTexture** interface is part of the WebGL API and represents an opaque texture object providing storage and state for texturing operations.",
  "WebGLTransformFeedback": "The **WebGLTransformFeedback** interface is part of the WebGL 2 API and enables transform feedback, which is the process of capturing primitives generated by vertex processing. It allows to preserve the post-transform rendering state of an object and resubmit this data multiple times.",
  "WebGLUniformLocation": "The **WebGLUniformLocation** interface is part of the WebGL API and represents the location of a uniform variable in a shader program.",
  "WebGLVertexArrayObject": "The **WebGLVertexArrayObject** interface is part of the WebGL 2 API, represents vertex array objects (VAOs) pointing to vertex array data, and provides names for different sets of vertex data.",
  "WebGPU API": "The **WebGPU API** enables web developers to use the underlying system's GPU (Graphics Processing Unit) to carry out high-performance computations and draw complex images that can be rendered in the browser.",
  "WebHID API": "A Human Interface Device (HID) is a type of device that takes input from or provides output to humans. It also refers to the HID protocol, a standard for bi-directional communication between a host and a device that is designed to simplify the installation procedure. The HID protocol was originally developed for USB devices but has since been implemented over many other protocols, including Bluetooth.",
  "Point": "**Point** is an interface which represents a point in 2-dimensional space. It is non-standard, not broadly compatible, and should not be used.",
  "WebOTP API": "The **WebOTP API** provides a streamlined user experience for web apps to verify that a phone number belongs to a user when using it as a sign-in factor. WebOTP is an extension of the Credential Management API.",
  "WebRTC API": "**WebRTC** (Web Real-Time Communication) is a technology that enables Web applications and sites to capture and optionally stream audio and/or video media, as well as to exchange arbitrary data between browsers without requiring an intermediary. The set of standards that comprise WebRTC makes it possible to share data and perform teleconferencing peer-to-peer, without requiring that the user install plug-ins or any other third-party software.",
  "WebSocket": "The WebSocket object provides the API for creating and managing a WebSocket connection to a server, as well as for sending and receiving data on the connection.",
  "The WebSocket API (WebSockets)": "The **WebSocket API** makes it possible to open a two-way interactive communication session between the user's browser and a server. With this API, you can send messages to a server and receive responses without having to poll the server for a reply.",
  "WebSocketStream": "The **WebSocketStream** interface of the is a promise-based API for connecting to a WebSocket server. It uses streams to send and receive data on the connection, and can therefore take advantage of stream backpressure automatically, regulating the speed of reading or writing to avoid bottlenecks in the application.",
  "WebTransport": "The **WebTransport** interface of the provides functionality to enable a user agent to connect to an HTTP/3 server, initiate reliable and unreliable transport in either or both directions, and close the connection once it is no longer needed.",
  "WebTransport API": "The **WebTransport API** provides a modern update to , transmitting data between client and server using HTTP/3 Transport. WebTransport provides support for multiple streams, unidirectional streams, and out-of-order delivery. It enables reliable transport via and unreliable transport via UDP-like datagrams.",
  "WebTransportBidirectionalStream": "The **WebTransportBidirectionalStream** interface of the represents a bidirectional stream created by a server or a client that can be used for reliable transport. Provides access to a WebTransportReceiveStream for reading incoming data, and a WebTransportSendStream for writing outgoing data.",
  "WebTransportDatagramDuplexStream": "The **WebTransportDatagramDuplexStream** interface of the represents a duplex stream that can be used for unreliable transport of datagrams between client and server. Provides access to a ReadableStream for reading incoming datagrams, a WritableStream for writing outgoing datagrams, and various settings and statistics related to the stream.",
  "WebTransportError": "The **WebTransportError** interface of the represents an error related to the API, which can arise from server errors, network connection problems, or client-initiated abort operations (for example, arising from a WritableStream.abort() call).",
  "WebTransportReceiveStream": "The WebTransportReceiveStream interface of the is a ReadableStream that can be used to read from an incoming unidirectional or bidirectional WebTransport stream.",
  "WebTransportSendStream": "The WebTransportSendStream interface of the is a specialized WritableStream that is used to send outbound data in both unidirectional or bidirectional WebTransport streams.",
  "WebUSB API": "The **WebUSB API** provides a way to expose non-standard Universal Serial Bus (USB) compatible devices services to the web, to make USB safer and easier to use.",
  "WebVR API": "WebVR provides support for exposing virtual reality devices — for example, head-mounted displays like the Oculus Rift or HTC Vive — to web apps, enabling developers to translate position and movement information from the display into movement around a 3D scene. This has numerous, interesting applications, from virtual product tours and interactive training apps to immersive first-person games.",
  "WebVTT API": "**Web Video Text Tracks** (**WebVTT**) are text tracks providing specific text \"cues\" that are time-aligned with other media, such as video or audio tracks. The **WebVTT API** provides functionality to define and manipulate these text tracks.",
  "WebXR Device API": "**WebXR** is a group of standards which are used together to support rendering 3D scenes to hardware designed for presenting virtual worlds (**virtual reality**, or **VR**), or for adding graphical imagery to the real world, (**augmented reality**, or **AR**). The **WebXR Device API** implements the core of the WebXR feature set, managing the selection of output devices, render the 3D scene to the chosen device at the appropriate frame rate, and manage motion vectors created using input controllers.",
  "WGSLLanguageFeatures": "The **WGSLLanguageFeatures** interface of the is a setlike object that reports the WGSL language extensions supported by the WebGPU implementation.",
  "WheelEvent": "The **WheelEvent** interface represents events that occur due to the user moving a mouse wheel or similar input device.",
  "Window": "The **Window** interface represents a window containing a document; the document property points to the DOM document loaded in that window.",
  "Window Controls Overlay API": "The Window Controls Overlay API gives Progressive Web Apps installed on desktop operating systems the ability to hide the default window title bar and display their own content",
  "Window Management API": "The **Window Management API** allows you to get detailed information on the displays connected to your device and more easily place windows on specific screens, paving the way towards more effective multi-screen applications.",
  "WindowClient": "The WindowClient interface of the ServiceWorker API represents the scope of a service worker client that is a document in a browsing context, controlled by an active worker. The service worker client independently selects and uses a service worker for its own loading and sub-resources.",
  "WindowControlsOverlay": "The **WindowControlsOverlay** interface of the Window Controls Overlay API exposes information about the geometry",
  "WindowControlsOverlayGeometryChangeEvent": "The **WindowControlsOverlayGeometryChangeEvent** interface of the Window Controls Overlay API is passed to WindowControlsOverlay/geometrychange_event when the size or visibility of a desktop Progress Web App's title bar region changes.",
  "WindowSharedStorage": "The **WindowSharedStorage** interface of the represents the shared storage for a particular origin within a standard browsing context.",
  "Worker": "The **Worker** interface of the Web Workers API represents a background task that can be created via script, which can send messages back to its creator.",
  "WorkerGlobalScope": "The **WorkerGlobalScope** interface of the Web Workers API is an interface representing the scope of any worker. Workers have no browsing context; this scope contains the information usually conveyed by Window objects — in this case event handlers, the console or the associated WorkerNavigator object. Each WorkerGlobalScope has its own event loop.",
  "WorkerLocation": "The **WorkerLocation** interface defines the absolute location of the script executed by the Worker. Such an object is initialized for each worker and is available via the WorkerGlobalScope.location property obtained by calling self.location.",
  "WorkerNavigator": "The **WorkerNavigator** interface represents a subset of the interface allowed to be accessed from a . Such an object is initialized for each worker and is available via the property.",
  "Worklet": "The **Worklet** interface is a lightweight version of Web Workers and gives developers access to low-level parts of the rendering pipeline.",
  "WorkletGlobalScope": "The **WorkletGlobalScope** interface is an abstract class that specific worklet scope classes inherit from. Each WorkletGlobalScope defines a new global environment.",
  "WorkletSharedStorage": "The **WorkletSharedStorage** interface of the represents the shared storage for a particular origin within a worklet context.",
  "WritableStream": "The **WritableStream** interface of the Streams API provides a standard abstraction for writing streaming data to a destination, known as a sink.",
  "WritableStreamDefaultController": "The **WritableStreamDefaultController** interface of the Streams API represents a controller allowing control of a WritableStream's state. When constructing a WritableStream, the underlying sink is given a corresponding WritableStreamDefaultController instance to manipulate.",
  "WritableStreamDefaultWriter": "The **WritableStreamDefaultWriter** interface of the Streams API is the object returned by WritableStream.getWriter() and once created locks the writer to the WritableStream ensuring that no other streams can write to the underlying sink.",
  "XMLDocument": "The **XMLDocument** interface represents an XML document. It inherits from the generic and does not add any specific methods or properties to it: nevertheless, several algorithms behave differently with the two types of documents.",
  "XMLHttpRequest": "XMLHttpRequest (XHR) objects are used to interact with servers. You can retrieve data from a URL without having to do a full page refresh. This enables a Web page to update just part of a page without disrupting what the user is doing.",
  "XMLHttpRequest API": "The **XMLHttpRequest API** enables web apps to make HTTP requests to web servers and receive the responses programmatically using JavaScript. This in turn enables a website to update just part of a page with data from the server, rather than having to navigate to a whole new page. This practice is also sometimes known as .",
  "XMLHttpRequestEventTarget": "XMLHttpRequestEventTarget is the interface that describes the event handlers shared on XMLHttpRequest and XMLHttpRequestUpload.",
  "XMLHttpRequestUpload": "The **XMLHttpRequestUpload** interface represents the upload process for a specific XMLHttpRequest. It is an _opaque_ object that represents the underlying, browser-dependent, upload process. It is an XMLHttpRequestEventTarget and can be obtained by calling XMLHttpRequest.upload.",
  "XMLSerializer": "The XMLSerializer interface provides the XMLSerializer.serializeToString method to construct an XML string representing a tree.",
  "XPathEvaluator": "The XPathEvaluator interface allows to compile and evaluate expressions.",
  "XPathException": "In the DOM XPath API the **XPathException** interface represents exception conditions that can be encountered while performing XPath operations.",
  "XPathExpression": "This interface is a compiled XPath expression that can be evaluated on a document or specific node to return information from its tree.",
  "XPathResult": "The **XPathResult** interface represents the results generated by evaluating an XPath expression within the context of a given node.",
  "XRAnchor": "The **XRAnchor** interface creates anchors which keep track of the pose that is fixed relative to the real world. With anchors, you can specify poses in the world that need to be updated to correctly reflect the evolving understanding of the world, such that the poses remain aligned with the same place in the physical world. That helps to build an illusion that the placed objects are really present in the user's environment.",
  "XRAnchorSet": "The **XRAnchorSet** interface exposes a collection of anchors. Its instances are returned by XRFrame.trackedAnchors and are Set-like objects.",
  "XRBoundedReferenceSpace": "The WebXR Device API's **XRBoundedReferenceSpace** interface describes a virtual world reference space which has preset boundaries. This extends XRReferenceSpace, which describes an essentially unrestricted space around the viewer's position. These bounds are defined using an array of points, each of which defines a vertex in a polygon inside which the user is allowed to move.",
  "XRCompositionLayer": "The **XRCompositionLayer** interface of the WebXR Device API is a base class that defines a set of common properties and behaviors for WebXR layer types. It is not constructable on its own.",
  "XRCPUDepthInformation": "The **XRCPUDepthInformation** interface contains depth information from the CPU (returned by XRFrame.getDepthInformation()).",
  "XRCubeLayer": "The **XRCubeLayer** interface of the WebXR Device API is a layer that renders directly from a cubemap and projects it onto the inside faces of a cube.",
  "XRCylinderLayer": "The **XRCylinderLayer** interface of the WebXR Device API is a layer that takes up a curved rectangular space in the virtual environment. Only the front of the layer is visible.",
  "XRDepthInformation": "The **XRDepthInformation** interface contains information about the distance from the user's device to the real-world geometry in the user's environment.",
  "XREquirectLayer": "The **XREquirectLayer** interface of the WebXR Device API is a layer that maps equirectangular coded data onto the inside of a sphere.",
  "XRFrame": "A WebXR Device API **XRFrame** object is passed into the XRSession.requestAnimationFrame callback function and provides access to the information needed in order to render a single frame of animation for an XRSession describing a VR or AR scene. Events which communicate the tracking state of objects also provide an XRFrame reference as part of their structure.",
  "XRHand": "The **XRHand** interface is pair iterator (an ordered map) with the key being the hand joints and the value being an XRJointSpace.",
  "XRHitTestResult": "The **XRHitTestResult** interface of the WebXR Device API contains a single result of a hit test. You can get an array of XRHitTestResult objects for a frame by calling XRFrame.getHitTestResults().",
  "XRHitTestSource": "The **XRHitTestSource** interface of the WebXR Device API handles hit test subscriptions. You can get an XRHitTestSource object by using the XRSession.requestHitTestSource() method.",
  "XRInputSource": "The WebXR Device API's **XRInputSource** interface describes a single source of control input which is part of the user's WebXR-compatible virtual or augmented reality system. The device is specific to the platform being used, but provides the direction in which it is being aimed and optionally may generate events if the user triggers performs actions using the device.",
  "XRInputSourceArray": "The interface **XRInputSourceArray** represents a _live_ list of WebXR input sources, and is used as the return value of the XRSession property XRSession.inputSources. Each entry is an XRInputSource representing one input device connected to the WebXR system.",
  "XRInputSourceEvent": "The WebXR Device API's **XRInputSourceEvent** interface describes an event which has occurred on a WebXR user input device such as a hand controller, gaze tracking system, or motion tracking system. More specifically, they represent a change in the state of an XRInputSource.",
  "XRInputSourcesChangeEvent": "The WebXR Device API interface **XRInputSourcesChangeEvent** is used to represent the XRSession.inputsourceschange_event event sent to an XRSession when the set of available WebXR input controllers changes.",
  "XRJointPose": "The **XRJointPose** interface is an XRPose with additional information about the size of the skeleton joint it represents.",
  "XRJointSpace": "The **XRJointSpace** interface is an XRSpace and represents the position and orientation of an XRHand joint.",
  "XRLayer": "The **XRLayer** interface of the WebXR Device API is the base class for WebXR layer types. It inherits methods from EventTarget.",
  "XRLayerEvent": "The **XRLayerEvent** interface of the WebXR Device API is the event type for events related to a change of state of an XRLayer object. These events occur, for example, when the layer needs to be redrawn.",
  "XRLightEstimate": "The **XRLightEstimate** interface of the WebXR Device API provides the estimated lighting values for an XRLightProbe at the time represented by an XRFrame.",
  "XRLightProbe": "The **XRLightProbe** interface of the WebXR Device API contains lighting information at a given point in the user's environment. You can get an XRLighting object using the XRSession.requestLightProbe() method.",
  "XRMediaBinding": "The **XRMediaBinding** interface is used to create layers that display the content of an HTMLVideoElement.",
  "XRPose": "XRPose is a WebXR API interface representing a position and orientation in the 3D space, relative to the XRSpace within which it resides. The XRSpace—which is either an XRReferenceSpace or an XRBoundedReferenceSpace—defines the coordinate system used for the pose and, in the case of an XRViewerPose, its underlying views.",
  "XRProjectionLayer": "The **XRProjectionLayer** interface of the WebXR Device API is a layer that fills the entire view of the observer and is refreshed close to the device's native frame rate.",
  "XRQuadLayer": "The **XRQuadLayer** interface of the WebXR Device API is a layer that takes up a flat rectangular space in the virtual environment. An XRQuadLayer has no thickness. It is a two-dimensional object positioned and oriented in 3D space. The position of a quad refers to the center of the quad. Only the front of the layer is visible.",
  "XRRay": "The **XRRay** interface of the WebXR Device API is a geometric ray described by an origin point and a direction vector.",
  "XRReferenceSpace": "The WebXR Device API's **XRReferenceSpace** interface describes the coordinate system for a specific tracked entity or object within the virtual world using a specified tracking behavior. The tracking behavior is defined by the selected reference space type. It expands upon the base class, XRSpace, by adding support for several different tracking behaviors as well as to request a new reference space which describes the offset transform between the tracked object and another location in the world.",
  "XRReferenceSpaceEvent": "The WebXR Device API interface **XRReferenceSpaceEvent** represents an event sent to an XRReferenceSpace. Currently, the only event that uses this type is the XRReferenceSpace.reset_event event.",
  "XRRenderState": "The **XRRenderState** interface of the WebXR Device API contains configurable values which affect how the imagery generated by an gets composited. These properties include the range of distances from the viewer within which content should be rendered, the vertical field of view (for inline presentations), and a reference to the XRWebGLLayer being used as the target for rendering the scene prior to it being presented on the XR device's display or displays.",
  "XRRigidTransform": "The **XRRigidTransform** is a WebXR API interface that represents the 3D geometric transform described by a position and orientation.",
  "XRSession": "The **XRSession** interface of the WebXR Device API represents an ongoing XR session, providing methods and properties used to interact with and control the session. To open a WebXR session, use the XRSystem interface's XRSystem.requestSession method.",
  "XRSessionEvent": "The WebXR Device API's **XRSessionEvent** interface describes an event which indicates the change of the state of an XRSession. These events occur, for example, when the session ends or the visibility of its context changes.",
  "XRSpace": "The **XRSpace** interface of the WebXR Device API is an abstract interface providing a common basis for every class which represents a virtual coordinate system within the virtual world, in which its origin corresponds to a physical location. Spatial data in WebXR is always expressed relative to an object based upon one of the descendant interfaces of XRSpace, at the time at which a given XRFrame takes place.",
  "XRSubImage": "The **XRSubImage** interface of the WebXR Device API represents what viewport of the GPU texture to use for rendering.",
  "XRSystem": "The WebXR Device API interface **XRSystem** provides methods which let you get access to an XRSession object representing a WebXR session. With that XRSession in hand, you can use it to interact with the Augmented Reality (AR) or Virtual Reality (VR) device.",
  "XRTransientInputHitTestResult": "The **XRTransientInputHitTestResult** interface of the WebXR Device API contains an array of results of a hit test for transient input, grouped by input source.",
  "XRTransientInputHitTestSource": "The **XRTransientInputHitTestSource** interface of the WebXR Device API handles transient input hit test subscriptions. You can get an XRTransientInputHitTestSource object by calling the XRSession.requestHitTestSourceForTransientInput().",
  "XRView": "The WebXR Device API's **XRView** interface describes a single view into the XR scene for a specific frame, providing orientation and position information for the viewpoint. You can think of it as a description of a specific eye or camera and how it views the world. A 3D frame will involve two views, one for each eye, separated by an appropriate distance which approximates the distance between the viewer's eyes. This allows the two views, when projected in isolation into the appropriate eyes, to simulate a 3D world.",
  "XRViewerPose": "The WebXR Device API interface **XRViewerPose** represents the pose (the position and orientation) of a viewer's point of view on the scene. Each XRViewerPose can have multiple views to represent, for example, the slight separation between the left and right eye.",
  "XRViewport": "The WebXR Device API's **XRViewport** interface provides properties used to describe the size and position of the current viewport within the XRWebGLLayer being used to render the 3D scene.",
  "XRWebGLBinding": "The **XRWebGLBinding** interface is used to create layers that have a GPU backend.",
  "XRWebGLDepthInformation": "The **XRWebGLDepthInformation** interface contains depth information from the GPU/WebGL (returned by XRWebGLBinding.getDepthInformation()).",
  "XRWebGLLayer": "The **XRWebGLLayer** interface of the WebXR Device API provides a linkage between the WebXR device (or simulated XR device, in the case of an inline session) and a WebGL context used to render the scene for display on the device. In particular, it provides access to the WebGL framebuffer and viewport to ease access to the context.",
  "XRWebGLSubImage": "The **XRWebGLSubImage** interface is used during rendering of WebGL layers.",
  "XSLTProcessor": "An **XSLTProcessor** applies an XSLT stylesheet transformation to an XML document to"
}